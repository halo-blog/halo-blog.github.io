<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>HALO</title>
  
  <subtitle>HALO</subtitle>
  <link href="https://halo123.top/atom.xml" rel="self"/>
  
  <link href="https://halo123.top/"/>
  <updated>2021-06-14T15:36:14.631Z</updated>
  <id>https://halo123.top/</id>
  
  <author>
    <name>HALO</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>棘皮动物进化有关文献整理</title>
    <link href="https://halo123.top/2021/06/11/Biology/%E6%A3%98%E7%9A%AE%E5%8A%A8%E7%89%A9%E8%BF%9B%E5%8C%96%E6%9C%89%E5%85%B3%E6%96%87%E7%8C%AE%E6%95%B4%E7%90%86/"/>
    <id>https://halo123.top/2021/06/11/Biology/%E6%A3%98%E7%9A%AE%E5%8A%A8%E7%89%A9%E8%BF%9B%E5%8C%96%E6%9C%89%E5%85%B3%E6%96%87%E7%8C%AE%E6%95%B4%E7%90%86/</id>
    <published>2021-06-11T14:57:01.000Z</published>
    <updated>2021-06-14T15:36:14.631Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Plated-Cambrian-Bilaterians-Reveal-the-Earliest-Stages-of-Echinoderm-Evolution"><a class="header-anchor" href="#Plated-Cambrian-Bilaterians-Reveal-the-Earliest-Stages-of-Echinoderm-Evolution"></a>Plated Cambrian Bilaterians Reveal the Earliest Stages of Echinoderm Evolution</h2><p>[文献链接](<a href="https://journals.plos.org/plosone/article?id=10.1371/journal.pone.0038296">Plated Cambrian Bilaterians Reveal the Earliest Stages of Echinoderm Evolution (plos.org)</a>)</p><h3 id="摘要"><a class="header-anchor" href="#摘要"></a>摘要</h3><p>Echinoderms are unique in being pentaradiate, having diverged from the ancestral bilaterian body plan more radically than any other animal phylum. This transformation arises during ontogeny, as echinoderm larvae are initially bilateral, then pass through an asymmetric phase, before giving rise to the pentaradiate adult. Many fossil echinoderms are radial and a few are asymmetric, but until now none have been described that show the original bilaterian stage in echinoderm evolution. Here we report new fossils from the early middle Cambrian of southern Europe that are the first echinoderms with a fully bilaterian body plan as adults. Morphologically they are intermediate between two of the most basal classes, the Ctenocystoidea and Cincta. This provides a root for all echinoderms and confirms that the earliest members were deposit feeders not suspension feeders</p><blockquote><p>棘皮动物是一种独特的五辐射对称动物，它比其他任何动物门都更彻底地从原始的双侧体中分离出来。这种转变发生在个体发育过程中，因为棘皮动物的幼虫最初是双侧的，然后经过一个不对称的阶段，在产生五辐射的成虫之前。许多棘皮动物的化石是放射状的，少数是不对称的，但迄今为止还没有关于棘皮动物进化的原始双边阶段的描述。本文报道了欧洲南部中寒武纪早期的第一批棘皮动物化石。在形态上，它们介于两个最基本的纲，栉囊总纲和栉囊总纲之间。这为所有棘皮动物提供了一个基础，并证实了最早的成员是沉积物捕食者，而不是悬浮捕食者</p></blockquote><h3 id="重点"><a class="header-anchor" href="#重点"></a>重点</h3><h2 id="The-sea-cucumber-genome-provides-insights-into-morphological-evolution-and-visceral-regeneration"><a class="header-anchor" href="#The-sea-cucumber-genome-provides-insights-into-morphological-evolution-and-visceral-regeneration"></a>The sea cucumber genome provides insights into morphological evolution and visceral regeneration</h2><p>DOI：</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Plated-Cambrian-Bilaterians-Reveal-the-Earliest-Stages-of-Echinoderm-Evolution&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#Plated-Cambrian-Bila</summary>
      
    
    
    
    <category term="生物学" scheme="https://halo123.top/categories/%E7%94%9F%E7%89%A9%E5%AD%A6/"/>
    
    
    <category term="棘皮动物" scheme="https://halo123.top/tags/%E6%A3%98%E7%9A%AE%E5%8A%A8%E7%89%A9/"/>
    
  </entry>
  
  <entry>
    <title>从基因层面对棘皮动物对称性研究</title>
    <link href="https://halo123.top/2021/06/09/Biology/%E6%A3%98%E7%9A%AE%E5%8A%A8%E7%89%A9%E5%AF%B9%E7%A7%B0%E6%80%A7%E7%A0%94%E7%A9%B6/"/>
    <id>https://halo123.top/2021/06/09/Biology/%E6%A3%98%E7%9A%AE%E5%8A%A8%E7%89%A9%E5%AF%B9%E7%A7%B0%E6%80%A7%E7%A0%94%E7%A9%B6/</id>
    <published>2021-06-08T16:35:01.000Z</published>
    <updated>2021-06-14T15:36:14.091Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>原文链接：<a href="https://www.nature.com/articles/s42003-020-1091-1#MOESM1">Genomic insights of body plan transitions from bilateral to pentameral symmetry in Echinoderms | Communications Biology (nature.com)</a></p></blockquote><p>Genomic insights of body plan transitions from bilateral to pentameral symmetry in Echinoderms</p><p>从基因组学去洞察棘皮动物体平面从双侧对称转变到五辐射对称</p><h2 id="Abstract"><a class="header-anchor" href="#Abstract"></a>Abstract</h2><p>Echinoderms are an exceptional group of bilaterians that develop pentameral adult symmetry from a bilaterally symmetric larva. However, the genetic basis in evolution and development of this unique transformation remains to be clarified. Here we report newly sequenced genomes, developmental transcriptomes, and proteomes of diverse echinoderms including the green sea urchin (<em>L. variegatus</em>), a sea cucumber (<em>A. japonicus</em>), and with particular emphasis on a sister group of tvhe earliest-diverged echinoderms, the feather star (<em>A. japonica</em>). We learned that the last common ancestor of echinoderms retained a well-organized Hox cluster reminiscent of the hemichordate, and had gene sets involved in endoskeleton development. Further, unlike in other animal groups, the most conserved developmental stages were not at the body plan establishing phase, and genes normally involved in bilaterality appear to function in pentameric axis development. These results enhance our understanding of the divergence of protostomes and deuterostomes almost 500 Mya.</p><blockquote><p>棘皮动物是一类特殊的对称动物，从两侧对称的幼虫发育成五辐射对称的成体。然而，这进化的遗传基础和独特的变态发育仍有待澄清。在这里，我们报告了新测序的基因组、发育转录组和多种棘皮动物的蛋白质组，其中包括绿海胆（ <em>L. variegatus</em>）、海参（<em>A. japonicus</em>）和侧重于一类早期分支的棘皮动物——海羽星（<em>A. japonica</em>）。我们获悉，棘皮动物最后的共同祖先保留着使人想到半索动物的有序的 Hox 基因簇，并且基因簇参与了内骨骼的发育。进一步研究，不像其他动物群，最保守的发育阶段不是在身体平面建立时期，通常涉及两侧对称的基因似乎在五轴对称的发育中发挥作用。这些研究结果加深了我们认识——原口动物和后口动物产生分歧在差不多 500 万年前。</p></blockquote><h2 id="Introduction"><a class="header-anchor" href="#Introduction"></a>Introduction</h2><p>Bilateral symmetry is highly conserved throughout animal evolution. Echinoderms, a group closely related to chordates, are exceptional in this regard, developing pentameral symmetry as adults from bilaterally symmetric larvae. Even sea cucumbers, which show worm-like bilateral structures as adults, retain pentameral symmetry patterning along their oral-aboral axis (Fig. <a href="https://www.nature.com/articles/s42003-020-1091-1#Fig1">1a</a>)<sup><a href="https://www.nature.com/articles/s42003-020-1091-1#ref-CR1">1</a></sup>. Understanding the development of pentameral symmetry would provide important insight into the evolutionary mechanisms of major structural changes in evolution<sup><a href="https://www.nature.com/articles/s42003-020-1091-1#ref-CR2">2</a>,<a href="https://www.nature.com/articles/s42003-020-1091-1#ref-CR3">3</a></sup>. To probe the genetic and developmental transitions behind the evolution of these unique echinoderm features, we sequenced genomes of the green sea urchin (<em>Lytechinus variegatus</em>) and the feather star (<em>Anneissia japonica</em>), representing nearly 500 Mya of evolutionary history. We also added developmental transcriptomic datasets for other echinoderms (Supplementary Tables <a href="https://www.nature.com/articles/s42003-020-1091-1#MOESM1">1</a>–<a href="https://www.nature.com/articles/s42003-020-1091-1#MOESM1">22</a> and “Methods”), such as the sea cucumber (<em>Apostichopus japonicus</em>), and proteome analyses of feather star skeleton to broadly analyze five living echinoderm classes. These data provide fundamental genomic, transcriptomic, and proteomic insights of body plan evolution in echinoderms, and enhance our understanding of the divergence of protostomes and deuterostomes.</p><blockquote><p>在整个动物进化过程中，两侧对称是高度保守的。作为一个与脊索动物密切相关的棘皮动物，但在这方面是例外的，从两侧对称的幼虫发育成五辐射对称的成体。即使是海参，在成年时表现出类似蠕虫的双侧结构，也沿着它们的口-口轴保持着五辐射对称模式（图 1a）。了解五辐射对称的发展将为了解演化过程中主要结构变化的演化机制提供重要的信息。探究这些独特的棘皮动物特征进化背后的遗传和发育转变，我们对绿海胆（<em>Lytechinus variegatus</em>）和海羽星 (<em>Anneissia japonica</em>）的基因组进行了测序，代表了近 500 万年的进化史。我们还添加了其他棘皮动物的发育转录组数据集（补充 表1-22 和 “方法”章节），比如海参（<em>Apostichopus japonicus</em>），此外通过对海羽星骨骼的蛋白质组研究，对现存的五种棘皮动物进行了广泛的分析。这些数据为棘皮动物体平面进化的基因组学、转录组学和蛋白质组学提供了基础，并加深了我们对原口动物和后口动物差异的理解。</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/halo-blog/cdn-blog-img-c@master/EchinodermsAndTheirEvolutionaryDiversity.png" alt="EchinodermsAndTheirEvolutionaryDiversity"></p><p><strong>a</strong> Echinoderm species of five living classes were analyzed in this study. Pentameral symmetry can also be observed in the transverse section of the sea cucumber (top), which otherwise shows apparent bilaterality. <strong>b</strong> Evolutionary rate and the phylogenetic tree constructed by RAxML software using the 1196 orthologous protein sequences identified by reciprocal best blast hit (RBBH). The values on branches represent bootstrap values. <strong>c</strong> Schematic representation of genomic organization of ambulacrarian Hox clusters. Arrows and horizontal lines represent Hox genes and chromosomal DNAs, respectively. Dashed lines indicate the presence of unconnected scaffolds. See Supplementary Fig. <a href="https://www.nature.com/articles/s42003-020-1091-1#MOESM1">13</a> for more detailed Hox cluster structures. Hox cluster structures of <em>S. kowalevskii</em><a href="https://www.nature.com/articles/s42003-020-1091-1#ref-CR9">9</a><em>, A. japonicus</em><a href="https://www.nature.com/articles/s42003-020-1091-1#ref-CR56">56</a>, <em>S. purpuratus</em><a href="https://www.nature.com/articles/s42003-020-1091-1#ref-CR7">7</a><em>, O. spiculata</em><a href="https://www.nature.com/articles/s42003-020-1091-1#ref-CR56">56</a> and <em>A. planci</em><a href="https://www.nature.com/articles/s42003-020-1091-1#ref-CR8">8</a> are according to the previous studies.</p><blockquote><p><strong>a</strong> 对5个现存纲的棘皮动物种类进行了分析。尽管海参是明显的两侧对称，但横切面（上）可以观察到五辐射对称。<strong>b</strong> 利用RBBH (reciprocal best blast hit, RBBH）鉴定的 1196 条同源蛋白序列，利用 RAxML 软件构建进化速率和系统发育树。分支上的值表示自展支持率（由于可靠性分析）。<strong>c</strong></p></blockquote><h2 id="Results"><a class="header-anchor" href="#Results"></a>Results</h2><h3 id="Genetic-changes-behind-echinoderm-evolution"><a class="header-anchor" href="#Genetic-changes-behind-echinoderm-evolution"></a>Genetic changes behind echinoderm evolution</h3><blockquote><p>棘皮动物进化背后的遗传变化</p></blockquote><p>The estimated genome sizes were 952 Mb for green sea urchin and 553 Mb for the feather star (Supplementary Fig. <a href="https://www.nature.com/articles/s42003-020-1091-1#MOESM1">1</a>), with 30,238 and 26,838 protein-coding genes, respectively (Supplementary Tables <a href="https://www.nature.com/articles/s42003-020-1091-1#MOESM1">18</a>–<a href="https://www.nature.com/articles/s42003-020-1091-1#MOESM1">20</a> and <a href="https://www.nature.com/articles/s42003-020-1091-1#MOESM1">23</a>). Basic features of these genomes such as GC content, gene length, and exon number were comparable to those of chordate and hemichordate species (Supplementary Fig. <a href="https://www.nature.com/articles/s42003-020-1091-1#MOESM1">2</a>–<a href="https://www.nature.com/articles/s42003-020-1091-1#MOESM1">7</a>). Genome-wide analysis with 1196 one-to-one orthologs (Fig. <a href="https://www.nature.com/articles/s42003-020-1091-1#Fig1">1b</a>, Supplementary Fig. <a href="https://www.nature.com/articles/s42003-020-1091-1#MOESM1">7</a>, and Supplementary Table <a href="https://www.nature.com/articles/s42003-020-1091-1#MOESM1">23</a>–<a href="https://www.nature.com/articles/s42003-020-1091-1#MOESM1">24</a>) robustly corroborated recent reports<sup><a href="https://www.nature.com/articles/s42003-020-1091-1#ref-CR4">4</a>,<a href="https://www.nature.com/articles/s42003-020-1091-1#ref-CR5">5</a></sup> that Echinodermata consists of the early diverged Crinoidea (including feather star), Asterozoa (including brittle star and sea star), and Echinozoa (including sea urchin and sea cucumber). This is consistent with paleontological evidence that suggests echinoderms first evolved with a stemmed, or imperforate extra-axial morphology<sup><a href="https://www.nature.com/articles/s42003-020-1091-1#ref-CR3">3</a></sup>. We also found that the overall protein sequences of an early diverged echinoderm species, the feather star, showed a relatively low evolutionary rate. Meanwhile, echinoderms showed only slightly diverged protein sequences from vertebrates, as opposed to an ascidian, a species with highly derived morphological features, and with significantly diverged genomic sequences from vertebrates (Supplementary Fig. <a href="https://www.nature.com/articles/s42003-020-1091-1#MOESM1">8</a> and Supplementary Tables <a href="https://www.nature.com/articles/s42003-020-1091-1#MOESM1">26</a>–<a href="https://www.nature.com/articles/s42003-020-1091-1#MOESM1">28</a>).</p><blockquote><p>估计绿海胆的基因组大小为 952 Mb 和 羽毛星大小为 553 Mb （补充 图 1），分别有 30238 和 26838 个蛋白质编码基因（补充 表 18-20 和 23）。这些基因组的 GC 含量、基因长度和外显子数等基本特征与脊索类和半脊索类相似（补充 图 2-7）。全基因组分析得到 1196 条同源序列（图 1b，补充 图 7 和 表 23-24），有力地证实了最近的报道的棘皮动物门由早期分叉出的海百合纲（包括海羽星）、海星亚门（包括海蛇尾和海星）和海胆亚门（包括海胆和海参）组成。这与古生物学的证据相一致棘皮动物首先进化出茎的或无孔轴外形态。我们还发现，棘皮动物的早期分支海羽星的整体蛋白质序列显示出相对较低的进化率。与此同时，棘皮动物的蛋白质序列与脊椎动物的差异很小，而与具有高度衍生形态特征的海鞘相反，棘皮动物的基因组序列与脊椎动物的明显不同（补充 图 8 和 补充 表 26-28）。</p></blockquote><p>Given that echinoderms evolved unique features without significant genome-wide changes detected, we tested abundance in sets of gene families that may have played critical roles in the evolution of the echinoderm features. We first tested if numbers of genes potentially involved in development (such as genes involved in cell-cell communications) have expanded in the common ancestor of echinoderms (Supplementary Fig. <a href="https://www.nature.com/articles/s42003-020-1091-1#MOESM1">10</a>). In contrast to our expectation, GO term enrichment analysis suggested that no such terms were enriched in the echinoderm-expanded gene set (Supplementary Fig. <a href="https://www.nature.com/articles/s42003-020-1091-1#MOESM1">11</a>). Rather, GO terms such as “cell communication”, or “signal transduction”, were present in echinoderm-contracted genes (Supplementary Fig. <a href="https://www.nature.com/articles/s42003-020-1091-1#MOESM1">11a</a>). Further, genes potentially involved in cytoskeletal regulation appear to have experienced extensive modifications during echinoderm evolution. For example, the “plectin repeat domain”, one of the important domains of cytolinkers that connect cytoskeletal elements with each other and to junctional complexes<sup><a href="https://www.nature.com/articles/s42003-020-1091-1#ref-CR6">6</a></sup>, was not found in any of the five echinoderm species (Supplementary Fig. <a href="https://www.nature.com/articles/s42003-020-1091-1#MOESM1">12</a>). Similarly, genes potentially involved in actin cytoskeleton regulation such as BCAR1/CAS and PIP5K were found to be positively selected during echinoderm evolution (Supplementary Table <a href="https://www.nature.com/articles/s42003-020-1091-1#MOESM1">29</a>), suggesting substantial modifications of cytoskeletal function during echinoderm evolution.</p><blockquote><p>鉴于棘皮动物进化出了独特的特征，但没有检测到重大的全基因组变化，我们测试了大量可能在棘皮动物特征的进化中发挥关键作用的基因家族。我们首先测试了在棘皮动物的共同祖先中，潜在参与发育的基因（比如参与细胞间通讯的基因）的数量是否已经增加（补充 图 10 ）。但与我们的预期相反，GO富集分析表明，在棘皮动物扩展的基因集合中没有这样的术语（term）富集（补充 图 11）。但 GO 术语（GO term）例如“细胞通讯”或“信号传导”存在于棘皮动物的收缩基因中。此外，可能参与细胞骨架调控的基因似乎在棘皮动物进化过程中经历了大量的修饰。例如，胶凝素重复结构域（plectin repeat domain）是将细胞骨架元素相互连接和连接复合体的细胞连接物的重要结构域之一，但在 5 种棘皮动物中均未发现。同样，BCAR1/CAS 和 PIP5K 等可能参与肌动蛋白细胞骨架调控的基因，在棘皮动物进化过程中发现被积极选择（补充 表 29），这表明在棘皮动物进化过程中细胞骨架功能发生了重大改变。</p></blockquote><h3 id="Hox-clusters-in-ambulacrarians"><a class="header-anchor" href="#Hox-clusters-in-ambulacrarians"></a>Hox clusters in ambulacrarians</h3><blockquote><p>步带类动物的 Hox 基因簇</p></blockquote><p>We next analyzed genes in the Hox cluster, since previous studies implied that echinoderms may have undergone extensive changes to the genomic-arrangement of these genes early in their evolution<sup><a href="https://www.nature.com/articles/s42003-020-1091-1#ref-CR7">7</a></sup>, but this is controversial<sup><a href="https://www.nature.com/articles/s42003-020-1091-1#ref-CR8">8</a></sup>. By analyzing the echinoderm genomes, together with BAC sequencing and fluorescent in situ hybridization (FISH) experiments on feather star (see Supplementary Fig. <a href="https://www.nature.com/articles/s42003-020-1091-1#MOESM1">13</a>), we found that <em>A. japonica</em> have 10 clustered Hox genes (Hox1 through Hox11/13a), together with two posterior genes (Hox11/13b and Hox11/13c) located with inverse directions more than 360 kb apart from the cluster of 10 Hox genes (Supplementary Fig. <a href="https://www.nature.com/articles/s42003-020-1091-1#MOESM1">14</a>). This situation is reminiscent of hemichordate Hox gene clusters, which consist of 12 genes with the inversion/translocation of two posterior genes<sup><a href="https://www.nature.com/articles/s42003-020-1091-1#ref-CR9">9</a></sup>. The consistent differences of Hox genes in feather star from those of hemichordates (<em>Saccoglossus kowalevskii</em> and <em>Ptychodera flava</em><sup><a href="https://www.nature.com/articles/s42003-020-1091-1#ref-CR9">9</a></sup>) were that the two posterior genes have face-to-face orientations, and two additional posterior genes (Hox11/13d and Hox11/13e) are present as reported in other echinoderm genomes<sup><a href="https://www.nature.com/articles/s42003-020-1091-1#ref-CR10">10</a></sup>. These characteristics in turn suggest that the last common ancestor of echinoderms retained a canonical arrangement of 10 Hox genes, while its posterior genes had increased in number and changed their locations. This view accordingly indicates that the changes previously noted with the Hox gene clusters of echinoderms<sup><a href="https://www.nature.com/articles/s42003-020-1091-1#ref-CR7">7</a>,<a href="https://www.nature.com/articles/s42003-020-1091-1#ref-CR8">8</a></sup>, including the loss of Hox4 or Hox6 and the inversion/translocation of anterior genes, are lineage-specific events, and therefore are unlikely to be involved in the establishment of pentameral body plan. On the other hand, the involvement of the posterior Hox genes, are important candidates in the establishment of the pentameral body plan (Fig. <a href="https://www.nature.com/articles/s42003-020-1091-1#Fig1">1c</a>).</p><blockquote><p>我们接下来分析了Hox 基因簇中的基因，因为之前的研究表明，棘皮动物在进化早期可能经历了大量的基因组排变化，但这是有争议的。通过分析棘皮动物基因组，结合海羽星 BAC 测序和荧光原位杂交（FISH）实验（见补充 图 13），我们发现 <em>A. japonica</em>  有 10 个 Hox 基因簇（Hox1 到 Hox11/13a），以及 2 个在后部的基因（Hox11/13b 和 Hox11/13c），距 10 个 Hox 基因簇的反向位置超过 360 kb（补充图 14）。这种情况让人想起了半索动物的 Hox 基因簇，该基因簇由 12 个基因组成，其中 2 个后部的基因倒位/易位。海羽星与半索动物（<em>Saccoglossus kowalevskii</em> 和 <em>Ptychodera flava</em>）的 Hox 基因的 2 个后部的基因都有相对的方向这个一致差异，另外 2 个后部的基因（Hox11/13d 和 Hox11/13e）在其他棘皮动物基因组中也有报道。 这些特征表明，棘皮动物的最后一个共同祖先保留了 10 个 Hox 基因簇的典型排列，而其后部的基因数量增加并改变了它们的位置。这个观点因此表明之前发现的棘皮动物 Hox 基因簇的变化，包括 Hox4 、Hox6 和前基因的倒位/易位，是特殊的世系事件，因此不太可能参与建立体平面五辐射对称。另一方面，后部的 Hox 基因的参与是建立体平面五辐射对称的重要候选基因（图 1c）。</p></blockquote><h3 id="Echinoderm-embryogenesis-show-hourglass-like-conservation"><a class="header-anchor" href="#Echinoderm-embryogenesis-show-hourglass-like-conservation"></a>Echinoderm embryogenesis show hourglass-like conservation</h3><blockquote><p>棘皮动物胚胎发生呈沙漏状保守</p></blockquote><p>We next tested if evolution of echinoderm embryogenesis follows the developmental hourglass model<sup><a href="https://www.nature.com/articles/s42003-020-1091-1#ref-CR11">11</a></sup> as supported in several animal groups<sup><a href="https://www.nature.com/articles/s42003-020-1091-1#ref-CR12">12</a>,<a href="https://www.nature.com/articles/s42003-020-1091-1#ref-CR13">13</a>,<a href="https://www.nature.com/articles/s42003-020-1091-1#ref-CR14">14</a>,<a href="https://www.nature.com/articles/s42003-020-1091-1#ref-CR15">15</a>,<a href="https://www.nature.com/articles/s42003-020-1091-1#ref-CR16">16</a></sup>. The phylotype hypothesis of the hourglass model predicts that anatomical features of most conserved-embryonic phase represent the body plan of their animal phylum<sup><a href="https://www.nature.com/articles/s42003-020-1091-1#ref-CR11">11</a>,<a href="https://www.nature.com/articles/s42003-020-1091-1#ref-CR17">17</a>,<a href="https://www.nature.com/articles/s42003-020-1091-1#ref-CR18">18</a></sup>. We tested if the developmental stages most critical for the pentameral body plan show the highest transcriptomic conservation. Recent studies reported that the transcriptomic conservation is instead around blastula to gastrula in sea urchins<sup><a href="https://www.nature.com/articles/s42003-020-1091-1#ref-CR19">19</a>,<a href="https://www.nature.com/articles/s42003-020-1091-1#ref-CR20">20</a></sup>, however, these studies only examined embryonic sea urchins. We thus analyzed gene expression profiles by covering early-to-late embryos of four diverse echinoderm species, including the publicly available data of purple sea urchins<sup><a href="https://www.nature.com/articles/s42003-020-1091-1#ref-CR21">21</a>,<a href="https://www.nature.com/articles/s42003-020-1091-1#ref-CR22">22</a></sup> and a sea cucumber<sup><a href="https://www.nature.com/articles/s42003-020-1091-1#ref-CR23">23</a></sup> (Supplementary Figs. <a href="https://www.nature.com/articles/s42003-020-1091-1#MOESM1">15</a> and <a href="https://www.nature.com/articles/s42003-020-1091-1#MOESM1">16</a>). Unexpectedly, while the hourglass-like conservation was observed, the most conserved phase was not bracketing the pentameral establishing stages (defined as stages when first pentameral symmetric structures appear), but it was instead during gastrulation (Fig. <a href="https://www.nature.com/articles/s42003-020-1091-1#Fig2">2a</a> and Supplementary Figs. <a href="https://www.nature.com/articles/s42003-020-1091-1#MOESM1">17–18</a>). This mismatch between the most conserved phase and the phase for establishing the body plan was also supported by pair-wise comparisons of one-to-one orthologs (Supplementary Fig. <a href="https://www.nature.com/articles/s42003-020-1091-1#MOESM1">19</a>). These results suggested that, unlike in other animal groups such as vertebrates, the phase for establishing the body plan in echinoderms has experienced substantial diversification during their evolution, further implying that the phylotype hypothesis may not fit within echinoderm embryogenesis. However, a potential caveat of this conclusion would be that the conservation signals from adult rudiments could have been obscured by larval tissues, as adult rudiments share only a small proportion of embryo in early metamorphic stages. Similar analyses with dissected adult rudiment, or single-cell RNAseq technology could clarify this point. While possible contribution of pleiotropic constraints were supported between the closely related species as reported previously<sup><a href="https://www.nature.com/articles/s42003-020-1091-1#ref-CR24">24</a>,<a href="https://www.nature.com/articles/s42003-020-1091-1#ref-CR25">25</a></sup> (Supplementary Figs. <a href="https://www.nature.com/articles/s42003-020-1091-1#MOESM1">20</a> and <a href="https://www.nature.com/articles/s42003-020-1091-1#MOESM1">21</a>), further studies are needed to clarify the evolutionary mechanism behind the unique evolution of echinoderm embryos.</p><blockquote><p>接下来，我们测试了棘皮动物胚胎发生的进化是否遵循已被几个动物群体支持的发育沙漏模型。沙漏模型预测动物体平面特征在解剖学中最保守胚胎期的表现出来。我们测试了对体平面五辐射对称最关键的发育阶段是否表现出最高的转录组保守。</p><p>我们测试了对体平面五辐射对称最关键的发育阶段是否表现出最高的转录组保护。最近的研究报道了海胆转录组保护是围绕囊胚到原肠胚，然而，这些研究只检测了胚胎海胆。</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/halo-blog/cdn-blog-img-c@master/%E8%83%9A%E8%83%8E%E6%B2%99%E6%BC%8F.png" alt="胚胎沙漏"></p><blockquote><p>图引自 The developmental hourglass model: a predictor of the basic body plan? doi：10.1242/dev.107318</p></blockquote><p>接下来，我们测试了棘皮动物胚胎发生的进化是否遵循几个动物群体支持的发育沙漏模型。沙漏模型的系统类型假设预测了最保守的胚胎期的解剖特征代表了动物门的体平面。我们测试了对五环体计划最关键的发育阶段是否表现出最高的转录组保护。最近的研究报道了海胆转录组保护是围绕囊胚到原肠胚，然而，这些研究只检测了胚胎海胆。为此，我们对4种棘皮动物的早期至晚期胚胎进行了基因表达谱分析，其中包括已公开的紫海胆和海参(附图15和16)。出乎意料的是，虽然观察到沙漏样保守，但最保守的阶段并不是五边形建立阶段(定义为第一个五边形对称结构出现的阶段)，而是在原肠形成期间(图2a和补充图17 18)。这种最保守的相位和建立体平面的相位之间的不匹配也被一对一的正交法的成对比较所支持(补充图19)。这些结果表明，与脊椎动物等其他动物不同，棘皮动物的体平面建立阶段在进化过程中经历了大量的多样化，进一步表明系统型假说可能不适用于棘皮动物胚胎发生。然而，这一结论的一个潜在警告是，来自成体萌芽的保护信号可能被幼虫组织所掩盖，因为成体萌芽只与早期变质阶段的胚胎共享一小部分。用解剖的成体雏形或单细胞RNAseq技术进行类似的分析可以阐明这一点。虽然先前报道的近亲缘物种之间可能存在多向性限制(补充图20和21)，但需要进一步研究来阐明棘皮动物胚胎独特进化背后的进化机制。</p><h3 id="Partial-co-option-in-pentameral-body-plan-establishment"><a class="header-anchor" href="#Partial-co-option-in-pentameral-body-plan-establishment"></a>Partial co-option in pentameral body plan establishment</h3><blockquote><p>局部选配在体平面五辐射对称的建立</p></blockquote><p>Paleontological studies suggested the possible evolution of pentameral body axes through changes in the mechanisms of bilateral symmetry<sup><a href="https://www.nature.com/articles/s42003-020-1091-1#ref-CR26">26</a></sup> (Fig. <a href="https://www.nature.com/articles/s42003-020-1091-1#Fig2">2b</a>). However, developmental genes that control the pentameral symmetry remains largely unknown. We thus focused on genes that are involved in Left/Right-patterning and other axis-forming in bilaterians<sup><a href="https://www.nature.com/articles/s42003-020-1091-1#ref-CR27">27</a>,<a href="https://www.nature.com/articles/s42003-020-1091-1#ref-CR28">28</a>,<a href="https://www.nature.com/articles/s42003-020-1091-1#ref-CR29">29</a>,<a href="https://www.nature.com/articles/s42003-020-1091-1#ref-CR30">30</a>,<a href="https://www.nature.com/articles/s42003-020-1091-1#ref-CR31">31</a></sup> and examined expression patterns of their homologs in the feather star, particularly at the attachment and cystidean stages when the pentameral body plan forms (Supplementary Figs. <a href="https://www.nature.com/articles/s42003-020-1091-1#MOESM1">22</a> and <a href="https://www.nature.com/articles/s42003-020-1091-1#MOESM1">23</a>). Among the genes examined, <em>pitx</em> exhibited relatively strong expression in the calyx, where the pentameral structure first becomes evident (Fig. <a href="https://www.nature.com/articles/s42003-020-1091-1#Fig2">2c–d</a>,). Weak expression of <em>chordin</em> was also detected in the calyx (Supplementary Fig. <a href="https://www.nature.com/articles/s42003-020-1091-1#MOESM1">23</a>). Meanwhile, expression of <em>bmp2/4</em>, <em>nodal</em>, <em>lefty</em> and <em>not</em> were detected most during gastrula to doliolaria stages (Supplementary Fig. <a href="https://www.nature.com/articles/s42003-020-1091-1#MOESM1">22</a>), but not in the calyx (Supplementary Fig. <a href="https://www.nature.com/articles/s42003-020-1091-1#MOESM1">23</a>), implying that these genes are possibly involved in the body patterning during bilateral planktonic development rather than pentameral body plan development. These results suggest that evolution of the pentameral body plan may have associated partial co-option of genes involved in existing body axes, which in part, coincides with paleontological predictions that modification of bilateral patterning system contributed to the pentameral body plan establishment<sup><a href="https://www.nature.com/articles/s42003-020-1091-1#ref-CR26">26</a></sup>.</p><blockquote><p>古生物学研究表明，五辐射对称可能是通过两侧对称机制的改变而进化的。</p></blockquote><h3 id="Proteome-analyses-of-echinoderm-skeleton"><a class="header-anchor" href="#Proteome-analyses-of-echinoderm-skeleton"></a>Proteome analyses of echinoderm skeleton</h3><p>Mineralized endoskeleton is another notable feature of echinoderms. Despite the widely conserved endoskeleton structures in echinoderms, some of the proteins first identified in sea urchin biomineralization, such as MSP130, have not been identified in the skeleton of other echinoderm species. The MSP130 gene was suggested to have originated in prokaryotes and was introduced into metazoan genomes, including echinoderms, by horizontal gene transfer<sup><a href="https://www.nature.com/articles/s42003-020-1091-1#ref-CR32">32</a></sup>. An MSP130-like gene involved in biomineralization has also been identified in a polychaete<sup><a href="https://www.nature.com/articles/s42003-020-1091-1#ref-CR33">33</a></sup>. The authors suggest that the MSP130 gene was present in the common ancestor to bilaterians, rather than being introduced into protostomes and deuterostomes in separate lateral transfer events. The MSP130 protein was then co-opted into skeleton formation at some point in echinoderm evolution. The gene was duplicated in sea urchins and the resulting paralogues acquired repetitive regions<sup><a href="https://www.nature.com/articles/s42003-020-1091-1#ref-CR32">32</a></sup>. The MSP130 gene is present in other echinoderm genomes, but is not utilized in the proteome of brittle stars<sup><a href="https://www.nature.com/articles/s42003-020-1091-1#ref-CR34">34</a>,<a href="https://www.nature.com/articles/s42003-020-1091-1#ref-CR35">35</a></sup> or sea stars<sup><a href="https://www.nature.com/articles/s42003-020-1091-1#ref-CR36">36</a></sup>. Here, we performed a proteome analysis and identified 280 proteins that are included within the mineral of the adult feather star skeleton (see “Methods”). These skeletal proteins included a protein similar to the urchin MSP130 proteins, suggesting that the ancestral echinoderm had co-opted this single protein into biomineralization (Supplementary Fig. <a href="https://www.nature.com/articles/s42003-020-1091-1#MOESM1">24</a>). A number of other genes encoding skeletal proteins and domains conserved between the purple sea urchin (<em>S. purpuratus</em>) and the feather star were also identified (Fig. <a href="https://www.nature.com/articles/s42003-020-1091-1#Fig3">3</a>). Among these, we found two proteins with C-type lectin domains, which are also found on the urchin spicule matrix proteins. C-type lectin proteins are absent in sea star skeletons<sup><a href="https://www.nature.com/articles/s42003-020-1091-1#ref-CR36">36</a></sup>, and present in only a few copies in brittle star skeletons<sup><a href="https://www.nature.com/articles/s42003-020-1091-1#ref-CR34">34</a>,<a href="https://www.nature.com/articles/s42003-020-1091-1#ref-CR35">35</a></sup>. Sea urchin skeletons utilize a large number of C-type lectins, mostly with repetitive stretches of acidic amino acids<sup><a href="https://www.nature.com/articles/s42003-020-1091-1#ref-CR37">37</a></sup>, while the feather star and brittle star proteins lack these repetitive domains (Supplementary Fig. <a href="https://www.nature.com/articles/s42003-020-1091-1#MOESM1">25</a>). A possible evolutionary scenario to explain these differences is that the ancestral skeletal C-type lectin genes experienced extensive duplication and acquisition of repetitive domains in the sea urchin lineage. The use of C-type lectins in the sea star skeleton was lost, while the C-type lectins in the feather star and brittle star skeletal proteomes remain largely unchanged. Together, these results suggest that the precursors to all of the genes and domains used in echinoderm skeleton were already present in the common ancestor to echinoderms, which emerged 589.7 Mya (Supplementary Fig. <a href="https://www.nature.com/articles/s42003-020-1091-1#MOESM1">7</a>). Additionally, these skeleton-related genes may have undergone frequent duplication and loss in specific lineages, together with frequent changes in gene expression, since expression of MSP130-like genes and C-type lectin genes in the skeleton forming cells were lost in some lineages, even though these genes exist in their genomes. In summary, our study highlights the genomic, transcriptomic and proteomic changes behind the evolution of unique features in echinoderms, and offers an exceptional case in understanding the general tendency for the evolution of body plans.</p><h2 id="Methods"><a class="header-anchor" href="#Methods"></a>Methods</h2><h3 id="Animal-care-and-use"><a class="header-anchor" href="#Animal-care-and-use"></a>Animal care and use</h3><p>Animal care and experimental procedures and were conducted in strict accordance with guidelines approved by the Animal Experiments Committee of University of Tokyo (approval ID: 14–03, 16–2). All efforts were made to minimize suffering. Individual animals and embryos were selected blindly from wild types.</p><h3 id="DNA-extraction-library-construction-and-genome-sequencing"><a class="header-anchor" href="#DNA-extraction-library-construction-and-genome-sequencing"></a>DNA extraction, library construction, and genome sequencing</h3><p><em>Lytechinus variegatus</em>: Genomic DNA was extracted from sperms from a single male. We first constructed five different short-insert libraries (394, 424, 479, 496, and 522 bp. See also Supplementary Table <a href="https://www.nature.com/articles/s42003-020-1091-1#MOESM1">1</a>) from the genomic DNA samples and sequenced them using the Illumina HiSeq 4000 system to survey the genome complexity. After obtaining the genome size, we further constructed four mate-pair libraries (2–18 Kb. See also Supplementary Table <a href="https://www.nature.com/articles/s42003-020-1091-1#MOESM1">1</a>) from the same DNA sample, and sequenced them for further assembly. The DNA and genome we obtained in this project is independent from those available through EchinoBase (<em>Lytechinus variegatus</em> genome v.2.2).</p><p><em>Anneissia japonica</em>: After collecting adult feather stars in the cove of Koajiro, Sagami Bay (Misaki, Japan) by scuba diving, sperms from a single male was collected during the breeding season when the gonads were ripe with mature gametes. Sperms were embedded in ~0.5% low-melting agarose plugs (SeaPlaque GTG Agarose, Lonza), and in-gel digestion of proteins was performed by immersing the plugs in digestion buffer (10 mM Tris-Cl pH 7.5, 50 mM NaCl, 10 mM EDTA, 0.5% SDS, 200 mg/mL Proteinase K) at 55 °C, overnight. The gel-plugs were washed repeatedly with TE buffer and stored in TE at 4 °C until use. DNA was released from the gel-plugs using GELase (Epicenter). The DNA was further purified using QIAGEN Genomic-tip 20/G (QIAGEN) and dissolved in TE. Five different short-insert libraries (277, 324, 381, 450, and 477 bp) were constructed and sequenced with Illumina HiSeq 4000 system to survey the genome complexity. After obtaining the genome size, we further constructed six mate-pair libraries (2–18 Kb) and sequenced them for further assembly (Supplementary Table <a href="https://www.nature.com/articles/s42003-020-1091-1#MOESM1">1</a>).</p><h3 id="K-mer-based-estimation-of-genome-sizes"><a class="header-anchor" href="#K-mer-based-estimation-of-genome-sizes"></a>K-mer-based estimation of genome sizes</h3><p>We first compared the performances in genome size estimation by K-mer frequency method and GenomeScope. The genome size of green sea urchin estimated by GenomeScope was about 650 Mbp, while that of kmerfreq method was about 952 Mbp. Considering that the genome size estimated by kmerfreq was closer to the genome size estimated from <em>C</em>-value (0.92, <a href="http://www.genomesize.com/">www.genomesize.com</a>) than GenomeScope, we decided to apply kmerfreq method for the genome size estimation. Following formula was used for estimating genome size: <em>Genome</em> size (bp) = K-mer number/<em>average</em> depth <em>of K-mer</em>. Based on the rate of occurrence of K-mers in each genome, the read depths for feather star and green sea urchin were estimated as 147 and 124, respectively, leading to genome size estimations of approximately 553 Mb for feather star and 952 Mb for green sea urchin (Supplementary Fig. <a href="https://www.nature.com/articles/s42003-020-1091-1#MOESM1">1</a>).</p><h3 id="Raw-read-filtering-and-error-correction-of-short-read-libraries"><a class="header-anchor" href="#Raw-read-filtering-and-error-correction-of-short-read-libraries"></a>Raw read filtering and error correction of short-read libraries</h3><p>HiSeq raw reads with the following features were regarded as low-quality reads and were filtered out: [1] Reads containing &gt;10 bp adapter sequences; [2] Reads in the small insert libraries (refer to Supplementary Tables <a href="https://www.nature.com/articles/s42003-020-1091-1#MOESM1">1</a> and <a href="https://www.nature.com/articles/s42003-020-1091-1#MOESM1">2</a>) having &gt;10 bp overlap; [3] Reads having <em>N</em>’s &gt;10% of their length; [4] PCR duplicates (paired-end reads completely identical); [5] Reads containing &gt;40 bp low-quality (phred quality score ≤ 5) bases. After the filtering process, we further corrected the qualified K-mers. In brief, K-mers with sequencing errors are usually low in frequency, and we thus corrected these K-mer sequences by refering to high-frequent reads. If the erroneous sites could not be corrected, the low-frequency K-mers from the reads were trimmed. No error correction was made for the long-insert libraries (refer to Supplementary Tables <a href="https://www.nature.com/articles/s42003-020-1091-1#MOESM1">1</a> and <a href="https://www.nature.com/articles/s42003-020-1091-1#MOESM1">2</a>), as these were only used for scaffolding. The SOAPec_bin_v2.03 software was used to correct the error within reads. Command line: SOAPec_bin_v2.03/bin/KmerFreq_AR -q 33 -b 100000000000 -k 17 -p output reads_files_list; SOAPec_bin_v2.03/bin/Corrector_AR -Q 33 -k 17 <a href="http://output.freq.cz">output.freq.cz</a> output.freq.cz.len reads_files_list.</p><h3 id="Gene-set-and-genomes-obtained-from-public-database"><a class="header-anchor" href="#Gene-set-and-genomes-obtained-from-public-database"></a>Gene set and genomes obtained from public database</h3><p>Refer to Supplementary Table <a href="https://www.nature.com/articles/s42003-020-1091-1#MOESM1">24</a> for the publicly available gene set and genomes used in this project.</p><h3 id="Genome-assembly"><a class="header-anchor" href="#Genome-assembly"></a>Genome assembly</h3><p>Genome sequences with the filtered and/or corrected data were assembled by Platanus software. The assembly was carried out using the following steps: (a) Contig construction: Reads from short-insert (&lt;1 Kb) libraries were split into K-mers and used to construct a de Bruijn graph. Short branches caused by errors were removed by “tip removal” step and short repeats were resolved by K-mer extension. Bubble structures caused by heterozygosity or errors were removed. At last, subgraphs without any junctions represent the contigs. (b) Scaffold construction: All the filtered clean reads were re-aligned onto the contig sequences, and the scaffolds were constructed by weighting the consistent rate and paired-end reads relationships on the contigs. Heterozygous regions were removed as bubble or branch structures on the graph by the “bubble removal” or “branch cut” step. These simplification steps are characteristic of Platanus and especially effective for assembling complex heterozygous regions. © Gap filling: Paired-end reads have one end mapped on the contig with the other end located in the gap region were used to fill the gaps in the genome assembly by GapCloser1.10 software. Then the very short assembly sequences (contig shorter than 500 bp) were removed in the genome assembly. The detailed command lines of the Platanus assembly were shown as below: Feather star: platanus assemble -o contig.fa -f short_clean_reads.fq -k 69 -u 0.2 -m 200; platanus scaffold -c contig.fa -b contigBubble.fa -o scaffold.fa -IP R1.fq R2.fq -OP R1.fq R2.fq -u 0.2. Green sea urchin: platanus assemble -o contig.fa -f short_clean_reads.fq -k 29 -u 0.3 -m 200; platanus scaffold -c contig.fa -b contigBubble.fa -o scaffold.fa -IP R1.fq R2.fq -OP R1.fq R2.fq -u 0.3. Results by K-mer analysis Supplementary Fig. <a href="https://www.nature.com/articles/s42003-020-1091-1#MOESM1">1</a>, and statististics of feather star and green sea urchin genomes are shown in Supplementary Tables <a href="https://www.nature.com/articles/s42003-020-1091-1#MOESM1">3</a> and <a href="https://www.nature.com/articles/s42003-020-1091-1#MOESM1">4</a>.</p><h3 id="Assessment-of-assembled-genomes"><a class="header-anchor" href="#Assessment-of-assembled-genomes"></a>Assessment of assembled genomes</h3><p>The completeness of the feather star and green sea urchin assemblies was assessed by the BUSCO program (version 2.0), using the eukaryotic and metazoan libraries (Supplementary Tables <a href="https://www.nature.com/articles/s42003-020-1091-1#MOESM1">6–8</a>). Reads from the short-inserts libraries were also mapped to these assembled genomes by BWA and SAMtools software (bwa index -a bwtsw genome.fa; bwa aln -t 6 genome.fa reads.fq; samtools view -b -S out.sam &gt; out.bam; samtools flagstat out.bam) to assess the genomic quality (Supplementary Table <a href="https://www.nature.com/articles/s42003-020-1091-1#MOESM1">9</a>). In addition, coverage ratio of de novo assembled transcripts obtained by Trinity &lt;ver. 2.2.0 &gt; (perl Trinity --JM 200 G --seqType fq --left reads_R1.fq --right reads_R2.fq --SS_lib_type FR -output out) and TGICL software (tgicl -F transcripts.fasta) over the sequenced genomes using BLAT software (blat genome.fa transcript.fa -t = dna -q = rna out.psl) (Supplementary Tables <a href="https://www.nature.com/articles/s42003-020-1091-1#MOESM1">10–13</a>. De novo assembled the transcripts (made by the RNAseq data we obtained for each species) were also aligned to the fileterd genome and confirmed that 98.64% transcripts in feather star and 99.53% transcripts in green sea urchin were aligned.</p><h3 id="GC-content-of-genome"><a class="header-anchor" href="#GC-content-of-genome"></a>GC content of genome</h3><p>GC content of the feather star and green sea urchin genomes were estimated using a sliding window approach. Briefly, a 500 bp sliding window (250 bp stepwise) was employed to scan along the genome and calculate the GC content, and found that the average GC content of feather star and green sea urchin is about 33.22% and 33.71%, respectively. Both of these values were found to be similar with those of hemichordate and most chordate species except lamprey (Supplementary Fig. <a href="https://www.nature.com/articles/s42003-020-1091-1#MOESM1">2</a>).</p><h3 id="Repeat-annotation"><a class="header-anchor" href="#Repeat-annotation"></a>Repeat annotation</h3><p>Tandem repeats in the genomes were identified using Tandem Repeat Finder<a href="https://www.nature.com/articles/s42003-020-1091-1#ref-CR38">38</a> (v4.04 <a href="http://tandem.bu.edu/trf/trf.html">http://tandem.bu.edu/trf/trf.html</a>) with default parameters (trf sequence.txt 2 7 7 80 10 50 2000 -d -h, these number means: Match, Mismatch, Delta, PM, PI, Minscore, and MaxPeriod), and non-interspersed repeats in the genome using RepeatMasker<a href="https://www.nature.com/articles/s42003-020-1091-1#ref-CR38">38</a> (open-4–0–5) with default parameters (-nolow (Not mask low_complexity DNA or simple repeats) -no_is (Skips bacterial insertion element check) -norna (Does not mask small RNA (pseudo) genes) -parallel 1 (The number of processors to use in parallel)). Transposable elements (TEs) were identified on both the DNA and protein levels. On the DNA level, RepeatModeler (v1.0.4) and RepeatScout<a href="https://www.nature.com/articles/s42003-020-1091-1#ref-CR39">39</a> (version 1.0.5) was used to build repeat libraries. In feather star, LTR_FINDER<a href="https://www.nature.com/articles/s42003-020-1091-1#ref-CR40">40</a> (v1.0.5) software were additionally used to build de novo repeat libraries. RepeatMasker was performed on both de novo libraries and repbase (RepBase16.02) separately to identify homologous repeats with default parameters with format set with 2 (-w 2-table). On the protein level, RM-BLASTX within RepeatProteinMask was used to query the TE protein database with -noLowSimple and <em>P</em>-value 0.0001 (Supplementary Fig. <a href="https://www.nature.com/articles/s42003-020-1091-1#MOESM1">3</a> and Supplementary Tables <a href="https://www.nature.com/articles/s42003-020-1091-1#MOESM1">14</a>–<a href="https://www.nature.com/articles/s42003-020-1091-1#MOESM1">17</a>).</p><h3 id="Prediction-of-protein-coding-genes"><a class="header-anchor" href="#Prediction-of-protein-coding-genes"></a>Prediction of protein-coding genes</h3><p>Prediction of protein-coding genes was based on integration of three different methods, namely, ab initio prediction, homology-based annotation and RNAseq-based annotation. For ab initio prediction, Augustus<a href="https://www.nature.com/articles/s42003-020-1091-1#ref-CR41">41</a> (v2.5.5, --uniqueGeneId=true [output gene identifyers] --noInFrameStop=true [Do not report transcripts with in-frame stop codons] --gff3=on [output in gff3 format] —strand=both [–strand=forward and --strand=backward]) and GENSCAN<a href="https://www.nature.com/articles/s42003-020-1091-1#ref-CR42">42</a>,<a href="https://www.nature.com/articles/s42003-020-1091-1#ref-CR43">43</a> (v1.0, -mini_cds 150 -cds_ns 10) software were used to predict genes. In feather star, SNAP<a href="https://www.nature.com/articles/s42003-020-1091-1#ref-CR44">44</a> (using ** species for gene prediction) and GlimmerHMM<a href="https://www.nature.com/articles/s42003-020-1091-1#ref-CR45">45</a> (v3.02, using ** species for gene prediction, and -f [Do not make partial gene predictions] -g [Print output in gff format]) softwares were also used in this analysis. These four software programs were trained by using lamprey, human, ciona, and zebrafish, respectively. Short genes (CDS length &lt; 150 bp) and low-quality genes (gaps covered more than 10% of the coding region) were discarded. Proteins from human (Ensembl:GRCh38), mouse (Ensembl: GRCm38), chicken (Ensembl: Gallus_gallus-5.0), green anole lizard (Ensembl: AnoCar2.0), Xenopus tropicalis (Ensembl: JGI_4.2), zebrafish (Ensembl: GRCz10), sea lamprey (Ensembl: Pmarinus_7.0), lancelet (LanceletDB: v18h27.r3_ref), <em>Ciona instestinalis</em> (NCBI: GCA_000224145.1), acorn worm (NCBI: GCF_000003605.2) and purple sea urchin (NCBI: GCF_000002235.4) were used in the homology-based annotation using tblastn with <em>e</em>-value 1e-5. Blast hits that correspond to reference proteins were concatenated by Solar software and low-quality records were filtered out. Sequence of each reference protein was extended to upstream and downstream by 2 Kb to represent the protein-coding region with default parameters. GeneWise software was used to predict gene structure contained in each protein-coding region. For each gene locus, the longest coding region and/or highest genewise score was retained. In RNAseq-based method, the coding sequences defined by transcripts was aligned against the genome by BLAT<a href="https://www.nature.com/articles/s42003-020-1091-1#ref-CR46">46</a> (v34, identity &gt; 90%, coverage &gt; 90%), thereby defining the splicing orientation of coding region. Then, PASA software was used to link the spliced alignments with default parameters. The EvidenceModeler<a href="https://www.nature.com/articles/s42003-020-1091-1#ref-CR47">47</a> (EVM, ver. 1.1) software was further used to integrate data derived from the three methods into an EVM-derived gene set with default parameters, the weight of de novo, homolog and complementary DNA (cDNA) are 1, 5, and 10. Finally, 26,838 and 30,238 protein-coding gene models were annotated in feather star and green sea urchin genome, respectively (Supplementary Table <a href="https://www.nature.com/articles/s42003-020-1091-1#MOESM1">18</a>).</p><h3 id="Annotation-of-gene-function-non-protein-coding-genes"><a class="header-anchor" href="#Annotation-of-gene-function-non-protein-coding-genes"></a>Annotation of gene function, non-protein-coding genes</h3><p>InterProScan (v4.8) was used to screen these genes’ protein sequences against five databases (including: Pfam, release 27.0, prints, release 42.0, prosite, release 20.97, ProDom, 2006.1, and smart, release 6.2) to determine the InterPro and GO number of those predicted protein-coding genes. In addition, KEGG, COG, NR, Uniprot/SwissProt, and UniProt/TrEMBL databases were searched for homology-based functions (Supplementary Tables <a href="https://www.nature.com/articles/s42003-020-1091-1#MOESM1">19</a> and <a href="https://www.nature.com/articles/s42003-020-1091-1#MOESM1">20</a>) using blastp (v2.2.26) with <em>e</em>-value (1e-5). For non-coding genes, tRNAscan-SE 53 (v1.3) software for eukaryotes was used for tRNA annotation in the genomic assembly with default parameters. Ribosomal RNA (rRNA) annotation was based on homology information of invertebrate rRNA collections using BLASTN (v2.2.26) with <em>e</em>-value set as 1e-5. The small nuclear RNA (snRNA) and microRNA (miRNA) were predicted by INFERNAL software (v0.81) against the Rfam database (Release 9.1) with default parameters. The statistical results are shown in Supplementary Tables <a href="https://www.nature.com/articles/s42003-020-1091-1#MOESM1">21</a> and <a href="https://www.nature.com/articles/s42003-020-1091-1#MOESM1">22</a>.</p><p>Potential functions of protein-coding genes were predicted using InterProScan<a href="https://www.nature.com/articles/s42003-020-1091-1#ref-CR48">48</a> (v4.5), against five databases (Pfam, release 27.0, PRINTS, release 42.0, PROSITE, release 20.97, ProDom, 2006.1, and SMART, release 6.2). In addition, KEGG, COG, NR, Uniprot/SwissProt and UniProt/TrEMBL databases were searched for homology-based functions (Supplementary Tables <a href="https://www.nature.com/articles/s42003-020-1091-1#MOESM1">19</a> and <a href="https://www.nature.com/articles/s42003-020-1091-1#MOESM1">20</a>). For non-coding genes, the tRNAscan-SE<a href="https://www.nature.com/articles/s42003-020-1091-1#ref-CR49">49</a> (v1.3) software for eukaryote was used for tRNA annotation in the genomic assembly. rRNA annotation was based on homology information of invertebrate rRNA collections using BLASTN (v2.2.26) with <em>e</em>-value (1e-5). The snRNA and miRNA were predicted by INFERNAL software (v0.81) against the Rfam database (Release 9.1). The statistical results are shown in Supplementary Tables <a href="https://www.nature.com/articles/s42003-020-1091-1#MOESM1">21</a> and <a href="https://www.nature.com/articles/s42003-020-1091-1#MOESM1">22</a>.</p><h3 id="Gene-family-analysis"><a class="header-anchor" href="#Gene-family-analysis"></a>Gene family analysis</h3><p><em>orthoMCL</em>: orthoMCL<a href="https://www.nature.com/articles/s42003-020-1091-1#ref-CR50">50</a> was used to find ortholog genes and/or gene families (ortholog groups) among different species. Amphioxus (<em>Branchiostoma floridae</em>), zebrafish (<em>Danio rerio</em>), ciona (<em>Ciona intestinalis</em>), Drosophila (<em>Drosophila melanogaster</em>), chicken (<em>Gallus gallus</em>), acorn worm (<em>Saccoglossus kowalevskii</em>), green sea urchin (<em>Lytechinus variegatus</em> [Lv]), purple sea urchin (<em>Strongylocentrotus purpuratus</em> [Sp]), medaka (<em>Oryzias latipes</em>), mouse (<em>Mus musculus</em>), brittle star (<em>Ophiothrix spiculata</em>), feather star (<em>Anneissia japonica</em> [Anj]), lamprey (<em>Petromyzon marinus</em>), sea cucumber (<em>Apostichopus japonicus</em> [Apj]), sea star (<em>Acanthaster planci</em>), frog (<em>Xenopus laevis</em>), turtle (<em>Pelodiscus sinensis</em>) gene set were prepared and used here. Gene families and ortholog genes identified by this OrthoMCL is shown in Supplementary Figs. <a href="https://www.nature.com/articles/s42003-020-1091-1#MOESM1">5</a> and <a href="https://www.nature.com/articles/s42003-020-1091-1#MOESM1">6</a>. For ortholog groups identified among echinoderms were 15618 for Lv-Sp-Apj-Anj, 14758 for Lv-Apj-Anj, 15035 for Lv-Sp-Apj, 14231 for Lv-Sp and 13649 for Lv-Anj.</p><p><em>Reciprocal best blast hit (RBBH), 1:1 orthologs</em>: We also analyzed the ortholog genes by RBBH method. We first selected feather star as the reference species, and aligned the protein sequences in all other 16 species to feather star gene set and vice versa by blast. Second, the aligned results were filtered by <em>e</em>-value (1e-5) and retained only the reciprocal best blast hit for each gene-gene pairs. Third, orthologous gene pairs in all of the 16 species were extracted. Finally, we identified 1196 ortholog genes among these 17 species.</p><h3 id="Phylogenetic-tree-construction-and-divergence-time"><a class="header-anchor" href="#Phylogenetic-tree-construction-and-divergence-time"></a>Phylogenetic tree construction and divergence time</h3><p><em>Molecular phylogenetic analysis</em>: 1196 RBBH ortholog genes (1,447,456 aa) in each species were combined into a super-gene in the same gene order, followed by phylogenetic analysis using RaxML<a href="https://www.nature.com/articles/s42003-020-1091-1#ref-CR51">51</a> (with PROTGAMMAAUTO model, <em>Drosophila melanogaster</em> was used as the outgroup species) through these super-genes (Fig. <a href="https://www.nature.com/articles/s42003-020-1091-1#Fig1">1b</a> and Supplementary Table <a href="https://www.nature.com/articles/s42003-020-1091-1#MOESM1">25</a>). Both of the reconstructed phylogenetic trees robustly showed three clusters, including echinoderms, acorm worm, and chordates. Among them, feather star was the earliest diverging species in echinoderms, brittle star and sea star form one branch, sea urchin and sea cucumber form another branch.</p><p><em>Divergence time estimation</em>: To estimate the divergence time, the super-genes prepared above were analyzed by MCMCtree software, together with several calibration points downloaded from TimeTree website (<a href="http://www.timetree.orgs/">http://www.timetree.orgs</a>) (Supplementary Fig. <a href="https://www.nature.com/articles/s42003-020-1091-1#MOESM1">7</a>).</p><h3 id="Relative-evolutionary-rates-of-species"><a class="header-anchor" href="#Relative-evolutionary-rates-of-species"></a>Relative evolutionary rates of species</h3><p>To determine the relatively evolutionary rates of echinoderm species, the super-genes, which we produced from 1196 RBBH orthologs were used. LINTRE software and RRT (Tajima’s relative rate test) analysis were employed, and <em>Drosophila</em> was used as an outgroup to determine the root of the whole tree (Supplementary Fig. <a href="https://www.nature.com/articles/s42003-020-1091-1#MOESM1">8</a> and Supplementary Tables <a href="https://www.nature.com/articles/s42003-020-1091-1#MOESM1">26</a>–<a href="https://www.nature.com/articles/s42003-020-1091-1#MOESM1">28</a>. In addition to the LINTRE analysis, R-package “APE” was also used to deduce robust conclusion (Supplementary Fig. <a href="https://www.nature.com/articles/s42003-020-1091-1#MOESM1">9</a>).</p><h3 id="Expansion-and-contraction-of-gene-families"><a class="header-anchor" href="#Expansion-and-contraction-of-gene-families"></a>Expansion and contraction of gene families</h3><p>To identify expanded and contracted gene families in the common ancestor of echinoderms, the gene family result generated from OrthoMCL were used and analyzed by CAFE software (Supplementary Fig. <a href="https://www.nature.com/articles/s42003-020-1091-1#MOESM1">11</a>). Profiles of GO terms, protein domains and KEGG pathways of these expanded and contracted genes are shown in Extended data 1 (Extended_data1.xlsx).</p><h3 id="Domains-lost-in-echinoderms"><a class="header-anchor" href="#Domains-lost-in-echinoderms"></a>Domains lost in echinoderms</h3><p>Domains found in any of the chordate species, but not found in any of the the echinoderm species were defined as domains lost in echinoderm lineage. Six echinoderm species (<em>Apostichopus japonicus</em>, <em>Lytechinus variegatus</em>, <em>Acanthaster planci</em>, <em>Ophiothrix spiculata</em>, <em>Anneissia japonica</em>, and <em>Strongylocentrotus purpuratus</em>) and nine chordate species (<em>Mus musculus</em>, <em>Branchiostoma floridae</em>, <em>Ciona intestinalis</em>, <em>Petromyzon marinus</em>, <em>Oryzias latipes</em>, <em>Gallus gallus</em>, <em>Xenopus laevis</em>, <em>Pelodiscus sinensis</em>, and <em>Danio rerio</em>) were blasted (&gt;50% identity and &gt;30% align ratio) to the acorn worm (<em>Saccoglossus kowalevskii</em>) protein gene set and searched for potential domains lost in echinoderms. Seven-hundred forty-seven genes were identified to be the lost genes in echinoderms. Among these genes, six genes were not found in any of the nine chordate species, but found in acorn worm. These genes were enriched with GO terms of biosynthetic process, metabolism process, and the establishment of localization.</p><h3 id="Hox-cluster-analysis"><a class="header-anchor" href="#Hox-cluster-analysis"></a>Hox cluster analysis</h3><p><em>Cloning of Hox genes</em>: To further confirm sequences of Hox genes in the feather star, a total of nine hox genes had been cloned from <em>Anneissia japonica</em> using RT-PCR (Tsurugaya et al., in preparation).</p><p><em>Preparation of A. japonica BAC library</em>: We constructed BAC library, using genomic DNA prepared from the male gonadal pinnules that contained testes. The DNA was partially digested with the restriction enzyme MboI, size-fractionated, and cloned into the vector pCCBAC1(EPICENTER). The bacterial strain DH10B T1 phage resistant (Invitrogen) was used for transfecting the BACs for constructing the library. Single clones were picked into 384-well plates and preserved. Two batches of libraries were produced, which were named Oj1 (average insert size ~100 kb, 35,712 clones) and Oj2 (average insert size ~78 kb, 45,977 clones).</p><p><em>Screening and cloning of BAC clones containing hox genes</em>: Using the cDNA fragments of nine hox genes (hox1, hox2, hox4, hox5, hox7, hox8, hox9/10, hox11/13a, and hox11/13c. Tsurugaya et al., in preparation), we screened the BAC library of <em>A. japonica</em> for the clones that contained Hox genes and their neighboring regions. This screening yielded 23 clones in total, which, however, were not contiguous but separated into four groups.</p><p><em>FISH analysis</em>: Probes for FISH were derived from clones out of the <em>A. japonica</em> BAC library. BAC clones used for FISH were Oj1–26E10 (containing hox1), Oj2–17D15 (hox2), Oj2–75D03 (hox4 and hox5), Oj2–78N14 (hox7 and hox8), Oj1–50I03 (hox8 and hox9/10), and Oj2–102A05 (hox11/13c). BAC clone DNAs were isolated using Qiagen Plasmid Midi Kit (Qiagen) and labeled with biotin or digoxigenin by using Nick Translation Kit (Roche). Hybridization mix was prepared as described previously (3). Two color-chromosomal FISH was carried out as described previously (1, 2) with the following modifications. Blastula or early gastrula stage embryos were treated with 0.08% colchicine (Sigma) in sea water for 30 min. Embryos were fixed in methanol glacial acetic acid (3:1) fixative at 4 °C overnight, then transferred to 100% ethanol, and stored at –20 °C. To prepare metaphase spreads, 80 µL of 60% acetic acid was added to a microfuge tube containing 50–100 embryos. Three minutes later, embryos were dropped onto a prewarmed (48 °C) slide glass, and left until dry (about 30 min). Before hybridization, the slides were treated with 0.5% pepsin (1:100, Wako) in 0.01 N HCl for 3 min, and washed in phosphate-buffered saline (PBS) three times. Then the slides were post-fixed in 1% paraformaldehyde in PBS at r.t. for 30 min, and washed in PBS twice. After dehydration, the air-dried slides were treated with acetone at r.t. for 10 min, and dried again. Following the denaturation of chromosomal DNA and dehydration, hybridization was carried out at 43 °C for 16 h. FISH images were taken using an Olympus BX60 microscope equipped with an Olympus DP70 camera.</p><p><em>Identification of clustered Hox genes</em>: In scaffold 288292 (about 1.86 Mbp in length), hox1, hox2, hox3, hox4, hox5, hox6, hox7, hox8, hox9/10, and hox11/13a were identified. The ten Hox genes were aligned in the order, spanning about 480 kb in length, with the 3ʹend of hox1 about 392 kb away from the end of the scaffold. In scaffold 287987 (about 96 kb), hox11/13b and hox11/13c were identified. To see whether the 12 Hox genes form a single cluster, we carried out two color-chromosomal FISH, using the BAC clones (described above) as probes. The FISH analysis revealed that the eight genes contained in the BAC clones were in close vicinity to one another on a single chromosome (comprising of two sister chromatids). However, the gene order or relative positions of the two scaffolds on the chromosome could not be clarified, leaving four possible gene orders of 12 Hox genes undetermined. Thus, it is suggested that 12 Hox genes are present on a single chromosome, forming two subclusters separated by at least 400 kb in the genome of <em>Anneissia japonica</em><a href="https://www.nature.com/articles/s42003-020-1091-1#ref-CR10">10</a>, hox11/13d and hox11/13e, in another scaffolds 2266 and 6788, respectively. This suggests that the two genes are localized apart from the subcluster of ten Hox genes, which situation is consistent with the previous report showing that Hox11/13d and Hox11/13e do not reside in the Hox gene cluster in echinoderm genomes<a href="https://www.nature.com/articles/s42003-020-1091-1#ref-CR10">10</a>.</p><h3 id="Embryo-collection-and-RNA-extraction"><a class="header-anchor" href="#Embryo-collection-and-RNA-extraction"></a>Embryo collection and RNA extraction</h3><p><em>Lytechinus variegatus</em>: Adult green sea urchins were originally obtained from Reeftopia in Florida (FL) or from the Duke Marine lab in Beaufort NC. <em>L. variegatus</em> total RNA was prepared from wild type embryos per timepoint using TRIzol (Invitrogen) and DNase treatment. RNA quantitation and integrity were determined using a Qubit® 2.0 Fluorometer (Life Technologies) and a 2100 Bioanalyzer (Agilent Technologies). Total RNA was subjected to three iterations of polyA selection using Dynabeads (Life Technologies) prior to cDNA synthesis. Following stages were collected for RNA extraction and fixation; 2 cell (1 h post fertilization), 60 cell (2.5 hpf), EB (Early Blastula, 4 hpf), HB (Hatched Blastula, 7 hpf), TVP (Thickened Vegetal Plate, 10 hpf), MB (Mesenchyme Blastula, 12 hpf), EG (Early Gastrula, 13 hpf), MG (Mid Gastrula, 15 hpf), LG (Late Gastrula,18 hpf), EP (Early Pluteus, 36 hpf), LP (Late Pluteus, 48 hpf), 7 wpf (7 weeks post fertilization), 8 wpf (8 weeks post fertilization), 1 day post metamorphosis, 1 week post metamorphosis, and adult. In addition, RNA from larval region of 8 weeks post fertilization (8 wpf Larva), and rudiment region of 8 weeks post fertilization (8 wpf Rudiment) were also extracted by dissecting the 8 wpf embryo. Results based on analyses with RNAseq data from two cell to Late pluteus were published<a href="https://www.nature.com/articles/s42003-020-1091-1#ref-CR52">52</a>. Two independent biological samples were prepared for all the sampled stages.</p><p><em>Apostichopus japonicus</em>: Embryos of fertilized eggs, 4 cell (2 h post fertilization (hpf)), morula (6 hpf), blastula (14 hpf), gastrula (29 hpf), late gastrula (34 hpf), early auricularia larva (48 hpf), mid-auricularia larva (69 hpf), late auricularia larva (15 days post fertilization (dpf)), metamorphosis 1–4 (17–19 dpf), doliolaria larva (19 dpf), pentactula larva (27 dpf), and juvenile (51 dpf) stage were collected and used for this study, as previously described<a href="https://www.nature.com/articles/s42003-020-1091-1#ref-CR23">23</a>. Three independent biological samples were prepared for all the sampled stages.</p><p><em>Anneissia japonica</em>: Adult <em>Anneissia japonica</em> (previously called as <em>Oxycomanthus japonicus</em>, see Summers et al.<a href="https://www.nature.com/articles/s42003-020-1091-1#ref-CR53">53</a> for the nomenclature) were collected from rocky substrate of about 10 m depth at Koajiro, Sagami Bay, and kept in the sea until the day of spawning. Spawning check was carried out at every neap tide days during October and November, 2015. Spawning was observed in the evening of 20th and 21st of October, 2015, and seven females spawned in total. The obtained eggs were very fragile and surrounded by mucus. Small amounts of the spawned unfertilized eggs were separated in 1.5 mL tubes (100 μL each) for RNA extraction and fixation. The rest of the eggs were inseminated immediately by diluting concentrated sperm, which were directly collected from genital pinnules. The fertilized eggs were washed with filtered sea water several times to remove the mucous, and separated in the filtered sea water in plastic vessels for culture. The culture was done at room temperature (about 10–20 °C). Following stages were collected for RNA extraction and fixation (Supplementary Fig. <a href="https://www.nature.com/articles/s42003-020-1091-1#MOESM1">15</a>); 2 cells (1.5 h post fertilization), 8 cells (2.5 hpf), 32 cells (3.5 hpf), gastrula (8 hpf), hatching stage (17 hpf), early doliolaria (24 hpf), mid-late doliolaria (36 hpf), attachment stage (3–4 days pf), early cystidean (4–7 days pf), late cystidean (7–9 days pf), early pentacrinoid (3 weeks pf), late pentacrinoid (1.5 months pf), juvenile (2.5 months pf), arm branching stage (6–7 months pf), and adult (9 months pf). For the RNA extraction, more than 50 μL of specimens were diluted in the 10x volume of TRIzol reagent (Invitrogen). The tissue of the specimens were destructed by pipetting with a micro syringe or grinding with a pestle and mortar in the TRIzol reagent, and immediately stored in –80 °C. For the fixation, specimens were fixed with 4% paraformaldehyde in 0.5 M NaCl and 0.1 M 3-(N-morpholino) propanesulfonic acid (MOPS), pH 7.0 for several days at room temperature (about 22 °C). Fixed specimens were washed with 70% ethanol three times, and stored in 70% ethanol at –20 °C. Two independent biological samples were prepared for all the sampled stages.</p><h3 id="RNA-sequencing-and-gene-expression-data"><a class="header-anchor" href="#RNA-sequencing-and-gene-expression-data"></a>RNA sequencing and gene expression data</h3><p>After adjusting total RNA amounts between samples, non-stranded sequencing libraries (with the TruSeq protocol) were constructed and sequenced using the Illumina HiSeq 4000 platform. For the sea cucumber (<em>A. japonicus</em>) samples, Quartz-seq amplified libraries were made as previously described<a href="https://www.nature.com/articles/s42003-020-1091-1#ref-CR13">13</a>. Qualities of raw reads were evaluated using FastQC program (<a href="http://www.bioinformatics.bbsrc.ac.uk/projects/fastqc/">http://www.bioinformatics.bbsrc.ac.uk/projects/fastqc/</a>). Read length and single/paired information are as follows; <em>L. variegatus</em> (100 bp, paired-end), <em>A. japonica</em> (150 bp, paired-end), <em>A. japonicus</em> (100 bp, single-end). Adapter sequences of Quartz-Seq samples (Mm early stages 2-cell-blastocyst) were removed using the fastq-mcf program (<a href="https://code.google.com/p/ea-utils/wiki/FastqMcf">https://code.google.com/p/ea-utils/wiki/FastqMcf</a>) as previously described<a href="https://www.nature.com/articles/s42003-020-1091-1#ref-CR13">13</a>. RNAseq data were then mapped to genomes of each species using HISAT2 program<a href="https://www.nature.com/articles/s42003-020-1091-1#ref-CR54">54</a> (ver. 2.05), and calculated relative expression levels by StringTie<a href="https://www.nature.com/articles/s42003-020-1091-1#ref-CR55">55</a> (ver. 1.3.5) with species-specific GTF files.</p><p><em>Apostichopus japonicus</em>: For the gene expression levels of Japanese sea cucmber, genome and GTF files reported by Zhang et al.<a href="https://www.nature.com/articles/s42003-020-1091-1#ref-CR56">56</a> were used.</p><p><em>Strongylocentrotus purpuratus</em>: Developmental transcriptomes of the purple sea urchin was obtained from SRA (Accession: PRJNA81157), sequenced by Tu et al.<a href="https://www.nature.com/articles/s42003-020-1091-1#ref-CR21">21</a>,<a href="https://www.nature.com/articles/s42003-020-1091-1#ref-CR22">22</a>. The dataset contained developmental stages of 0 hpf, 10 hpf, 18 hpf, 24 hpf, 30 hpf, 40 hpf, 48 hpf, 56 hpf, 64 hpf, 72 hpf, four arm larva, vestibular invagi, pentagonal disc, tube foot protrusion, post metamorphosis, young juvenile, adult.</p><h3 id="Identification-of-conserved-stages"><a class="header-anchor" href="#Identification-of-conserved-stages"></a>Identification of conserved stages</h3><p>Whole embryonic, comparative transcriptomic analysis was performed as previously described to find evolutionarily conserved developmental stages<a href="https://www.nature.com/articles/s42003-020-1091-1#ref-CR13">13</a>. Relative expression levels (TPM) of ortholog groups (defined by orthomcl<a href="https://www.nature.com/articles/s42003-020-1091-1#ref-CR57">57</a>) were calculated from the RNAseq data, and then compared their dissimilarities (expDists) among developmental stages of different species. In calculating dissimilarity (1 – Spearman) of ortholog-group-based whole-embryonic transcriptomes (expDists), phylogenetic relationship [Anj(Apj(Sp,Lv))] were taken into consideration to avoid unwanted bias arising from simple pair-wise comparisons<a href="https://www.nature.com/articles/s42003-020-1091-1#ref-CR58">58</a>. By randomly picking-up one biological replicate sample for each developmental stage (in each species), 100 expression tables (100 biological replicate included expression table, or BRI-exp data) were created (method reported in Hu et al.<a href="https://www.nature.com/articles/s42003-020-1091-1#ref-CR13">13</a>). We used this 100 BRI table to test statistical significance of changes in Ptop scores (Friedman test).</p><h3 id="Whole-mount-in-situ-hybridization"><a class="header-anchor" href="#Whole-mount-in-situ-hybridization"></a>Whole-mount in situ hybridization</h3><p>Digoxigenin (Dig) labeled riboprobe for <em>pitx</em> gene of <em>A. japonica</em> was prepared from PCR-amplified fragments (911 bp) using following primiers: 5ʹ-GAACGATTCGCTTCCGATGC-3ʹ (forward primer), 5ʹ-TGAGACCGGCGTATTGACAC-3ʹ (reverse primer). Whole-mount in situ hybridization (WISH) was conducted following the protocol for the planktonic larvae of a stalked crinoid <em>Metacrinus rotundus</em><a href="https://www.nature.com/articles/s42003-020-1091-1#ref-CR59">59</a> with some modifications. Specimens were fixed with 4% paraformaldehyde (PFA) in 0.5 M NaCl and 0.1 M 3-(N-morpholino) propanesulfonic acid (MOPS), pH 7.0 for over 1 day, and stored at –20 °C in 70% ethanol. The fixed specimens were washed three times with PBST (1× phosphate-buffered saline with 0.1% Tween 20), treated with 0.2 µg/mL proteinase K in PBST at 37 °C for 20 min, re-fixed with 4% PFA at 4 °C for 30 min, washed three times with PBST, and then incubated in hybridization buffer (50% formamide, 5× SSC, 100 µg/mL yeast RNA, 50 µg/mL heparin, 1% Tween 20) at 55 °C for 4–6 h. Hybridization was carried out with 0.2 µg/mL probes in the hybridization buffer at 55 °C for 5 days. The protocol after hybridization was as previously described<a href="https://www.nature.com/articles/s42003-020-1091-1#ref-CR59">59</a>. WISH finished samples were observed and photographed under the BX-51 optical microscope (Olympus).</p><h3 id="Proteomic-analysis"><a class="header-anchor" href="#Proteomic-analysis"></a>Proteomic analysis</h3><p>Proteins were isolated from adult feather skeleton and analyzed as previously described<a href="https://www.nature.com/articles/s42003-020-1091-1#ref-CR36">36</a>. All organic material was removed from the skeleton by extensive washing with sodium hypochlorite followed by guanidine isothiocyanate. The skeleton was demineralized with acetic acid followed by dialysis. Both soluble and insoluble protein fractions were analyzed. Proteins were separated by sodium dodecyl sulfate–polyacrylamide gel electrophoresis. Each lane was excised into 20 equal sized segments and processed. In-gel digestion with trypsin was performed on each fraction, followed by analysis by nano Liquid chromatography–mass spectrometry (LC-MS/MS) with a Waters nanoAcquity high-performance liquid chromatography system interfaced to a ThermoFisher Q Exactive hybrid quadrupole-orbitrap mass spectrometer. The mass spectrometer was operated in a data-dependent mode. Data were used to search predicted peptides from the <em>A. japonica</em> genome using Mascot and then parsed into the Scaffold algorithm for validation and filtering, using a 95% protein identification score with at least two peptides per protein.</p><h3 id="Statistics-and-reproducibility"><a class="header-anchor" href="#Statistics-and-reproducibility"></a>Statistics and reproducibility</h3><p>Alpha levels of 0.05 were regarded as statistically significant throughout the study, unless otherwise specified. Experiments were repeated multiple times to confirm the reproducibility of the data. See details for individual experiments in the “Methods” sections above.</p><h3 id="Reporting-summary"><a class="header-anchor" href="#Reporting-summary"></a>Reporting summary</h3><p>Further information on research design is available in the <a href="https://www.nature.com/articles/s42003-020-1091-1#MOESM5">Nature Research Reporting Summary</a> linked to this article.</p><h2 id="Data-availability"><a class="header-anchor" href="#Data-availability"></a>Data availability</h2><p>Genomic sequence data and assembled genomes for the following species are available through the NCBI database at the indicated BioProject accession IDs: Brittle star genome (PRJNA182997), feather star genome (PRJNA553656), and green sea urchin genome (PRJNA553643). RNAseq data are available for the following species at the indicated BioProject accession IDs: green sea urchin RNAseq data (PRJNA554218), feather star RNAseq data (PRJNA553591), and Japanese sea cucumber RNAseq data (PRJNA553613). Cloned sequences of Hox genes of the feather star (hox1 LC462021, hox2 LC462022, hox4 LC462023, hox5 LC462024, hox7 LC462025, hox8 LC462026, hox9/10 LC462027, hox11/13a LC462028, hox11/13c LC462029) are also available through the NCBI database at the indicated nucleotide accession IDs. Assembled genomes and gene sets can also be accessed through the DRYAD database<a href="https://www.nature.com/articles/s42003-020-1091-1#ref-CR60">60</a> at <a href="https://hub.pubmedplus.com/10.5061/dryad.rbnzs7h7n">https://doi.org/10.5061/dryad.rbnzs7h7n</a>. Proteomic data are available via the ProteomeXchange with identifier PXD019526. Source data for Figs. <a href="https://www.nature.com/articles/s42003-020-1091-1#Fig2">2a</a> and <a href="https://www.nature.com/articles/s42003-020-1091-1#Fig3">3b</a> can be found in Supplementary Data <a href="https://www.nature.com/articles/s42003-020-1091-1#MOESM3">1</a> and Supplementary Data <a href="https://www.nature.com/articles/s42003-020-1091-1#MOESM4">2</a>.</p><h2 id="Code-availability"><a class="header-anchor" href="#Code-availability"></a>Code availability</h2><p>No custom or proprietary software was used in the analysis. Versions and parameters for each software package used are described in the reporting summary and elsewhere in the “Methods.”</p>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;原文链接：&lt;a href=&quot;https://www.nature.com/articles/s42003-020-1091-1#MOESM1&quot;&gt;Genomic insights of body plan transitions from bilat</summary>
      
    
    
    
    <category term="生物学" scheme="https://halo123.top/categories/%E7%94%9F%E7%89%A9%E5%AD%A6/"/>
    
    
    <category term="进化学" scheme="https://halo123.top/tags/%E8%BF%9B%E5%8C%96%E5%AD%A6/"/>
    
  </entry>
  
  <entry>
    <title>Java 多线程</title>
    <link href="https://halo123.top/2021/05/31/Java/Java-J-%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    <id>https://halo123.top/2021/05/31/Java/Java-J-%E5%A4%9A%E7%BA%BF%E7%A8%8B/</id>
    <published>2021-05-31T08:16:54.000Z</published>
    <updated>2021-06-01T06:17:14.669Z</updated>
    
    <content type="html"><![CDATA[<p>参考：《Java 多线程与 Socket 实战微服务框架》</p><h2 id="多线程的概念"><a class="header-anchor" href="#多线程的概念"></a>多线程的概念</h2><h3 id="进程与线程"><a class="header-anchor" href="#进程与线程"></a>进程与线程</h3><p>现在的操作系统都是多任务操作系统。多任务操作系统允许多个进程在同一个 CPU 上运行。进程也是操作系统进行资源分配的最小单位，每个进程都有独立的代码和数据空间，称为<font color="#ea66a6">进程的上下文</font>。CPU 从一个进程切换到另一个进程所做的动作被称为<font color="#ea66a6">上下文切换</font>。操作系统通过频繁的上下文切换来让这些进程看起来像在同时运行一样。</p><p>进程的运行需要较多的资源，因此，操作系统能够同时运行的进程数量是有限的。进程间的切换和通信也存在较大的开销。为了能并行执行更多的任务，提升系统的效率，才引入了线程的概念。线程间的切换开销比进程间的切换开销小得多。</p><p>线程是 CPU 调度的最小单位，它是进程的一部分，只能由进程创建。一个可以进程拥有多个线程，这线线程共享进程的资源和程序代码。也就是说，一个 Java 进程（JVM 进程）至少有一个线程（称为主线程），对应到代码中就是 <code>main</code> 方法所在的线程。通过主线程就可以创建更多线程。此外，线程又分为用户线程和守护线程。两者的区别在于，后者会随主线程结束而结束。一旦所有的用户线程都结束，程序就会停止，所有守护线程也随之终止。</p><p>受操作系统的限制，每个操作系统用户能够同时运行的进程数是有限的，每个进程能够开启的线程数也有上限。在同一个 CPU 核心上，多线程以抢占或主动让出时间片的形式轮流执行。基于同一段代码可以创建多个线程，这些线程共享进程的数据空间，但每个线程有独立的运行栈和程序计数器。</p><h3 id="并发与并行"><a class="header-anchor" href="#并发与并行"></a>并发与并行</h3><p>并发与并行是一个相对资源的概念。</p><ul><li><font color="#ad1a72">并发</font>是指两个或多个事件在同一时间间隔内发生。</li><li><font color="#ad1a72">并行性</font>是指系统具有同时进行运算或操作的特性，在同一时刻能完成两种或两种以上的工作。</li></ul><p>如果我们在同一时间，在多台计算机上同时运行多个任务，这些任务就是在“并行”地执行。同理，如果一台计算机拥有多个 CPU ，这些 CPU 分别在执行多个运算任务，尽管这个计算机的其他资源，比如内存，是多个任务所共享的，但相对 CPU 这一资源来说，这些任务是“并行”的，这被称为“多 CPU 并行”。如果一个 CPU 拥有多个核心，并允许多个线程在不同的核心上同时执行，则称为“多核并行”。</p><p>与之相对应的是，在同一个资源上，通过某些调度算法，让用户看起来计算机是在同时执行多个任务，这就是并发。比如，在单个 CPU 上，通过一定的调度算法，“同时”执行多个任务，让这些任务看起来在一个时间段是“并行”执行的。即使在同一时刻，CPU 也只能执行这些计算任务中的一个。</p><h3 id="线程状态"><a class="header-anchor" href="#线程状态"></a>线程状态</h3><p>线程和进程一样拥有 7 种状态：新建（NEW）、就绪（RUNNABLE 或 READY）、运行（RUNNING）、阻塞（BLOCKED）、等待（WAITING）、计时等待（TIME_WAITING）、终止（TERMINATED 或 DEAD）。线程在存续过程中，其状态会在这 7 种状态之间转换。</p><blockquote><p>Java 5 以前，等待和计时等待也被归于阻塞状态，所以也有 5 种状态的说法。</p></blockquote><ul><li>新建（NEW）：线程被新创建时的状态。</li><li>就绪（RUNNABLE 或 READY）：线程正在参与竞争 CPU 的使用权</li><li>运行（RUNNING）：线程获取到了 CPU 的使用权，正在执行。</li><li>阻塞（BLOCKED）：阻塞状态指的是线程为了等待某个对象的“锁”，而暂时放弃 CPU 的使用权，且不再参与 CPU 使用权的竞争。直到条件满足（超时退出、被中断或唤醒）时，该线程才重新回到就绪状态，重新参与竞争 CPU。</li><li>等待（WAITING）：线程无线等待某个对象的“锁”，或等待另一个线程结束的状态。</li><li>计时等待（TIME_WAITING）：线程在一段时间内等待某个对象的“锁”，或者主动休眠，亦或者等待另一个线程结束。除非被中断，否则时间一到，（超时）线程将会自动回到就绪态。被中断的方法通常会抛出中断异常（InterruptedException），超时的方法会抛出超时异常（TimeoutException）。</li><li>终止（TERMINATED 或 DEAD）：遇到以下情况，线程将终止。线程所运行的代码段被执行完毕，或执行过程中出现异常，亦或者受到外界干预而中断执行。</li></ul><h2 id="Tread-线程类"><a class="header-anchor" href="#Tread-线程类"></a>Tread 线程类</h2><h3 id="基本用法"><a class="header-anchor" href="#基本用法"></a>基本用法</h3><p>通过继承 Tread 类，覆盖其 <code>run()</code> 方法即可编写一个线程类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyThread</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">            System.out.print(i + <span class="string">&quot; , &quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        MyThread t = <span class="keyword">new</span> MyThread();</span><br><span class="line">        t.start();</span><br><span class="line">        System.out.println(<span class="string">&quot;ok&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>注意：调用 <code>start()</code> 方法后，<code>run()</code> 方法中的代码并不一定立即开始执行。 <code>start()</code> 方法只是将线程变为可就绪状态，什么时候运行是由操作系统决定的。</p></blockquote><h3 id="常用方法介绍"><a class="header-anchor" href="#常用方法介绍"></a>常用方法介绍</h3><p>Thread 类中常用的实例方法</p><ul><li><code>t.start()</code>：启动线程 t 的状态从新建转换为就绪</li><li><code>t.checkAccess()</code>：检查当前线程是否有权限访问线程 t</li><li><code>t.interrupt()</code>：尝试通知线程 t 中断，需要在线程的任务代码中使用</li><li><code>t.isInterrupted()</code>：用于检查是否要求中断。当此方法返回 true 时，当前线程应判断是否要中断执行，如果此时不中断执行，再次调用此方法将返回 false。</li><li><code>t.setPriority()</code>：设置线程 t 的优先级（1 ~ 10），值越大，得到执行的将会越高</li><li><code>t.isDaemon()</code>：判断线程 t 是否为守护线程</li><li><code>t.setDaemon(true)</code>：仅用于在调用 <code>start()</code> 前设置线程 t 为守护线程</li><li><code>t.isAlive()</code>：判断线程 t 是否存活</li><li><code>t.join(1000L)</code>：当前线程等待线程 t 终止。参数为超时时间。</li><li><code>t.setName(&quot;Thread1&quot;)</code>：为线程设置一个名称</li></ul><p>Thread 类中常用的静态方法</p><ul><li><code>Thread.yield()</code>：让当前线程让出 CPU，并转为就绪状态，重新参与 CPU 使用权的竞争。只有优先级大于等于当前进程的线程才可能获得 CPU 使用权。</li><li><code>Thread.sleep(100L)</code>：让当前线程让出 CPU，睡眠（阻塞）100 毫秒，然后回到就绪状态，重新参与 CPU 使用权的竞争。</li><li><code>Thread.currentThread()</code>：得到当前线程对象的引用。</li></ul><h3 id="wait-和-sleep-的区别"><a class="header-anchor" href="#wait-和-sleep-的区别"></a><code>wait</code> 和 <code>sleep</code> 的区别</h3><p><code>wait()</code> 方法时所有 Object 类的方法，是线程同步的重要手段之一。虽然两者都可以让程序阻塞指定的毫秒数，并且都可以通过 <code>interrupt()</code> 方法打断，但两者有很大的不同：</p><ul><li><code>wait()</code> 方法必须在 <code>synchronized</code> 同步块或方法中使用；</li><li><code>wait()</code> 方法会释放由 <code>synchronized</code> 锁上的对象锁，而 <code>sleep()</code> 则不会</li><li>由 <code>wait()</code> 方法形成的阻塞，可以通过针对同一对象锁的 <code>synchronized</code> 作用域用 <code>notify()</code> 或 <code>notifyAll()</code> 来唤醒，而 <code>sleep()</code> 则无法被唤醒，只能定时醒来或被 <code>interrupt()</code> 方法中断。</li></ul><h3 id="sleep-和-yield-的区别"><a class="header-anchor" href="#sleep-和-yield-的区别"></a><code>sleep</code> 和 <code>yield</code> 的区别</h3><p>区别如下：</p><ul><li>线程执行 <code>sleep()</code> 方法后转入阻塞态，并在睡眠一段时间后自动醒来，回到就绪态。而执行 <code>yield()</code> 方法后，当前线程转入的是就绪态。</li><li>当前线程执行 <code>sleep()</code> 方法后，其他线程无论优先级高低，都有机会得以运行；而执行 <code>yield()</code> 方法只会给那些具有相同或更高优先级的线程运行的机会。</li><li><code>sleep()</code> 方法需要声明抛出 <code>InterruptedException</code>，而 <code>yield()</code> 方法没有声明任何异常。</li><li><code>sleep()</code> 方法比 <code>yield()</code> 方法具有更好的可移植性（与操作系统的 CPU 调度有关）。如果在循环中使用 <code>yield()</code> 方法，则在 Linux 上容易导致“死循环”——当前线程在 <code>yield()</code> 后总是又立即抢占到 CPU，导致其他线程得不到执行。</li></ul><h2 id="Runnable-接口"><a class="header-anchor" href="#Runnable-接口"></a>Runnable 接口</h2><p>处理继承 Thread 类外，还可以通过实现 Runnable 接口来编写线程代码。实践经验告诉我们，尽量使用接口而不是继承来进行开发。使用 Runnable 接口可以将线程对象本身与线程所要执行的代码分离，同时避免 Java 的单继承限制。而且线程池也只能接受 Runnable 或 Callable 接口类型的对象作为任务。因此，建议使用 Runnable 或 Callable 接口的形式开发多线程。</p><p>下面是 Runnable 接口使用的示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">InterruptThread</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(<span class="number">2000</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;线程处于阻塞状态时，中断线程，就会抛出异常。&quot;</span>);</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">TestInterrupt</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">        Thread thread = <span class="keyword">new</span> Thread(<span class="keyword">new</span> InterruptThread());</span><br><span class="line">        thread.start();</span><br><span class="line">        thread.interrupt();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="线程池"><a class="header-anchor" href="#线程池"></a>线程池</h2><p>线程的创建和销毁会消耗资源。在大量并发的情况下，频繁地创建和销毁线程会严重影响系统的性能。因此，通常需要预先创建多个线程，并集中管理起来，形成一个线程池。在需要用到线程时，从线程池中拿出一个线程直接使用，执行完毕时再放回线程池。</p><h3 id="Executors"><a class="header-anchor" href="#Executors"></a>Executors</h3><p>从 Java 5 开始，可以使用 <code>java.util.concurrent.Executors</code> 类来创建线程池：</p><p>（1）创建固定大小的线程池 <code>Executors.newFixedThreadPool(20)</code></p><p>上面的代码创建了一个有着 20 个线程的固定大小线程池。又新任务时，如果池中没有空闲池可用，就加入队列等待。队列大小的上限是 <code>Integer.MAX_VALUE</code>。其优点时避免了线程创建和销毁的开销；缺点是池大小的配置容易过高或过低。无论过高或过低都会影响性能。如果希望自定义队列大小，则使用 <a href="#ThreadPoolExecutor">ThreadPoolExecutor</a></p><p>（2）创建可变大小的线程池 <code>Executors.newCachedThreadPool()</code></p><p>上面代码创建了一个可缓存空闲线程 60 秒的线程池。有新任务时，如果池中没有空闲线程可用，则创建一个新线程并添加到池中，池的大小上限是 <code>Integer.MAX_VALUE</code>。超过 60 秒未被使用的线程将被销毁。其优点是能按需创建线程，并尽可能地回收或复用它们。该方法适用于执行生存期较短的任务。其缺点是池大小的上限太大，“洪峰”来临时容易在短期内创建并持有大量线程。如果希望自定义大小和线程的最大空闲时长，则使用 <a href="#ThreadPoolExecutor">ThreadPoolExecutor</a></p><p>（3）创建一个只有一个线程的线程池 <code>Executors.newSingleThreadExecutor()</code></p><p>该方法等同于 <code>Executors.newFixedThreadPool(1)</code></p><p>（4）创建一个支持定时或周期性任务执行的线程池 <code>Executors.newScheduledThreadPool(2)</code></p><h3 id="ExecutorsService"><a class="header-anchor" href="#ExecutorsService"></a>ExecutorsService</h3><p>通过 Executors 创建的线程池都实现了 ExecutorsService 接口，调用它的 <code>execute</code> 或 <code>submit</code> 方法即可向线程池提交任务。下面介绍了 ExecutorsService 接口的主要方法。</p><ul><li><code>shutdown()</code>：异步关闭线程池。调用后将不再向线程池提交新任务，但允许继续执行已提交到线程池的任务。调用后立即返回，不会阻塞当前线程。</li><li><code>shutdownNow()</code>：立即异步关闭线程池</li></ul><h3 id="ThreadPoolExecutor"><a class="header-anchor" href="#ThreadPoolExecutor"></a>ThreadPoolExecutor</h3><h3 id="基本用法-v2"><a class="header-anchor" href="#基本用法-v2"></a>基本用法</h3><h2 id="Callable-与-Future"><a class="header-anchor" href="#Callable-与-Future"></a>Callable 与 Future</h2><h2 id="线程安全与效率"><a class="header-anchor" href="#线程安全与效率"></a>线程安全与效率</h2><h3 id="什么是线程安全"><a class="header-anchor" href="#什么是线程安全"></a>什么是线程安全</h3><h3 id="线程同步"><a class="header-anchor" href="#线程同步"></a>线程同步</h3><h3 id="饥饿与公平"><a class="header-anchor" href="#饥饿与公平"></a>饥饿与公平</h3><h3 id="锁与死锁"><a class="header-anchor" href="#锁与死锁"></a>锁与死锁</h3><h3 id="线程中断"><a class="header-anchor" href="#线程中断"></a>线程中断</h3><h2 id="volatile-关键字"><a class="header-anchor" href="#volatile-关键字"></a>volatile 关键字</h2><h2 id="synchronized-关键字"><a class="header-anchor" href="#synchronized-关键字"></a>synchronized 关键字</h2><h2 id="wait-notify-notifyAll"><a class="header-anchor" href="#wait-notify-notifyAll"></a>wait notify notifyAll</h2><h2 id="CAS-操作"><a class="header-anchor" href="#CAS-操作"></a>CAS 操作</h2><h2 id="atomic-包"><a class="header-anchor" href="#atomic-包"></a>atomic 包</h2><h2 id="Lock-自旋锁"><a class="header-anchor" href="#Lock-自旋锁"></a>Lock 自旋锁</h2><h2 id="Condition-条件变量"><a class="header-anchor" href="#Condition-条件变量"></a>Condition 条件变量</h2><h2 id="线程安全容器"><a class="header-anchor" href="#线程安全容器"></a>线程安全容器</h2><h2 id="ThreadLocal-类"><a class="header-anchor" href="#ThreadLocal-类"></a>ThreadLocal 类</h2><h2 id="CountDownLatch-计数器"><a class="header-anchor" href="#CountDownLatch-计数器"></a>CountDownLatch 计数器</h2><h2 id="CyclicBarrier-栅栏"><a class="header-anchor" href="#CyclicBarrier-栅栏"></a>CyclicBarrier 栅栏</h2><h2 id="Semaphore-信号量"><a class="header-anchor" href="#Semaphore-信号量"></a>Semaphore 信号量</h2><h2 id="fork-join-框架"><a class="header-anchor" href="#fork-join-框架"></a>fork join 框架</h2>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;参考：《Java 多线程与 Socket 实战微服务框架》&lt;/p&gt;
&lt;h2 id=&quot;多线程的概念&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#多线程的概念&quot;&gt;&lt;/a&gt;多线程的概念&lt;/h2&gt;
&lt;h3 id=&quot;进程与线程&quot;&gt;&lt;a class=&quot;header</summary>
      
    
    
    
    <category term="Java" scheme="https://halo123.top/categories/Java/"/>
    
    
    <category term="Java" scheme="https://halo123.top/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>位运算</title>
    <link href="https://halo123.top/2021/05/30/LeetCode/%E4%BD%8D%E8%BF%90%E7%AE%97/"/>
    <id>https://halo123.top/2021/05/30/LeetCode/%E4%BD%8D%E8%BF%90%E7%AE%97/</id>
    <published>2021-05-30T09:32:51.000Z</published>
    <updated>2021-05-31T16:22:52.614Z</updated>
    
    <content type="html"><![CDATA[<h2 id="2-的幂【简单】"><a class="header-anchor" href="#2-的幂【简单】"></a>2 的幂【简单】</h2><div class="tag link"><a class="link-card" title="231. 2 的幂" href="https://leetcode-cn.com/problems/power-of-two/"><div class="left"><img src="https://cdn.jsdelivr.net/gh/halo-blog/cdn-blog-img-b@master/img/leetcodeicon.svg"/></div><div class="right"><p class="text">231. 2 的幂</p><p class="url">https://leetcode-cn.com/problems/power-of-two/</p></div></a></div><h3 id="题目描述"><a class="header-anchor" href="#题目描述"></a>题目描述</h3><p>给你一个整数 <code>n</code>，请你判断该整数是否是 <code>2</code> 的幂次方。</p><ul><li>如果是，返回 <code>true</code> ；</li><li>否则，返回 <code>false</code> 。</li></ul><blockquote><p>如果存在一个整数 $x$ 使得 $n = 2^{x}$ ，则认为 $n$ 是 2 的幂次方。</p></blockquote><div class="tabs" id="2的幂"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#2的幂-1">示例 1</button></li><li class="tab"><button type="button" data-href="#2的幂-2">示例 2</button></li><li class="tab"><button type="button" data-href="#2的幂-3">示例 3</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="2的幂-1"><p>输入：<code>n = 1</code></p><p>输出：<code>true</code></p><p>解释：$2^{0}=1$</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="2的幂-2"><p>输入：<code>n = 8</code></p><p>输出：<code>true</code></p><p>解释：$2^{3}=8$</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="2的幂-3"><p>输入：<code>n = 5</code></p><p>输出：<code>false</code></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h3 id="题解"><a class="header-anchor" href="#题解"></a>题解</h3><p><a href="https://leetcode-cn.com/problems/power-of-two/solution/power-of-two-er-jin-zhi-ji-jian-by-jyd/">位运算</a> 参考题解：</p><p>若 $n = 2^{x}$ 且 $x$ 为自然数（即 $n$ 为 2 的幂），则一定满足一下条件：</p><ul><li>恒有 <code>n &amp; (n-1) == 0</code>（<code>&amp;</code> 表示与运算，两位同时为“1”，结果才为“1”，否则为 0）</li><li>一定满足 <code>n&gt;0</code></li></ul><p>因为 $n$ 二进制最高位为 1，其余所有位为 0；$n−1$ 二进制最高位为 0，其余所有位为 1</p><table><thead><tr><th>2<sup>x</sup></th><th>n</th><th>n-1</th><th>n &amp; (n-1)</th></tr></thead><tbody><tr><td>2<sup>0</sup></td><td>0001</td><td>0000</td><td>0</td></tr><tr><td>2<sup>1</sup></td><td>0010</td><td>0001</td><td>0</td></tr><tr><td>2<sup>2</sup></td><td>0100</td><td>0011</td><td>0</td></tr><tr><td>…</td><td>…</td><td>…</td><td>…</td></tr></tbody></table><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">isPowerOfTwo</span>(<span class="params">n</span>):</span></span><br><span class="line">    <span class="keyword">return</span> n &gt; <span class="number">0</span> <span class="keyword">and</span> n &amp; (n - <span class="number">1</span>) == <span class="number">0</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="built_in">print</span>(isPowerOfTwo(<span class="number">8</span>))  <span class="comment"># True</span></span><br><span class="line">    <span class="built_in">print</span>(isPowerOfTwo(<span class="number">19</span>)) <span class="comment"># False</span></span><br></pre></td></tr></table></figure><h2 id="4-的幂-【简单】"><a class="header-anchor" href="#4-的幂-【简单】"></a>4 的幂 【简单】</h2><div class="tag link"><a class="link-card" title="342. 4 的幂" href="https://leetcode-cn.com/problems/power-of-two/"><div class="left"><img src="https://cdn.jsdelivr.net/gh/halo-blog/cdn-blog-img-b@master/img/leetcodeicon.svg"/></div><div class="right"><p class="text">342. 4 的幂</p><p class="url">https://leetcode-cn.com/problems/power-of-two/</p></div></a></div><h3 id="题目描述-v2"><a class="header-anchor" href="#题目描述-v2"></a>题目描述</h3><p>题目类似于 2 的幂。给定一个整数，写一个函数来判断它是否是 4 的幂次方。如果是，返回 true；否则，返回 false 。</p><h3 id="题解-v2"><a class="header-anchor" href="#题解-v2"></a>题解</h3><p>如果 $n$ 是 4 的幂，那么 $n$ 一定也是 2 的幂。因此我们可以首先判断 $n$ 是否是 2 的幂，在此基础上再判断 $n$ 是否是 4 的幂。</p><p>如果 $n$ 是 4 的幂，那么 $n$ 的二进制表示中有且仅有一个 1 ，并且这个 1 出现在从低位开始的第<font color="#faa755">偶数</font>个二进制位上。</p><p>我们可以构造一个整数 $mask$，使它的所有偶数二进制位都是 0，所有奇数二进制位都是 1。我们将 $n$ 和 $mask$ 进行按位与运算，如果结果为 0，说明 $n$ 二进制表示中的 1 出现在偶数的位置，否则说明其出现在奇数的位置。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">isPowerOfFour</span>(<span class="params">n</span>):</span></span><br><span class="line">    <span class="keyword">return</span> n &gt; <span class="number">0</span> <span class="keyword">and</span> n &amp; (n - <span class="number">1</span>) == <span class="number">0</span> <span class="keyword">and</span> (n &amp; <span class="number">0xaaaaaaaa</span>) == <span class="number">0</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="built_in">print</span>(isPowerOfFour(<span class="number">4</span>))  <span class="comment"># True</span></span><br><span class="line">    <span class="built_in">print</span>(isPowerOfFour(<span class="number">16</span>))  <span class="comment"># True</span></span><br><span class="line">    <span class="built_in">print</span>(isPowerOfFour(<span class="number">19</span>))  <span class="comment"># False</span></span><br></pre></td></tr></table></figure><h2 id="位-1-的个数【简单】"><a class="header-anchor" href="#位-1-的个数【简单】"></a>位 1 的个数【简单】</h2><div class="tag link"><a class="link-card" title="191. 位1的个数" href="https://leetcode-cn.com/problems/number-of-1-bits/"><div class="left"><img src="https://cdn.jsdelivr.net/gh/halo-blog/cdn-blog-img-b@master/img/leetcodeicon.svg"/></div><div class="right"><p class="text">191. 位1的个数</p><p class="url">https://leetcode-cn.com/problems/number-of-1-bits/</p></div></a></div><h3 id="题目描述-v3"><a class="header-anchor" href="#题目描述-v3"></a>题目描述</h3><p>编写一个函数，输入是一个无符号整数（以二进制串的形式），返回其二进制表达式中数字位数为 ‘1’ 的个数（也被称为汉明重量）。</p><div class="tabs" id="位1的个数"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#位1的个数-1">示例 1</button></li><li class="tab"><button type="button" data-href="#位1的个数-2">示例 2</button></li><li class="tab"><button type="button" data-href="#位1的个数-3">示例 3</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="位1的个数-1"><p>输入：<code>00000000000000000000000000001011</code></p><p>输出：<code>3</code></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="位1的个数-2"><p>输入：<code>00000000000000000000000010000000</code></p><p>输出：<code>1</code></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="位1的个数-3"><p>输入：<code>11111111111111111111111111111101</code></p><p>输出：<code>31</code></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h3 id="字符串题解"><a class="header-anchor" href="#字符串题解"></a>字符串题解</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># python 骚操作</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hammingWeight</span>(<span class="params">n</span>):</span></span><br><span class="line">    <span class="comment"># bin() 返回一个整数 int 或者长整数 long int 的二进制表示。</span></span><br><span class="line">    <span class="comment"># print(bin(n))</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">bin</span>(n).count(<span class="string">&#x27;1&#x27;</span>)</span><br></pre></td></tr></table></figure><h3 id="位运算题解"><a class="header-anchor" href="#位运算题解"></a>位运算题解</h3><p>在 Java 中 <code>Integer.bitCount()</code> 方法用于统计二进制中 1 的个数，其源码如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">bitCount</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// HD, Figure 5-2</span></span><br><span class="line">    i = i - ((i &gt;&gt;&gt; <span class="number">1</span>) &amp; <span class="number">0x55555555</span>);</span><br><span class="line">    i = (i &amp; <span class="number">0x33333333</span>) + ((i &gt;&gt;&gt; <span class="number">2</span>) &amp; <span class="number">0x33333333</span>);</span><br><span class="line">    i = (i + (i &gt;&gt;&gt; <span class="number">4</span>)) &amp; <span class="number">0x0f0f0f0f</span>;</span><br><span class="line">    i = i + (i &gt;&gt;&gt; <span class="number">8</span>);</span><br><span class="line">    i = i + (i &gt;&gt;&gt; <span class="number">16</span>);</span><br><span class="line">    <span class="keyword">return</span> i &amp; <span class="number">0x3f</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>&gt;&gt;&gt;</code> 表示无符号右移</li><li><code>&amp;</code> 与运算，当两位同时为“1”，结果才为“1”，否则为 0</li></ul><p>代码中的十六进制数的二进制表示如下：</p><table><thead><tr><th>原文</th><th>二进制</th></tr></thead><tbody><tr><td><code>0x55555555</code></td><td><code>01010101 01010101 01010101 01010101</code></td></tr><tr><td><code>0x33333333</code></td><td><code>00110011 00110011 00110011 00110011</code></td></tr><tr><td><code>0x0f0f0f0f</code></td><td><code>00001111 00001111 00001111 00001111</code></td></tr><tr><td><code>0x3f</code></td><td><code>00000000 00000000 00000000 11111111</code></td></tr></tbody></table><p>如果把这些二进制序列看作一个循环的周期序列的话，那么：</p><ul><li>第一个序列的周期是 2，每个周期是 01；</li><li>第二个序列的周期是 4，每个周期是 0011；</li><li>第三个序列的周期是 8，每个周期是 00001111；</li><li>第四个序列的周期是 16，每个周期是 11111111。</li></ul><p>原理是：先两个两个一组，求二进制 1 的个数，并且用两位二进制存储在原处，然后四个四个一组，求二进制位 1 的个数，再把它存储以 4 位二进制到原处。以此类推直到计算完成。</p><p><a href="https://segmentfault.com/a/1190000015763941">算法原型</a>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">bitCount</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123;</span><br><span class="line">    i = (i &amp; <span class="number">0x55555555</span>) + ((i &gt;&gt;&gt; <span class="number">1</span>) &amp; <span class="number">0x55555555</span>);</span><br><span class="line">    i = (i &amp; <span class="number">0x33333333</span>) + ((i &gt;&gt;&gt; <span class="number">2</span>) &amp; <span class="number">0x33333333</span>);</span><br><span class="line">    i = (i &amp; <span class="number">0x0f0f0f0f</span>) + ((i &gt;&gt;&gt; <span class="number">4</span>) &amp; <span class="number">0x0f0f0f0f</span>);</span><br><span class="line">    i = (i &amp; <span class="number">0x00ff00ff</span>) + ((i &gt;&gt;&gt; <span class="number">8</span>) &amp; <span class="number">0x00ff00ff</span>);</span><br><span class="line">    i = (i &amp; <span class="number">0x0000ffff</span>) + ((i &gt;&gt;&gt; <span class="number">16</span>) &amp; <span class="number">0x0000ffff</span>);</span><br><span class="line">    <span class="keyword">return</span> i;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>767 的二进制中的 1 的位数计算过程：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">          二进制                       十进制</span><br><span class="line">1  0   1  1   1  1   1  1   1  1     10 11 11 11 11</span><br><span class="line"> 01     10     10     10     10       1 2  2  2  2</span><br><span class="line">         \     &#x2F;       \     &#x2F;           \&#x2F;    \&#x2F;</span><br><span class="line"> 01       0100           0100         1   4    4</span><br><span class="line">               \       &#x2F;                   \  &#x2F;</span><br><span class="line"> 01               1000                1      8</span><br><span class="line">     \          &#x2F;                       \   &#x2F;</span><br><span class="line">         1001                             9</span><br></pre></td></tr></table></figure><!-- 这里先模拟代码执行一遍：假设 `i = 5`，对应的二进制表示为 `0b0101`（1）`i = i - ((i >>> 1) & 0x55555555);`+ `i >>> 1` 的结果为 `0b0010` 等于 2+ `2 & 0x55555555` 等于 `0b0010 & 0b0101 = 0b0000` 十进制结果为 0 + `i - 0b0000` 结果等于 `0b0101`，即第一段代码运行后 `i = 0b0101`（2）`i = (i & 0x33333333) + ((i >>> 2) & 0x33333333);`+ `i & 0x33333333` 等于 `0b0101 & 0b0011 = 0b0001`+ `i >>> 2` 等于 `0b0001`+ `((i >>> 2) & 0x33333333)` 等于 `0b0001 & 0b0011 = 0b0001`+ `(i & 0x33333333) + ((i >>> 2) & 0x33333333)` 等于 `0b0001 + 0b0001 = 0b0010`（3）`i = (i + (i >>> 4)) & 0x0f0f0f0f;`+ `(i >>> 4)` 等于 `0b0000`+ `(i + (i >>> 4))` 等于 `0b0010`+ `(i + (i >>> 4)) & 0x0f0f0f0f` 等于 `0b0010 & 0b1111 = 0b0010`（4）`i = i + (i >>> 8);` 和 `i = i + (i >>> 16);` 结果都是 `0b0010`（5）`i & 0x3f` 等于 `0b0010 & 0b1111 = 0b0010` 等于十进制的 2，即求得 5 的二进制表示中有 2 个 1。 --><p>如果以 <code>0b11111111</code> 为例可以看到每一步的变化</p><ul><li><code>i = i - ((i &gt;&gt;&gt; 1) &amp; 0x55555555);</code> 运算完后 <code>i = 0b10101010</code> 。</li><li><code>i = (i &amp; 0x33333333) + ((i &gt;&gt;&gt; 2) &amp; 0x33333333);</code> 运算完后 <code>i = 0b01000100</code>。</li><li><code>i = (i + (i &gt;&gt;&gt; 4)) &amp; 0x0f0f0f0f;</code> 运算完后 <code>i = 0b00001000</code>。</li><li><code>i = i + (i &gt;&gt;&gt; 8);</code> 运算完后 <code>i = 0b00001000</code>。</li><li><code>i = i + (i &gt;&gt;&gt; 16);</code> 运算完后 <code>i = 0b00001000</code>。</li><li><code>i &amp; 0x3f</code> 返回 <code>0b00001000</code> 等于 8</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;2-的幂【简单】&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#2-的幂【简单】&quot;&gt;&lt;/a&gt;2 的幂【简单】&lt;/h2&gt;
&lt;div class=&quot;tag link&quot;&gt;&lt;a class=&quot;link-card&quot; title=&quot;231. 2 的幂&quot; h</summary>
      
    
    
    
    <category term="LeetCode" scheme="https://halo123.top/categories/LeetCode/"/>
    
    
    <category term="LeetCode" scheme="https://halo123.top/tags/LeetCode/"/>
    
    <category term="位运算" scheme="https://halo123.top/tags/%E4%BD%8D%E8%BF%90%E7%AE%97/"/>
    
  </entry>
  
  <entry>
    <title>千种植物转录组计划</title>
    <link href="https://halo123.top/2021/05/29/Biology/%E5%8D%83%E7%A7%8D%E6%A4%8D%E7%89%A9%E8%BD%AC%E5%BD%95%E7%BB%84%E8%AE%A1%E5%88%92/"/>
    <id>https://halo123.top/2021/05/29/Biology/%E5%8D%83%E7%A7%8D%E6%A4%8D%E7%89%A9%E8%BD%AC%E5%BD%95%E7%BB%84%E8%AE%A1%E5%88%92/</id>
    <published>2021-05-29T09:40:01.000Z</published>
    <updated>2021-06-07T09:16:23.398Z</updated>
    
    <content type="html"><![CDATA[<p>原文链接：<a href="https://www.nature.com/articles/s41586-019-1693-2">https://www.nature.com/articles/s41586-019-1693-2</a></p><p style="text-align:center; font-size:30px; ">One thousand plant transcriptomes and the phylogenomics of green plants</p><h2 id="Abstract"><a class="header-anchor" href="#Abstract"></a>Abstract</h2><p>Green plants (Viridiplantae) include around 450,000–500,000 species <sup>[<a href="#ref-CR1">1</a>,<a href="#ref-CR2">2</a>]</sup> of great diversity and have important roles in terrestrial and aquatic ecosystems. Here, as part of the One Thousand Plant Transcriptomes Initiative, we sequenced the vegetative transcriptomes of 1,124 species that span the diversity of plants in a broad sense (Archaeplastida), including green plants (Viridiplantae), glaucophytes (Glaucophyta) and red algae (Rhodophyta). Our analysis provides a robust phylogenomic framework for examining the evolution of green plants. Most inferred species relationships are well supported across multiple species tree and supermatrix analyses, but discordance among plastid and nuclear gene trees at a few important nodes highlights the complexity of plant genome evolution, including polyploidy, periods of rapid speciation, and extinction. Incomplete sorting of ancestral variation, polyploidization and massive expansions of gene families punctuate the evolutionary history of green plants. Notably, we find that large expansions of gene families preceded the origins of green plants, land plants and vascular plants, whereas whole-genome duplications are inferred to have occurred repeatedly throughout the evolution of flowering plants and ferns. The increasing availability of high-quality plant genome sequences and advances in functional genomics are enabling research on genome evolution across the green tree of life.</p><blockquote><p>绿色植物（Viridiplanta）约有 45 万至 50 万不同物种，它们在陆地和水生生态系统中起着重要的作用。作为“千种植物转录组计划”的一部分，我们对泛植物界中的 1124 种物种的转录组进行了测序，包括绿色植物（Viridiplanta）、灰藻门（Glaucophyta）和红藻门（Rhodophyta）。我们的分析为研究绿色植物的进化提供了一个健壮的系统基因组框架。在大多数推测的物种关系、跨多个物种树和超级矩阵的分析中得到了很好的支持。但在质体之间和核基因树的几个重要的节点之间产生了矛盾，凸显出了植物基因组进化的复杂，其中包括多倍性、物种快速形成和灭绝。祖先变异的不完全谱系分选、多倍体化和基因家族的大规模扩张时不时打断绿色植物进化史。尤其，我们发现，尽管在开花植物和蕨类植物的进化过程中推测发生了多次的全基因组的复制，但大规模的基因家族扩张是要早于绿色植物、陆生植物和维管植物的起源。此外，测序得到越来越多的高质量植物基因组序列和功能基因组学的进步，使得研究跨越绿色生命之树的基因组进化成为可能。</p></blockquote><h2 id="Main"><a class="header-anchor" href="#Main"></a>Main</h2><p>Viridiplantae comprise an estimated 450,000–500,000 species<sup>[<a href="#ref-CR1">1</a>,<a href="#ref-CR2">2</a>]</sup>, encompass a high level of diversity and evolutionary timescales<sup>[<a href="#ref-CR3">3</a>]</sup>, and have important roles in all terrestrial and most aquatic ecosystems. This ecological diversity derives from developmental, morphological and physiological innovations that enabled the colonization and exploitation of novel and emergent habitats. These innovations include multicellularity and the development of the plant cuticle, protected embryos, stomata, vascular tissue, roots, ovules and seeds, and flowers and fruit (Fig. 1). Thus, plant evolution ultimately influenced environments globally and created a cascade of diversity in other lineages that span the tree of life. Plant diversity has also fuelled agricultural innovations and growth in the human population<sup>[<a href="#ref-CR4">4</a>]</sup>.</p><blockquote><p>绿色植物约有 45 万至 50 万种，拥有丰富的多样性和长时间的进化历程，并在所有陆地和大多数水生生态系统中发挥着重要的作用。这种生态多样性源于进化，形态和生理上的改变，使得移植、扩张、发展新的栖息地成为可能。这些改变包括多细胞化，植物角质层进化，保护胚胎，气孔，维管组织，根系，胚珠，种子以及花和果实（图片 1）。因此，植物进化最终影响了全球的生态环境，并贯穿了生命之树，创造了许多不同的世系。</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/halo-blog/cdn-blog-img-c@master/Fig1.png" alt="Fig. 1: Diversity within the Viridiplantae."></p><div class="tabs" id="fig1"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#fig1-1">Description</button></li><li class="tab"><button type="button" data-href="#fig1-2">描述</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="fig1-1"><p><strong>a</strong>–<strong>e</strong>, Green algae. <strong>a</strong>, <em>Acetabularia</em> sp. (Ulvophyceae). b, <em>Stephanosphaera pluvialis</em> (Chlorophyceae). c, <em>Botryococcus</em> sp. (Trebouxiophyceae). d, <em>Chara</em> sp. (Charophyceae). e, <em>‘Spirotaenia’</em> sp. (taxonomy under review) (Zygnematophyceae). f–p, Land plants. f, Notothylas orbicularis (Anthocerotophyta (hornwort)). g, Conocephalum conicum (Marchantiophyta (thalloid liverwort)). h, Sphagnum sp. (Bryophyta (moss)). i, Dendrolycopodium obscurum (Lycopodiophyta (club moss)). j, Equisetum telmateia (Polypodiopsida, Equisetidae (horsetail)). k, Parablechnum schiedeanum (Polypodiopsida, Polypodiidae (leptosporangiate fern)). l, Ginkgo biloba (Ginkgophyta). m, Pseudotsuga menziesii (Pinophyta (conifer)). n, Welwitschia mirabilis (Gnetophyta). o, Bulnesia arborea (Angiospermae, eudicot, rosid). p, Paphiopedilum lowii (Angiospermae, monocot, orchid). a, Photograph reproduced with permission of Thieme Verlag, Stuttgart66. b–e, Photographs courtesy of M. Melkonian. f–j, l–n, p, Photographs courtesy of D.W.S. k, Photograph courtesy of R. Moran. o, Photograph courtesy of W. Judd.</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="fig1-2"><p>a-e，绿藻类。a，</p><p>TODO</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><p>Phylogenomic approaches are now widely used to resolve species relationships<sup>[<a href="#ref-CR5">5</a>]</sup> as well as the evolution of genomes, gene families and gene function<sup>[<a href="#ref-CR6">6</a>]</sup>. We used mostly vegetative transcriptomes for a broad taxonomic sampling of 1,124 species together with 31 published genomes to infer species relationships and characterize the relative timing of organismal, molecular and functional diversification across green plants.</p><blockquote><p>系统基因组学方法现在被广泛用于解决物种关系、基因组的进化、基因家族和基因功能。我们利用从 1124 种植物中通过分类学的抽样，获得样品的植物转录组，并结合 31 个已发表的基因组来推断物种关系，描绘出绿色植物的有机体、分子和功能多样性的诞生的相对时间。</p></blockquote><p>We evaluated gene history discordance among single-copy genes. This is expected in the face of rapid species diversification, owing to incomplete sorting of ancestral variation between speciation events7. Hybridization8, horizontal gene transfer9, gene loss following gene and genome duplications10 and estimation error can also contribute to gene-tree discordance. Nevertheless, through rigorous gene and species tree analyses, we derived robust species tree estimates (Fig. 2 and Supplementary Figs. 1–3). Gene-family expansions and genome duplications are recognized sources of variation for the evolution of gene function and biological innovations11,12. We inferred the timing of ancient genome duplications and large gene-family expansions. Our findings suggest that extensive gene-family expansions or genome duplications preceded the evolution of major innovations in the history of green plants.</p><blockquote><p>我们评估了单拷贝基因之间的基因史的不一致性。这是预期在面对快速物种多样化，由于不完整的分类祖先变异之间的物种事件</p></blockquote><h2 id="Integrated-analysis-of-genome-evolution"><a class="header-anchor" href="#Integrated-analysis-of-genome-evolution"></a>Integrated analysis of genome evolution</h2><h2 id="Primary-acquisition-of-the-plastid"><a class="header-anchor" href="#Primary-acquisition-of-the-plastid"></a>Primary acquisition of the plastid</h2><h2 id="The-history-of-Viridiplantae"><a class="header-anchor" href="#The-history-of-Viridiplantae"></a>The history of Viridiplantae</h2><h2 id="Synthesis"><a class="header-anchor" href="#Synthesis"></a>Synthesis</h2><h2 id="Methods"><a class="header-anchor" href="#Methods"></a>Methods</h2><h2 id="Data-availability"><a class="header-anchor" href="#Data-availability"></a>Data availability</h2><h2 id="Code-availability"><a class="header-anchor" href="#Code-availability"></a>Code availability</h2><h2 id="References"><a class="header-anchor" href="#References"></a>References</h2><ol><li id="ref-CR1">Corlett, R. T. Plant diversity in a changing world: status, trends, and conservation needs. Plant Divers. 38, 10–16 (2016). </li><li id="ref-CR2">Lughadha, E. N. et al. Counting counts: revised estimates of numbers of accepted species of flowering plants, seed plants, vascular plants and land plants with a review of other recent estimates. Phytotaxa 272, 82–88 (2016).</li><li id="ref-CR3">Kumar, S., Stecher, G., Suleski, M. & Hedges, S. B. TimeTree: a resource for timelines, timetrees, and divergence times. Mol. Biol. Evol. 34, 1812–1819 (2017).</li><li id="ref-CR4">Schery, R. W. Plants for Man 2nd edn (Prentice-Hall, 1972).</li><!-- <li id="ref-CR2"></li> --><!-- <li id="ref-CR2"></li> --><!-- <li id="ref-CR2"></li> --><!-- <li id="ref-CR2"></li> --><!-- <li id="ref-CR2"></li> --><!-- <li id="ref-CR2"></li> --><!-- <li id="ref-CR2"></li> --><!-- <li id="ref-CR2"></li> --><!-- <li id="ref-CR2"></li> --><!-- <li id="ref-CR2"></li> --><!-- <li id="ref-CR2"></li> --><!-- <li id="ref-CR2"></li> --><!-- <li id="ref-CR2"></li> --></ol><h2 id="Acknowledgements"><a class="header-anchor" href="#Acknowledgements"></a>Acknowledgements</h2><h2 id="Author-information"><a class="header-anchor" href="#Author-information"></a>Author information</h2><h2 id="Ethics-declarations"><a class="header-anchor" href="#Ethics-declarations"></a>Ethics declarations</h2><h2 id="Additional-information"><a class="header-anchor" href="#Additional-information"></a>Additional information</h2><h2 id="Extended-data-figures-and-tables"><a class="header-anchor" href="#Extended-data-figures-and-tables"></a>Extended data figures and tables</h2><h2 id="Supplementary-information"><a class="header-anchor" href="#Supplementary-information"></a>Supplementary information</h2><h2 id="Rights-and-permissions"><a class="header-anchor" href="#Rights-and-permissions"></a>Rights and permissions</h2><h2 id="About-this-article"><a class="header-anchor" href="#About-this-article"></a>About this article</h2><h2 id="Further-reading"><a class="header-anchor" href="#Further-reading"></a>Further reading</h2><h2 id="Comments"><a class="header-anchor" href="#Comments"></a>Comments</h2>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;原文链接：&lt;a href=&quot;https://www.nature.com/articles/s41586-019-1693-2&quot;&gt;https://www.nature.com/articles/s41586-019-1693-2&lt;/a&gt;&lt;/p&gt;
&lt;p style=&quot;text</summary>
      
    
    
    
    <category term="生物学" scheme="https://halo123.top/categories/%E7%94%9F%E7%89%A9%E5%AD%A6/"/>
    
    
    <category term="植物学" scheme="https://halo123.top/tags/%E6%A4%8D%E7%89%A9%E5%AD%A6/"/>
    
    <category term="进化学" scheme="https://halo123.top/tags/%E8%BF%9B%E5%8C%96%E5%AD%A6/"/>
    
  </entry>
  
  <entry>
    <title>棘皮动物的进化</title>
    <link href="https://halo123.top/2021/05/29/Biology/%E6%A3%98%E7%9A%AE%E5%8A%A8%E7%89%A9%E7%9A%84%E8%BF%9B%E5%8C%96/"/>
    <id>https://halo123.top/2021/05/29/Biology/%E6%A3%98%E7%9A%AE%E5%8A%A8%E7%89%A9%E7%9A%84%E8%BF%9B%E5%8C%96/</id>
    <published>2021-05-29T08:14:01.000Z</published>
    <updated>2021-06-15T07:25:41.636Z</updated>
    
    <content type="html"><![CDATA[<details ><summary> 主要参考资料 </summary>              <div class='content'>              <div class="tag link"><a class="link-card" title="寒武纪的余烬：棘皮动物篇（上）" href="https://zhuanlan.zhihu.com/p/51287717"><div class="left"><img src="https://cdn.jsdelivr.net/gh/halo-blog/cdn-blog-img-b@master/img/知乎icon.png"/></div><div class="right"><p class="text">寒武纪的余烬：棘皮动物篇（上）</p><p class="url">https://zhuanlan.zhihu.com/p/51287717</p></div></a></div><div class="tag link"><a class="link-card" title="寒武纪的余烬：棘皮动物篇（下）" href="https://zhuanlan.zhihu.com/p/51585435"><div class="left"><img src="https://cdn.jsdelivr.net/gh/halo-blog/cdn-blog-img-b@master/img/知乎icon.png"/></div><div class="right"><p class="text">寒武纪的余烬：棘皮动物篇（下）</p><p class="url">https://zhuanlan.zhihu.com/p/51585435</p></div></a></div><div class="tag link"><a class="link-card" title="异界来客 0：后口动物的征途" href="https://zhuanlan.zhihu.com/p/27155535"><div class="left"><img src="https://cdn.jsdelivr.net/gh/halo-blog/cdn-blog-img-b@master/img/知乎icon.png"/></div><div class="right"><p class="text">异界来客 0：后口动物的征途</p><p class="url">https://zhuanlan.zhihu.com/p/27155535</p></div></a></div><div class="tag link"><a class="link-card" title="异界来客１：绽放的奇葩" href="https://zhuanlan.zhihu.com/p/27155622"><div class="left"><img src="https://cdn.jsdelivr.net/gh/halo-blog/cdn-blog-img-b@master/img/知乎icon.png"/></div><div class="right"><p class="text">异界来客１：绽放的奇葩</p><p class="url">https://zhuanlan.zhihu.com/p/27155622</p></div></a></div><div class="tag link"><a class="link-card" title="异界来客２：亦步亦趋" href="https://zhuanlan.zhihu.com/p/27155675"><div class="left"><img src="https://cdn.jsdelivr.net/gh/halo-blog/cdn-blog-img-b@master/img/知乎icon.png"/></div><div class="right"><p class="text">异界来客２：亦步亦趋</p><p class="url">https://zhuanlan.zhihu.com/p/27155675</p></div></a></div><div class="tag link"><a class="link-card" title="异界来客３：爬起来，走两步" href="https://zhuanlan.zhihu.com/p/27155812"><div class="left"><img src="https://cdn.jsdelivr.net/gh/halo-blog/cdn-blog-img-b@master/img/知乎icon.png"/></div><div class="right"><p class="text">异界来客３：爬起来，走两步</p><p class="url">https://zhuanlan.zhihu.com/p/27155812</p></div></a></div><div class="tag link"><a class="link-card" title="异界来客４：异界妖花" href="https://zhuanlan.zhihu.com/p/27155892"><div class="left"><img src="https://cdn.jsdelivr.net/gh/halo-blog/cdn-blog-img-b@master/img/知乎icon.png"/></div><div class="right"><p class="text">异界来客４：异界妖花</p><p class="url">https://zhuanlan.zhihu.com/p/27155892</p></div></a></div><div class="tag link"><a class="link-card" title="异界来客５：群魔乱舞" href="https://zhuanlan.zhihu.com/p/27155947"><div class="left"><img src="https://cdn.jsdelivr.net/gh/halo-blog/cdn-blog-img-b@master/img/知乎icon.png"/></div><div class="right"><p class="text">异界来客５：群魔乱舞</p><p class="url">https://zhuanlan.zhihu.com/p/27155947</p></div></a></div><div class="tag link"><a class="link-card" title="异界来客 6：刚柔并济" href="https://zhuanlan.zhihu.com/p/352015660"><div class="left"><img src="https://cdn.jsdelivr.net/gh/halo-blog/cdn-blog-img-b@master/img/知乎icon.png"/></div><div class="right"><p class="text">异界来客 6：刚柔并济</p><p class="url">https://zhuanlan.zhihu.com/p/352015660</p></div></a></div><div class="tag link"><a class="link-card" title="异界来客7：Alura Une" href="https://zhuanlan.zhihu.com/p/356406403"><div class="left"><img src="https://cdn.jsdelivr.net/gh/halo-blog/cdn-blog-img-b@master/img/知乎icon.png"/></div><div class="right"><p class="text">异界来客7：Alura Une</p><p class="url">https://zhuanlan.zhihu.com/p/356406403</p></div></a></div>              </div>            </details><details ><summary> 其他参考资料 </summary>              <div class='content'>              <div class="tag link"><a class="link-card" title="【维基百科】棘皮动物" href="https://en.wikipedia.org/wiki/Echinoderm"><div class="left"><img src="https://cdn.jsdelivr.net/gh/halo-blog/cdn-blog-icon-a@master/wiki.68zrhewkzwk0.png"/></div><div class="right"><p class="text">【维基百科】棘皮动物</p><p class="url">https://en.wikipedia.org/wiki/Echinoderm</p></div></a></div><div class="tag link"><a class="link-card" title="【马里兰大学古生物学】棘皮动物 1" href="https://www.geol.umd.edu/~tholtz/G331/lectures/331echin1.html"><div class="left"><img src="https://cdn.jsdelivr.net/gh/halo-blog/cdn-blog-img-a@master/img/网站.svg"/></div><div class="right"><p class="text">【马里兰大学古生物学】棘皮动物 1</p><p class="url">https://www.geol.umd.edu/~tholtz/G331/lectures/331echin1.html</p></div></a></div><div class="tag link"><a class="link-card" title="【马里兰大学古生物学】棘皮动物 2" href="https://www.geol.umd.edu/~tholtz/G331/lectures/331echin2.html"><div class="left"><img src="https://cdn.jsdelivr.net/gh/halo-blog/cdn-blog-img-a@master/img/网站.svg"/></div><div class="right"><p class="text">【马里兰大学古生物学】棘皮动物 2</p><p class="url">https://www.geol.umd.edu/~tholtz/G331/lectures/331echin2.html</p></div></a></div><div class="tag link"><a class="link-card" title="【鬼谷说】棘皮动物：六亲不认的演化步伐" href="https://www.bilibili.com/video/BV1Nb411h7bc"><div class="left"><img src="https://cdn.jsdelivr.net/gh/halo-blog/cdn-blog-img-b@master/img/bilibiliIcon.svg"/></div><div class="right"><p class="text">【鬼谷说】棘皮动物：六亲不认的演化步伐</p><p class="url">https://www.bilibili.com/video/BV1Nb411h7bc</p></div></a></div><div class="tag link"><a class="link-card" title="「派大星」入选「十大海洋新物种」名单" href="https://www.zhihu.com/question/450637881"><div class="left"><img src="https://cdn.jsdelivr.net/gh/halo-blog/cdn-blog-img-b@master/img/知乎icon.png"/></div><div class="right"><p class="text">「派大星」入选「十大海洋新物种」名单</p><p class="url">https://www.zhihu.com/question/450637881</p></div></a></div>              </div>            </details><div class="tag link"><a class="link-card" title="【网站推荐】可视化进化树0" href="https://www.evogeneao.com/en/explore/tree-of-life-explorer"><div class="left"><img src="https://cdn.jsdelivr.net/gh/halo-blog/cdn-blog-img-a@master/img/网站.svg"/></div><div class="right"><p class="text">【网站推荐】可视化进化树0</p><p class="url">https://www.evogeneao.com/en/explore/tree-of-life-explorer</p></div></a></div><p><img src="https://cdn.jsdelivr.net/gh/halo-blog/cdn-blog-img-d@master/image.24fzifdt0w74.png" alt="进化树"></p><p>该网站通过点击两个物种，可以直观的看到两个物种的关系。</p><h2 id="棘皮动物-Key-Points"><a class="header-anchor" href="#棘皮动物-Key-Points"></a>棘皮动物 Key Points</h2><ul><li>现存的棘皮动物约有 7000 种，已灭绝的物种约有 13000 种，它们的栖息地从浅海到数千米的深海都有广泛分布。</li><li>棘皮动物和脊索动物同属于后口动物（Deuterostomes），即在胚胎的原肠胚期其原口形成为肛门而与之相对的后口形成嘴部的动物。</li></ul><p><img src="https://cdn.jsdelivr.net/gh/halo-blog/cdn-blog-img-d@master/image.6y77h6fg2q80.png" alt="原口动物和后口动物"></p><ul><li>棘皮动物属于无脊椎动物中的高等门类，同时也是后口动物中比较原始的类群，是生物进化史中极为重要的一环</li><li>棘皮动物只存在海洋中，没有涉足陆地和淡水，且几乎都是底栖动物。</li><li>最早鉴定的棘皮动物在寒武纪</li><li>棘皮动物深海和浅海，包括其他生物稀少的区域都有分布，很少有其他群落如此丰富。</li><li>在地质学上，棘皮动物的价值在于它们的骨化骨骼，有的石灰石地层全部由分解了的海百合骨骼构成。可以为了解地质环境提供有价值的线索。</li><li>大多数棘皮动物能够无性繁殖，再生组织、器官和四肢；在某些情况下，它们可以从单个肢体完成再生，如下图所示。</li></ul><p><img src="https://cdn.jsdelivr.net/gh/halo-blog/cdn-blog-img-d@master/image.5b3zosjzwa80.png" alt="断臂再生"></p><ul><li>由于棘皮动物成体次辐射对称，例如海星多出几条或少几条腕并不会对其生命产生太多影响。</li><li>棘皮动物线粒体基因排列顺序相当保守，海参纲和海胆纲间几乎完全一致，二者与海星纲间仅存在一个大片段的倒位，海百合纲中的基因重排也较为有限，仅在蛇尾纲内出现了较多的基因重排现象</li><li>古生物证据却显示，棘皮动物不同纲之间存在有 450 ～ 550 百万年的分化距离</li></ul><h3 id="分类和演化"><a class="header-anchor" href="#分类和演化"></a>分类和演化</h3><p>在胚胎的早期发育过程中，在后口动物中，胚孔（第一个形成的开口）变成了肛门，而在原口动物中，胚孔变成了嘴。在后口动物中，口发育较晚，位于囊胚的另一端，与囊胚孔相对，而肠道将两者连接起来棘皮动物的幼虫具有双侧对称，但在变态过程中，当它们的身体重组并发展出棘皮动物特有的辐射对称。</p><p>成年棘皮动物的特征是拥有一个水管系统和一个由胶原纤维网连接的小骨组成的钙质内骨骼。骨片可以形成棘、叉棘、刺等结构，突出于体表之外，使体表粗糙不平。不同形式的棘行使防卫、清除体表沉积物等功能。故称之为棘皮动物。</p><p>目前现存的棘皮动物门（Echinodermata）下有以下 5 纲：</p><ul><li>海星纲（Asteroidea）；</li><li>蛇尾纲（Ophiuroidea）；</li><li>海胆纲（Echinoidea）；</li><li>海参纲（Holothuroidea）；</li><li>海百合纲（Crinoidea）；</li></ul><p><img src="https://cdn.jsdelivr.net/gh/halo-blog/cdn-blog-img-c@master/image.6rj5hl0h26c0.png" alt="棘皮动物"></p><h4 id="系统发生"><a class="header-anchor" href="#系统发生"></a>系统发生</h4><p>早期棘皮动物的系统发生不确定，主要是不确定蛇尾纲是要分到海星亚门中还是海胆亚门中。后来，2014 年对所有棘皮动物的 219 个基因进行了分析，得出了如下的系统发育树【<a href="https://doi.org/10.1098/rspb.2014.0479">DOI 链接</a>】。2015 年，一项对 23 种棘皮动物的 RNA 转录组的独立分析得出了同一棵树，如下图所示【<a href="https://doi.org/10.1371/journal.pone.0119627">DOI 链接</a>】。</p><p><img src="https://cdn.jsdelivr.net/gh/halo-blog/cdn-blog-img-d@master/image.5x76pwdj7hg0.png" alt="棘皮动物的系统发生树"></p><h4 id="化石历史"><a class="header-anchor" href="#化石历史"></a>化石历史</h4><p>已知最古老的棘皮动物化石可能是来自澳大利亚前寒武纪的 <em>Arkarua</em>。它是一个盘状的化石，边缘有放射状的脊，中央有一个有放射状线标记的五角形凹陷。然而，没有立体或内部结构显示水管系统的存在，鉴定结果不确定。</p><p><img src="https://cdn.jsdelivr.net/gh/halo-blog/cdn-blog-img-d@master/Arkarua_adami_pennetta.3ax8b8efiym0.png" alt="Arkarua_adami_pennetta"></p><p>最早被普遍接受的棘皮动物出现在下寒武纪早期，棘皮动物留下了大量的化石记录。有一种假说认为，所有棘皮动物的祖先都是简单的、能动的、两侧对称的动物，有嘴、肠和肛门。这种祖先采用了附着的生活方式和悬浮进食，并发展了辐射对称，因为这对这种生存更有利。所有的棘皮动物的幼虫直到现在都是两侧对称的，而且在变态时都发育成径向对称。海星和海百合在变成成体的过程中仍然附着在海床上。</p><p>第一批棘皮动物后来演化出了可以自由活动的群体。棘皮动物早期演化出具有坚硬的内骨骼板和供取食的纤毛状槽。古生代棘皮动物，附着于基质上，口腔面朝上。嘴朝上可能是最原始的状态，在某个阶段，除了海百合的其他大部分的棘皮动物，都改变成为了嘴朝下的姿势。在此之前，腕可能有一个进食功能，就像现在海百合的功能一样。</p><p><img src="https://cdn.jsdelivr.net/gh/halo-blog/cdn-blog-img-d@master/%E5%9B%BE%E7%89%871.mg0f1h8wnkw.jpg" alt="早期的几类棘皮动物"></p><blockquote><p>图片引用自 Deciphering the early evolution of echinoderms with Cambrian fossils【<a href="http://doi.org/10.1111/pala.12138">DOI 链接</a>】</p></blockquote><h2 id="棘皮动物门介绍"><a class="header-anchor" href="#棘皮动物门介绍"></a>棘皮动物门介绍</h2><h3 id="生物学特征"><a class="header-anchor" href="#生物学特征"></a>生物学特征</h3><blockquote><p>参考：许崇任《动物生物学》（第 2 版）</p></blockquote><p>棘皮动物成体五辐射对称，幼体全部两侧对称。身体表面具有棘、刺，突出表体之外。一部分体腔形成了特殊的水管系统、血系统和围血系统。骨骼全部起源于中胚层，由钙化的骨片组成。神经系统没有神经节和中枢神经系统。</p><p>由于棘皮动物为辐射卵裂，以肠腔法形成了中胚层和真体腔，原胚孔最终形成了成体的肛门，成体的口在原肠孔相对的一端另外形成，其发育过程与原始的脊索动物类似，属于演化中最原始的后口动物。</p><h4 id="外部形态"><a class="header-anchor" href="#外部形态"></a>外部形态</h4><p>棘皮动物的成体是五辐射对称（或是 5 的倍数辐射对称），即沿中轴可以将身体分为 5 个相等的部分。由于它们的幼虫期是两侧对称的，因此推测成体的五辐射对称应为次生性的，与腔肠动物原始的辐射对称形式完全不同。</p><p><img src="https://cdn.jsdelivr.net/gh/halo-blog/cdn-blog-img-d@master/%E5%9B%BE%E7%89%872.26vf7j26v1a8.png" alt="海星幼虫与从幼虫中脱落的海星"></p><blockquote><p>海星幼虫与从幼虫中脱落的海星</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/halo-blog/cdn-blog-img-d@master/Haeckel_Asteridea_Larvae.oinaxeny2ow.jpg" alt="Haeckel_Asteridea_Larvae"></p><blockquote><p>海星的幼虫</p></blockquote><p>以海星为例，身体由体盘和腕构成。体盘有口的较平的一面称为口面，口面中央有口。另一面略凸称反口面，中央有肛门。腕一般有 5 条，从体盘伸出。在腕的腹面中部有一条步带沟，其中有 2 ~ 4 排管足生出，管足末端有吸盘。腕之间为间步带区，反口面有一个在间步带区的多孔的筛板。腕的顶端靠下有眼点。</p><p><img src="https://cdn.jsdelivr.net/gh/halo-blog/cdn-blog-img-d@master/Asterias_rubens,_dissection.1lif2idd80qo.svg" alt="海星的解剖示意图"></p><ol><li>幽门胃（Pyloric stomach）</li><li>肠和肛门（Intestine and anus）</li><li>直肠盲囊（Rectal sac）</li><li>石管（Stone canal）</li><li>筛板（Madreporite）</li><li>幽门盲囊（Pyloric caecum）</li><li>消化腺（Digestive glands）</li><li>贲门胃（Cardiac stomach）</li><li>生殖腺（Gonad）</li><li>辐水管（Radial canal）</li><li>步带沟（Ambulacral ridge）</li></ol><h4 id="体壁与骨骼"><a class="header-anchor" href="#体壁与骨骼"></a>体壁与骨骼</h4><p>棘皮动物的体壁由表皮层和表皮层下的结缔组织构成，称为真皮。外面是一层薄的角质层，下面是一层单纤毛的柱状上皮，柱状上皮之下是结缔组织。真皮下是肌肉层，肌肉层内为体腔膜。其他的无脊椎动物体璧不是真皮层。</p><p>棘皮动物的骨骼都起源于中胚层，称为内骨骼，是由许多钙质的骨片组成，骨片上有小孔，位于体壁的结缔组织内。骨片可以形成棘、叉棘、刺等结构，突出于体表之外，使体表粗糙不平。不同形式的棘行使防卫、清除体表沉积物等功能。另外，体壁上还有表皮和体腔上皮向外凸起形成的皮鳃， 表皮和体腔上皮上都有纤毛，分别打动水流和体腔液，进行气体交换。</p><h4 id="水管系统"><a class="header-anchor" href="#水管系统"></a>水管系统</h4><p>水管系统是一个相对封闭的管状系统，担负着棘皮动物运动的功能。海盘车的水管系统包括筛板、石管、环水管、辐水管、管足、吸盘、坛囊几个部分。环水管上有帖氏体，可能有产生体腔细胞的作用。水管系统的内壁是体腔上皮，里面充满液体。管足的外壁是纤毛上皮，与内壁的体腔上皮之间有肌肉层。水管系统内的液体与海水等渗，运动时相当于一个液压系统，使得管足可以伸缩，管足末端的吸盘可以借液压产生的真空吸附在物体上。水管的其他部分共同起着控制、协调系统内水流的作用。实验证明水管系统内的液体是不与外界交换的。</p><h4 id="血系统和围血系统"><a class="header-anchor" href="#血系统和围血系统"></a>血系统和围血系统</h4><p>棘皮动物没有专门的循环器官，但有与其他动物不同的血系统和一套围血系统。在棘皮动物发达的真体腔内充满体腔液，靠体腔上皮细胞的纤毛打动，体腔液完成营养物质的输送。血系统包括一套与水管系统相应的管道，有与辐水管平行的辐血管、与环水管平行的环血管、位于反口面的胃血管和分支，以及与石管平行的轴窦。 血系统的管道中有液体，轴窦和筛板附近的背囊均有搏动能力。包围在血系统之外还有一套围血系统，围血系统是体腔的一部分，形成围绕在血系统之外的一套窦隙。关于棘皮动物血系统和围血系统的作用目前尚了解不多</p><h4 id="消化系统"><a class="header-anchor" href="#消化系统"></a>消化系统</h4><p>棘皮动物的消化系统以海盘车为例，口面中央有一圈围口膜，之间是口，连接口的是贲门胃，贲门胃之后是幽门胃，有 5 对幽门盲囊分布在腕内，后有一短的直肠连通肛门。消化管的上皮有纤毛，腺细胞可分泌消化酶。棘皮动物有肉食性的，也有植食性的。海盘车取食双壳类时，用腕上的吸盘将壳吸住拉开，然后贲门胃翻出，包住食物，先进行初步体外消化，再吞咽回体内。消化的营养物质由幽门盲囊吸收贮存。海星纲的肛门虽然存在，但是已经丧失了机能。消化后的食物残渣仍然由口排出。海蛇尾以小动物或海底沉积物为食，以较为活动的腕送人口中，或腕上的刺和管足送入口中。海胆纲的动物有一咀嚼器，是由复杂的骨片组成，上面有 齿可以用来取食岩石上的海藻。海胆的食性复杂，可以取食小动物，也可以取食植物。它们的消化管很长，食物残渣由肛门排出。海参类为沉积取食或悬浮取食，以触手将食物送入口中。海参的消化管长度是身体的 3 ~ 4 倍，在消化管后端有 1 对分支很多的呼吸树，起呼吸的作用。海百合是悬浮取食，管足上的纤毛将黏着的食物颗粒逐渐送入口中。</p><h4 id="神经系统"><a class="header-anchor" href="#神经系统"></a>神经系统</h4><p>棘皮动物的神经系统是分散的，没有神经节和中枢神经系统。海盘车有3个神经系统，它们是外胚层起源的外神经系统（ectoneural nervous system）、中胚层起源的内神经系统（ento-neural nervous system）和下神经系统（hyponeural nervous system）。外神经系统在口面的表皮细胞下，包括围口膜边缘的1个神经环和由此神经环发出的辐神经，辐神经沿步带沟中部一直延伸到腕的末端，并发出神经到管足和坛囊。内神经系统是.上皮下神经丛在步带沟外边缘加厚形成的1对边缘神经索，发出的神经到步带骨板的肌肉上，并在体腔膜下形成神经丛，支配体壁肌肉。下神经系统也称为体腔神经，位于围血系统的体壁上，在体腔膜下。棘皮动物的感觉器官只有感光的眼点，眼点位于腕的顶端。但是棘皮动物整个表皮中有大量神经感觉细胞，除司触觉外，还能够对光和化学刺激作出反应。</p><h4 id="生殖和发育"><a class="header-anchor" href="#生殖和发育"></a>生殖和发育</h4><p>除了少数海蛇尾和海参外，棘皮动物大多是雌雄异体。如海盘车的生殖腺位于间步带区，一般为 5 对（或 5 的倍数）。生殖孔在反口面靠近腕基部的中央盘上，生殖细胞排出体外受精。受精卵是辐射卵裂，发育后经内陷法形成原肠，再由腔肠法形成中胚层和 3 对体腔囊，即前体腔囊、中体腔囊和后体腔囊。原肠胚时的胚孔最终发育成为成体的肛门，而成体的口则是在原肠孔相对的另一端形成的。棘皮动物各纲的幼虫形态不相同，但基本结构是一样的。棘皮动物的幼虫期是两侧对称的，经变态后形成了辐射对称的幼虫。例如在变态过程中，海盘车的羽腕幼虫右侧的前体腔囊和中体腔囊退化，后体腔囊形成了后来的体腔，左侧的中体腔囊形成了整个水管系统，包括环水管、辐水管以及管足，并逐渐从两侧对称成为辐射对称的形式，说明棘皮动物的五辐射对称是次生性的。</p><h3 id="棘皮动物门的分类"><a class="header-anchor" href="#棘皮动物门的分类"></a>棘皮动物门的分类</h3><p>棘皮动物全部是海洋底栖生活，广泛分布在从浅海到数千米的深海，现存 6000 多种，而化石种类则多达 20000 多种。沿海常见的海星、海蛇尾、海胆、海参等都属于棘皮动物。棘皮动物依据生活方式可分为游在亚门（Eleutherozoa，也叫游走亚门、无柄亚门或活动亚门）和有柄亚门（Pelmatozoa，也叫固着亚门）两大类。1963年，美国无脊椎动物学家巴里·费尔根据棘皮动物体内独特的水管系统，提出了新的分类方案。</p><h4 id="依据生活方式分类"><a class="header-anchor" href="#依据生活方式分类"></a>依据生活方式分类</h4><ul><li>有柄亚门（Pelmatozoa）<ul><li>海蕾纲（Blastoidea）†</li><li>海百合纲（Crinoidea）</li><li>海座星纲（Edrioasteroids）†</li></ul></li><li>游在亚门（Eleutherozoa）<ul><li>海星纲（Asteroidea）</li><li>海胆纲（Echinoidea）</li><li>海参纲（Holothuroidea）</li><li>蛇尾纲（Ophiuroidea）</li></ul></li></ul><blockquote><p>†表示已灭绝</p></blockquote><p><font color="#faa755">有柄亚门</font>：附着或固着生活，在生活史中至少有一个时期具固着用的柄。</p><ul><li>海百合纲（Crinoidea）：海百合纲是棘皮动物中最原始的一类，以柄营固着生活（海百合），或无柄营自由生活（海羽星）。5个腕的基部多分支，使身体看似杯状，但口面和反口面均在同一个面。现存 630 余种。</li></ul><hr><p><font color="#faa755">游在亚门</font>：自由生活，生活史中没有具固着生活的柄。</p><ul><li>海星纲：身体呈星形，中央盘和 5 个（或 5 的倍数）腕之间的界限与海蛇尾比不明显，腕的口面有步带沟，步带沟中有 2 ~ 4 排管足。</li><li>海蛇尾纲：腕细长，与中央盘的界限非常明显，没有步带沟，管足没有坛囊和吸盘。筛板位于口面。本纲是棘皮动物中最大的一类，现存约有 2000 种，分布极广。</li><li>海胆纲：5 个腕向反口面愈合，呈圆球形或扁圆形的骨骼包住身体。体表头长有可以活动的刺。现存种类约 900 种。</li><li>海参纲：身体沿口面和反口面延长，成为长圆柱形，无腕，并以步带区和间步带区附着。口和肛门分别在身体的两端，出现次生性的两侧对称。骨片小而分散，无互相关连的骨板，故体表没有棘和叉棘。口为一圈管足形成的触手所包围。现存种类有 1100 余种。</li></ul><h4 id="依据水管系统分类"><a class="header-anchor" href="#依据水管系统分类"></a>依据水管系统分类</h4><ul><li>海胆亚门（Echinozoa）：<ul><li>海旋板纲（Helicoplacoidea）†</li><li>海蛇函纲（Ophiocistioidea）†</li><li>海蒲团纲（Camptostromatoidea）†</li><li>海盘囊纲（Cyclocystoidea，也称环海林檎纲）†</li><li>海参纲（Holothuroidea）</li><li>海胆纲（Echinoidea）</li></ul></li><li>海扁果亚门（Homalozoa）† ：<ul><li>海桩纲（Stylophora）†</li><li>海笔纲（Homostelea）†</li><li>海箭纲（Homoiostelea）†</li><li>栉海林檎纲（Ctenocystoidea）†</li></ul></li><li>海百合亚门（Crinozoa）：<ul><li>海百合纲（Crinoidea）</li><li>海林檎纲（Cystoidea）†</li><li>拟海百合纲（Paracrinoidea）†</li><li>始海百合纲（Eocrinoidea）†</li><li>海蕾纲（Blastoidea）†</li><li>拟海蕾纲（Parablastoidea）†</li><li>垫海蕾纲（Edrioblastoidea）†</li><li>海座星纲（Edrioasteroidea）†</li><li>鳞海林檎纲（Lepidocystoidea）†</li></ul></li><li>海星亚门（Asterozoa）：<ul><li>海星纲（Asteroidea）</li><li>蛇尾纲（Ophiuroidea）</li><li>体海星纲（Somasteroidea）†</li></ul></li></ul><p>1973年斯普林克尔（J.Sprinkle）有在此基础上从海百合亚门中划分出海蕾亚门（Blastozoa），下设海蕾纲（Blastoidea）、拟海蕾纲（Parablastoidea）、海林檎纲（Cystoidea）及始海百合纲（Eocrinoidea）4纲。</p><h3 id="棘皮动物的进化地位"><a class="header-anchor" href="#棘皮动物的进化地位"></a>棘皮动物的进化地位</h3><p>棘皮动物与一般的无脊椎动物不同，它的卵裂、早期胚胎发育、中胚层的产生、体腔的形成以及骨骼由中胚层产生等，都与脊索动物有相同的地方，而不同于无脊椎动物。从成体口的形成和肛门的形成看，棘皮动物也与脊椎动物相同，所以棘皮动物与脊椎动物都属于后口动物。基于以上事实，科学家现在普遍认为，脊索动物与棘皮动物有共同的祖先。</p><h2 id="化石分析演化历史"><a class="header-anchor" href="#化石分析演化历史"></a>化石分析演化历史</h2><p><img src="https://cdn.jsdelivr.net/gh/halo-blog/cdn-blog-img-d@master/1.4hhmjjeama20.svg" alt="棘皮动物演化关系图"></p><h3 id="与半索动物的分别"><a class="header-anchor" href="#与半索动物的分别"></a>与半索动物的分别</h3><p>有研究通过对现存的生物进行基因组测序，通过生物信息学分析，得出棘皮动物门和半索动物门的分开大概在 5.3 亿年前的前寒武纪时期。</p><p><img src="https://cdn.jsdelivr.net/gh/halo-blog/cdn-blog-img-d@master/image.2p55tzf01j00.png" alt="image"></p><blockquote><p>The sea cucumber genome provides insights into morphological evolution and visceral regeneration. <a href="https://doi.org/10.1371/journal.pbio.2003790">DOI 链接</a>】</p></blockquote><p>在寒武纪的化石群中发现了一些难以归类的动物化石，具有一些后口动物的特征命名为 Ctenoimbricata 其中有一个生物名为爬胃虫（<em>Herpetogaster collinsi</em>）化石以及复原图如下，此外还有澄江化石群的长柄火炬虫（<em>Phlogites longus</em>）【<a href="https://figshare.com/articles/figure/_Phlogites_longus_from_the_Lower_Cambrian_Chengjiang_biota_/531245">参考链接</a>】</p><p><img src="https://cdn.jsdelivr.net/gh/halo-blog/cdn-blog-img-d@master/image.za063wx1w1s.png" alt="爬胃虫"></p><p>通过图片我们可以了解到，此时这种生物是两侧对称，头部有着触手，可能是用于捕获海里的浮游生物，而基部有着类似管状的“脚”，可能是用于固着在海床中。如果觉得抽象，幸运的是现存一种名为海苹果（<em>Pseudocolochirus violaceus</em>）的海参，有着类似的滤食行为。</p><img src="https://cdn.jsdelivr.net/gh/halo-blog/cdn-blog-img-d@master/海苹果.63qik8szmd80.jpg" alt="海苹果" style="object-fit: cover; border-radius: 10px; width: 50%;" /><p>顺便放一段海苹果的进食视频</p><div class="tag link"><a class="link-card" title="海苹果进食" href="https://www.bilibili.com/video/BV1Rs411p73A"><div class="left"><img src="https://cdn.jsdelivr.net/gh/halo-blog/cdn-blog-img-b@master/img/bilibiliIcon.svg"/></div><div class="right"><p class="text">海苹果进食</p><p class="url">https://www.bilibili.com/video/BV1Rs411p73A</p></div></a></div><blockquote><p>需要注意的是，这里使用海苹果只是作为演示，不能作为海苹果与爬胃虫之间的进化关系的证明，也不代表爬胃虫的进食方式和海苹果一样。</p></blockquote><h3 id="然后寒武纪来了"><a class="header-anchor" href="#然后寒武纪来了"></a>然后寒武纪来了</h3><p>寒武纪来了，生命大爆发，这一时期的生物有一个特点就是有壳和一定的骨骼，可能因为地质变动，为海洋带来了大量的碳酸钙，同时也是因为有了壳的保护，才能适应当时的竞争环境得以生存。也正因为壳和骨骼的存在，也相对容易的通过化石遗迹保留下来，得以我们去窥看 5 亿多年前的初代目。</p><p><img src="https://cdn.jsdelivr.net/gh/halo-blog/cdn-blog-img-d@master/image.4pox3z79k5y0.png" alt="image"></p><blockquote><p>图片来自于：Plated Cambrian Bilaterians Reveal the Earliest Stages of Echinoderm Evolution 【<a href="https://doi.org/10.1371/journal.pone.0038296">DOI 链接</a>】</p></blockquote><p>海笔纲动物的消化道已经扭转了 90 度，肛门转到体侧，所以那条像是尾巴的东西并不是长在身体的“后”部。</p><p>海箭纲的消化道发生了扭转，在口和肛门附近都有一根介于像是“须腕”或者“尾巴”的东西，口旁的也许有辅助进食的功能，肛门旁的可能固定身体或者爬行。</p><p>海桩纲动物的身体结构分为两种：左边一种保留了更多两侧对称的特征，可以在海底自由爬行。它们有一根分段的须腕，口生在须腕的前段和后段之间；右边的完全不对称，基本营固着生活。海桩纲不同于其他棘皮动物的另一个特征是具有类似鳃裂的结构，它们也许就是用口吸入海水，再从鳃裂流出，过滤其中的食物。这种进食方式倒是典型的后口动物式的。</p><p>这些棘皮动物一是打破了两侧对称的构型，外部器官和内脏都发生偏转，身体越长越“歪”；二是除了“身体”之外，在身体侧方，以及口或肛门的附近还延伸出一些类似附肢的结构。</p><p><img src="https://cdn.jsdelivr.net/gh/halo-blog/cdn-blog-img-d@master/image.um0wk3ysoow.png" alt="image"></p><p>这里列出的早期的棘皮动物化石，看到它们只能一脸问号，难以相信它们是刚刚分化的近亲。虽然外表差异极大，但冷静下来它们还是有一定的共同之处</p><p><img src="https://cdn.jsdelivr.net/gh/halo-blog/cdn-blog-img-d@master/%E5%9B%BE%E7%89%877.3vzej82jji00.png" alt="图片7"></p><p>就比如图中红色部分：步带沟；蓝色和绿色部分：体盘；黄色部分：茎和固着器。基本的部件都还有。</p><p>个人认为，在寒武纪这个神奇的世中，棘皮动物和三叶虫这类节肢动物选择了底栖生活，一方面说明海底确实有着足够的食物支持生长，但海旋板纲、海座星纲、始海百合纲它们的嘴是朝上，并且固着在海底，可能通过步带沟将食物送入嘴中。</p><h3 id="百「花」齐放——海百合亚门"><a class="header-anchor" href="#百「花」齐放——海百合亚门"></a>百「花」齐放——海百合亚门</h3><p>海百合亚门，在富含浮游生物的海水滋养下，这类滤食动物异常繁盛。它们的萼上丛生着多达数十条羽状的修长须腕，在海水中有节奏地舒卷张合，把经过的浮游生物送入口中。它的茎由数十段骨片连结而成，骨片之间可以弯曲扭转，使得海百合极其坚韧而又灵活。群集的海百合在海流中起伏摇荡，组成壮观的水下花潮。无数的三叶虫，甲壳类和无颌鱼类在花海中穿梭；细小的海螺，海星和海蛇尾攀附在海百合上，成为海洋生物的一片绿洲。在海百合的冲击下，始海百合类逐渐衰落，最终淡出了历史舞台。</p><p>海百合是古生代和中生代海相沉积层中最丰富的化石类群之一。海百合死后，肌体腐烂，萼部和茎部会分离解体，由于形状和重量的差别，被海水挟带，经常会沉积在不同地方，分别形成数量可观的化石群。茎部骨板是圆形的薄片，中央有五角形的空洞，成堆形成的化石像是一串串的古代钱币。</p><p><img src="https://cdn.jsdelivr.net/gh/halo-blog/cdn-blog-img-d@master/image.3hgj140momk.png" alt="image"></p><p>海百合纲一直延续到 4 亿 5000 万年后，成为现存棘皮动物中唯一的固着滤食类群。</p><p>因其骨化骨骼，在不同的时期可以看到夺目的身姿，下图展示了，不同时期的海百合的种类数目变化</p><p><img src="https://cdn.jsdelivr.net/gh/halo-blog/cdn-blog-img-d@master/image.9dg9ylbvjtw.png" alt="海百合数目变化"></p><p>可以看到，古生代的海百合种类最多也是海百合最繁盛的时期，但在二叠纪生物大灭绝后，只有少量海百合幸存了下来，但生命力顽强的它们又逐渐的恢复，现存至今。</p><p>海百合虽过着滤食生活，但在演化史中也出现过多种生活形式。下图是奥陶纪和至留纪时期的海百合化石复原图，它们有着较长的茎，吸附于海底中或缠绕于珊珊等生物上。固着是它们的基本形式，而有着较长的茎一方面在进食上有着优势，另一方面也可以减少一些在海底的生物攻击其体盘。</p><p><img src="https://cdn.jsdelivr.net/gh/halo-blog/cdn-blog-img-d@master/OrdovicianCrinoidReconstruction.png" alt="奥陶纪海百合复原图"></p><p><img src="https://cdn.jsdelivr.net/gh/halo-blog/cdn-blog-img-d@master/image.68e03qyd9n80.png" alt="志留纪海百合复原图"></p><p>在泥盆纪更出现了一些具有主动捕食形式的海百合，© <a href="https://doi.org/10.4202/app.2010.0020">Jan Bohatý</a></p><p><img src="https://cdn.jsdelivr.net/gh/halo-blog/cdn-blog-img-d@master/image.4fxw8nbk0os0.png" alt="泥盆纪海百合复原图"></p><p>在侏罗纪出现了，可以固着在漂浮物上的海百合，其中可能原因是植物数组貌似，洪水泛滥将枝干冲入海中，有了这个先天条件，能固着在漂浮物中上的海百合有了一定的被动移动的能力，被选择保留下来自然也不意外。</p><p><img src="https://cdn.jsdelivr.net/gh/halo-blog/cdn-blog-img-d@master/image.1pl4ofwlcojk.png" alt="侏罗纪海百合复原图"></p><p>在白垩纪，出现了一种脱离固定的一条演化路线，它们就如同水母一般，可能用其滤食的腕足，拨动海水游动。</p><p><img src="https://cdn.jsdelivr.net/gh/halo-blog/cdn-blog-img-d@master/image.4ipn0x2roae0.png" alt="白垩纪海百合"></p><p>目前现存的海百合在中也存在固着和可以游动（但运动能力有限，可以称为半附着）的这两类海百合，但已经不如古生代时期海底花园那样繁盛。</p><blockquote><p>图片来自于：<a href="http://www.fossilcrinoids.com/index.html">fossilcrinoids.com</a></p></blockquote><h3 id="不「走」寻常路——海星亚门"><a class="header-anchor" href="#不「走」寻常路——海星亚门"></a>不「走」寻常路——海星亚门</h3><p>海星亚门可能起源于类似海座星纲的生物，海座星纲生物过着固定的滤食生活，口是朝上的，用着步带沟将食物送入嘴中，我们知道，固着有着局限性，在环境好时可以躺平，但环境一旦恶劣也难逃灭绝之难。</p><p>说起来也是神奇，这时候这类生物想要突破怎么办，基本的框架都已经搭建好了，突然变成“派大星”也十分困难，但它们翻了个身子就解决了这个问题，用曾经灵活的“舌头”来走路，在这个竞争激烈的环境中，能动对于不能动简直就是降维打击。同时，由于腕上有吸盘，可以打开贝壳，海星也走上了捕食者的道路。</p><h3 id="两个极端的「胜利」——海胆亚门"><a class="header-anchor" href="#两个极端的「胜利」——海胆亚门"></a>两个极端的「胜利」——海胆亚门</h3><p>海参和海胆它们作为进化关系的兄弟，你可能会诧异，这两个家伙现在一点都不像啊，但它们在寒武纪时期就分道扬镳至少有 4.7 亿年，两者选择了不同的进化路线，一个害怕疼就全点防御，海参选择了躺平挨打，但在它们之间有一个类海蛇函纲的生物</p><p><img src="https://cdn.jsdelivr.net/gh/halo-blog/cdn-blog-img-d@master/image.1mo60vhi54ps.png" alt="海蛇函"></p><p>它们可能选择了中间的道路，好不容易挺过二叠纪大灭绝但可能因为环境的改变淡出了历史舞台，而看似胜利的海参和海胆终究逃不过人类的餐桌（误）</p><p>海胆点满了防御，海参则点满了回血和控制。</p><p>海参在遇到危险时，将自己的一部分内脏吐出来，一方面可以缠绕对方，另一方面可以给对方吃，吃饱了也就不攻击本体，而海参通过较强的恢复能力再生。此外，海参还可以通过改变自身的颜色，来较少被发现了可能。</p><h2 id="为什么棘皮动物能存活下来"><a class="header-anchor" href="#为什么棘皮动物能存活下来"></a>为什么棘皮动物能存活下来</h2><p>在经历过大大小小的生物大灭绝事件后，棘皮动物仍在海洋中占着一席之地，更加不可思议的是它们演化出在千变万化的身体形态，但在生活习性上却十分保守，绝大多数过着底栖的生活，未曾涉足陆地和淡水。你可能认为它们“不思进取”，这固然有些道理，没有较大的选择压力，大家在海底“躺平”生活相安无事。我个人认为其关键点有以下几个：</p><ul><li>适应范围广，棘皮动物从深海到浅海，都有分布，并且是广泛分布，正所谓不要把鸡蛋放到一个篮子里，在生物灭绝中，一部分原因可能是没有波及到，但更多的原因可能是其拥有较高的适应能力存活下来。</li><li>再生能力强，面对攻击“缺胳膊少腿”，对于棘皮动物来说只是家常便饭，这种壁虎断尾式的生存方式，无疑保全自身东山再起，更有甚者仅通过断臂就可“克隆”自己。</li><li>辐射对称妙，大自然的规律告诉了我们，这个世界的两侧对称动物的世界，但棘皮动物辐射对称一定程度上限制了其演化的上限，像海参通过“拉长”自己，使自己看起来两侧对称，但实际还是辐射对称。虽然上限低，但辐射对称也有一定好处，除了上述收到攻击时“缺胳膊少腿”时可以多些“胳膊”和“腿”，再遗传变异中多些或少些“胳膊”和“腿”都没太大问题。辐射对称起初是为了滤食而生，定了这个基调，却能演化出千奇百怪的用途，不禁感叹自然的鬼斧神工。</li></ul><blockquote><p>这里引出一个问题：为什么海星通常有五条腕？五辐对称在自切上有优势，通过选择中就被保留了下来。</p></blockquote><h2 id="话题外"><a class="header-anchor" href="#话题外"></a>话题外</h2><h3 id="「派大星」"><a class="header-anchor" href="#「派大星」"></a>「派大星」</h3><p>2021 年 3 月 19 日，全球权威海洋生物学数据库《世界海洋生物目录》发布了 <a href="https://lifewatch.be/en/worms-top10-2020">2020 年度「十大海洋新物种」名单</a>，深海海星新物种 Astrolirus patricki Zhang Zhou, Xiao &amp; Wang, 2020 （中文名又称「派大星」背板海星）入选了 2020 年度「十大海洋新物种」名单。这一新物种的命名者是从小看《海绵宝宝》长大的 90 后博士研究生张睿妍，她表示，「派大星」背板海星目前所发现的所有标本全部都栖息于海绵之上，就像海绵宝宝与派大星一样，是一对难舍难分的「铁哥们」。</p><p><img src="https://cdn.jsdelivr.net/gh/halo-blog/cdn-blog-img-d@master/%E5%9B%BE%E7%89%873.27uo7ocvdt7o.png" alt="十大海洋新物种"></p><blockquote><p>发表文章：A new sponge-associated starfish, Astrolirus patricki sp. nov. (Asteroidea: Brisingida: Brisingidae), from the northwestern Pacific seamounts 【<a href="https://doi.org/10.7717/peerj.9071">DOI 链接</a>】</p></blockquote><h2 id="文献资料"><a class="header-anchor" href="#文献资料"></a>文献资料</h2><p>Weighted gene co-expression network analysis reveals potential genes involved in early metamorphosis process in sea cucumber <em>Apostichopus japonicus</em></p><p>加权基因共表达网络分析揭示了参与海参早期变态过程的潜在基因</p><p>Sea cucumbers, one main class of Echinoderms, have a very fast and drastic metamorphosis process during their development. However, the molecular basis under this process remains largely unknown. Here we systematically examined the gene expression profiles of Japanese common sea cucumber (<em>Apostichopus japonicus</em>) for the first time by RNA sequencing across 16 developmental time points from fertilized egg to juvenile stage. Based on the weighted gene co-expression network analysis (WGCNA), we identified 21 modules. Among them, MEdarkmagenta was highly expressed and correlated with the early metamorphosis process from late auricularia to doliolaria larva. Furthermore, gene enrichment and differentially expressed gene analysis identified several genes in the module that may play key roles in the metamorphosis process. Our results not only provide a molecular basis for experimentally studying the development and morphological complexity of sea cucumber, but also lay a foundation for improving its emergence rate.</p><p>海参是棘皮动物的主要种类之一，在其发育过程中有一个非常迅速和剧烈的变态过程。然而，这一过程的分子基础在很大程度上仍然未知。本研究首次对日本普通海参（Apostichopus japonicus）受精卵至幼期 16 个发育时间点的基因表达谱进行了系统分析。基于加权基因共表达网络分析（WGCNA），我们鉴定出 21 个模块。其中，MEdarkmagenta 表达量高，且与耳状幼虫至海参形幼虫的早期变态过程相关。此外，基因富集和差异表达基因分析确定了模块中几个可能在变态过程中起关键作用的基因。本研究结果不仅为实验研究海参的发育和形态复杂性提供了分子基础，而且为提高海参的出苗率奠定了基础。</p><div class="tag link"><a class="link-card" title="DOI 链接" href="https://doi.org/10.1016/j.bbrc.2017.11.154"><div class="left"><img src="https://cdn.jsdelivr.net/gh/halo-blog/cdn-blog-img-a@master/img/网站.svg"/></div><div class="right"><p class="text">DOI 链接</p><p class="url">https://doi.org/10.1016/j.bbrc.2017.11.154</p></div></a></div><hr><p>Echinoderm systems for gene regulatory studies in evolution and development</p><p>在进化和发育中用于基因调控研究的棘皮系统</p><p>One of the main challenges in Evolutionary Developmental Biology is to understand to which extent developmental changes are driven by regulatory alterations in the genomic sequence. In the recent years, the focus of comparative developmental studies has moved towards a systems biology approach providing a better understanding of the evolution of gene interactions that form the so called Gene Regulatory Networks (GRN). Echinoderms provide a powerful system to reveal regulatory mechanisms and within the past decade, due to the latest technological innovations, a great number of studies have provided valuable information for comparative GRN analyses. In this review we describe recent advances in evolution of GRNs arising from echinoderm systems, focusing on the properties of conserved regulatory kernels, circuit cooption events and GRN topological rearrangements.</p><p>进化发育生物学的主要挑战之一是理解发育变化在多大程度上是由基因组序列的调节改变驱动的。近年来，比较发育研究的重点已经转向系统生物学的方法，以更好地理解形成所谓的基因调控网络（GRN）的基因相互作用的进化。棘皮动物提供了一个强大的系统来揭示调节机制，在过去的十年中，由于最新的技术创新，大量的研究为 GRN 的比较分析提供了有价值的信息。本文综述了棘皮系统中 GRN 的进化研究进展，主要包括保守调控核的性质、回路合作事件和 GRN 拓扑重排。</p><p>1-s2.0-S0959437X16300661-main.pdf</p><hr><p>New discoveries of Cambrian pelmatozoan echinoderm ossicles from North China</p><p>来自华北地区的寒武纪棘皮动物有柄亚目听骨的新发现</p><p>A variety of echinoderm ossicles have been discovered in the middle to upper Cambrian rocks of the North China Craton. Material was collected from two localities: Shuangqiao (SQ)section (Paibian) in Hebei Province and Linyi (LY) (Guzhangian?–Paibian?) in Shandong Province. Six types of ossicles can be recognized, including rounded thecal plates, and columnals with a narrow lumen and ridged articulating facets. The combination of characters suggests an unknown stalked echinoderm, probably an eocrinoid, with relatively advanced columnal morphology.</p><p>1-s2.0-S1871174X15000438-main.pdf</p><hr><p>The earliest scientific descriptions of Chinese fossil echinoderms in a late nineteenth-century publication by Lajos Lóczy (Ludwig von Lóczy)</p><p>对中国棘皮动物化石的最早科学描述是在19世纪后期</p><p>1-s2.0-S1871174X15000682-main.pdf</p><hr><p>Fossil Echinoderm Studies in China and other countries: Historical and new perspectives</p><p>中国和其他国家的化石棘皮动物研究:历史和新视角</p><p>1-s2.0-S1871174X15000888-main.pdf</p><hr><p>The onset of the Ordovician evolutionary radiation of benthic animals in the Baltic Region: Explosive diversity of attachment structures of stalked echinoderms, substrate revolution and the role of cyanobacterial communities</p><p>奥陶纪底栖动物进化辐射的开始波罗的海地区:有柄棘皮动物附着结构的爆炸性多样性，底物革命和蓝藻群落的作用</p><p>The study of the Ordovician holdfasts of the Baltic Paleobasin revealed an explosive increase in the morphological diversity of echinoderms of the Baltic Paleobasin, up to 12 major morphological types in the Volkhov Regional Stage (Dapingian), reflecting an explosive growth in the taxonomic and morphological diversity of stalked echinoderms in general, but primarily crinoids. A sudden increase in the size and diversity of holdfasts at that time suggests a considerable increase in calcite production by stalked echinoderms and their adaptation to a wide distribution of a new type of substrate — hardgrounds and firm coarse-grained bioclastic substrates. The possibility of wide distribution of such substrates was due to a considerable increase, of at least an order of magnitude, in the carbonate productivity of benthic communities, whereas the rapid distribution of a new type of substrate and an explosive increase in the diversity and abundance of their inhabitants in the Baltic Basin was related to the appearance of positive feedbacks between the living and non-living components of this ecosystem. The existence of this positive feedback was due to cyanobacterial communities, the development of a biofilm on the substrate, and mineralization of an extracellular polymer substance, which led to the formation of hardgrounds and consolidation of the surface of the bioclastic substrates. The appearance in the Middle Ordovician of positive feedback between the expansion of the bioclastic substrates and an increase in carbonate production by their inhabitants, resulted in the Ordovician substrate revolution and explosive diversification of Ordovician benthic animals. Cyanobacterial films episodically appearing on the substrate, were an essential factor in the formation of this feedback.</p><p>研究显示奥陶纪的波罗的海古盆地显示了波罗的海古盆地棘皮动物形态多样性的爆炸性增长，在沃尔霍夫区域阶段(大坪阶)，有 12 种主要的形态类型，反映了有柄棘皮动物的分类和形态多样性的爆炸性增长，但主要是海百合。</p><p>1-s2.0-S1871174X18300489-main.pdf</p><hr><p>Evolution of Caribbean echinoderms during the Cenozoic: moving towards a complete picture using all of the fossils</p><p>加勒比地区新生代棘皮动物的演化:利用所有的化石走向完整的画面</p><p>1-s2.0-S003101820000208X-main.pdf</p><hr><p>Echinoderm development and evolution in the post-genomic era</p><p>后基因组时代的棘皮动物的发展和进化</p><p>The highly recognizable animals within the phylum Echinodermata encompass an enormous disparity of adult and larval body plans. The extensive knowledge of sea urchin development has culminated in the description of the exquisitely detailed gene regulatory network (GRN) that governs the specification of various embryonic<br>territories. This information provides a unique opportunity for comparative studies in other echinoderm taxa to understand the evolution and developmental mechanisms underlying body plan change. This review focuses on recent work that has utilized new genomic resources and systems-level experiments to address questions of<br>evolutionary developmental biology. In particular, we synthesize the results of several recent studies from various echinoderm classes that have explored the development and evolution of the larval skeleton, which is a major feature that distinguishes the two predominant larval subtypes within the Phylum. We specifically<br>examine the ways in which GRNs can evolve, either through cis regulatory and/or protein-level changes in transcription factors. We also examine recent work comparing evolution across shorter time scales that occur within and between species of sea urchin, and highlight the kinds of questions that can be addressed by these comparisons. The advent of new genomic and transcriptomic datasets in additional species from all classes of echinoderm will continue to empower the use of these taxa for evolutionary developmental studies.</p><p>棘皮动物门内的高度可识别的动物包括一个巨大的差异的成虫和幼虫的身体计划。关于海胆发育的广泛知识已经达到了顶峰，详细的基因调控网络(GRN)的描述，管理各种胚胎领土的规格。这一信息为其他棘皮类的比较研究提供了独特的机会，以了解体平面变化的进化和发育机制。本文综述了近年来利用新的基因组资源和系统水平的实验来解决进化发育生物学的问题。特别是，我们综合了最近几项来自不同种类的棘皮动物的研究结果，这些研究探索了幼虫骨骼的发展和进化，这是区分该门中两种主要的幼虫亚型的主要特征。我们特别研究了grn可以通过顺式调控和/或转录因子的蛋白水平变化进化的方式。我们还研究了最近的研究，比较了海胆物种内部和物种之间在较短时间内发生的进化，并强调了通过这些比较可以解决的问题。新的基因组和转录组数据集的出现，将继续授权使用这些类群的进化发展研究</p><p>1-s2.0-S0012160616305747-main.pdf</p><hr><p>The Cambrian Substrate Revolution and the early evolution of attachment in suspension-feeding echinoderms</p><p>寒武纪基质革命与悬浮取食棘皮动物附着的早期进化</p><p>The Cambrian, characterized by the global appearance of diverse biomineralized metazoans in the fossil record for the first time, represents a pivotal point in the history of life. This period also documents a major change in the nature of the sea floor: Neoproterozoic-type substrates stabilized by microbial mats were replaced by unconsolidated soft substrates with a well-developed mixed layer. The effect of this transition on the ecology and evolution of benthic metazoans is termed the Cambrian Substrate Revolution (CSR), and this is thought to have<br>impacted greatly on early suspension-feeding echinoderms in particular. According to this paradigm, most echinoderms rested directly on non-bioturbated soft substrates as sediment attachers and stickers during the Cambrian Epoch 2. As the substrates became increasingly disturbed by burrowing, forming a progressively<br>thickening mixed layer, echinoderms developed new strategies for attaching to firm and hard substrates. To test this model, we evaluated the mode of attachment of 83 Cambrian suspension-feeding echinoderm species; attachment mode was inferred based on direct evidence in fossil specimens and interpretations of functional<br>morphology. These data were analyzed quantitatively to explore trends in attachment throughout the <a href="http://Cambrian.In">Cambrian.In</a> contrast to previous studies, the majority of Cambrian clades (eocrinoids, helicoplacoids, helicocystoids,isorophid edrioasteroids, and solutes) are now interpreted as hard (shelly) substrate attachers. Only early<br>edrioasteroids attached directly to firm substrates stabilized by microbially induced sedimentary structures.Contrary to the predictions of the CSR paradigm, our study demonstrates that Cambrian echinoderms were morphologically pre-adapted to the substrate changes that occurred during the Cambrian, allowing them to fully<br>exploit the appearance of hardgrounds in the Furongian. We find no support for the claim that the CSR explains the peak in echinoderm diversity during Cambrian Epochs 2–3, or that it caused the extinction of helicoplacoids.</p><p>寒武纪首次在化石记录中以生物矿化的后生动物在全球范围内的出现为特征，代表了生命历史的一个关键点。这一时期也记录了海底性质的一个重大变化:由微生物垫稳定的新元古代类型的基岩被松散的软基岩所取代，后者具有发育良好的混合层。这种转变对底栖后生动物的生态和进化的影响被称为寒武纪底栖动物的进化(CSR)，这被认为对早期悬浮取食的棘皮动物有很大的影响。根据这一范式，在寒武纪第2期，大多数棘皮动物直接依附在非生物扰动的软基质上作为沉积物附着剂和贴纸。由于挖洞对基质的干扰越来越大，形成了一个逐渐增厚的混合层，棘皮动物开发了附着在坚硬基质上的新策略。为了验证该模型，我们对寒武系83种悬浮取食的棘皮动物的附着模式进行了评估;根据化石标本的直接证据和功能形态解释推断附着模式。对这些数据进行了定量分析，以探讨整个寒武纪的附着趋势。与以前的研究相比，寒武纪的大多数支系(类蠕形纲、类螺旋形纲、类螺旋形纲、类等蛾类流星体和溶质)现在被解释为坚硬的(壳类)基质附着体。只有早期的涡旋小行星直接附着在由微生物引起的沉积构造稳定的坚实基质上。与CSR模式的预测相反，我们的研究表明，寒武纪的棘皮动物在形态上预先适应了寒武纪发生的基质变化，使它们能够充分利用弗隆纪的硬地。我们没有发现支持CSR解释寒武纪棘皮动物多样性高峰的说法，或者它导致螺旋形类动物的灭绝。</p><p>1-s2.0-S0012825217301265-main.pdf</p><hr><p>Fossil echinoderms from the Carboniferous Limestone sea defence blocks at Barton-on-Sea, Hampshire, southern England</p><p>来自英国南部汉普郡巴顿-on- sea石炭纪石灰岩海防御区块的棘皮动物化石</p><p>1-s2.0-S0016787803800317-main.pdf</p><hr><p>Diversity patterns and biostratigraphy of Cenozoic echinoderms from Florida</p><p>佛罗里达新生代棘皮动物多样性模式与生物地层学</p><p>1-s2.0-S0031018200002091-main.pdf</p><hr><p>Palaeogeographical and palaeoecological aspects of the Cambro^Ordovician radiation of echinoderms in Gondwanan Africa and peri-Gondwanan Europe</p><p>非洲冈瓦南地区和欧洲冈瓦南周边地区寒武系和奥陶系棘皮动物辐射的古地理和古生态特征</p><p>1-s2.0-S0031018203003031-main.pdf</p><hr><p>⭐Evolutionary palaeoecology of early epifaunal echinoderms:Response to increasing bioturbation levels during the Cambrian radiation</p><p>早期深层棘皮动物的进化古生态学:寒武纪辐射期间生物扰动水平增加的响应</p><p>1-s2.0-S0031018205006942-main.pdf</p><hr><p>⭐ Changes in the Early Palaeozoic geography as a possible factor of echinoderm higher taxa formation: Delayed larval development to cross the Iapetus Ocean</p><p>早期古生代的地理变化可能是棘皮动物高级类群形成的因素:穿越伊阿佩托斯洋的幼虫发育延迟</p><p>1-s2.0-S0031018206003609-main.pdf</p><hr><p>⭐⭐ Climate changes in the Early to Middle Miocene of the Central Paratethys and the origin of its echinoderm fauna</p><p>中新世早期至中新世中期的气候变化中央副穴居动物及其棘皮动物群的起源</p><p>1-s2.0-S0031018207002003-main.pdf</p><hr><p>⭐⭐ Settling strategy of stalked echinoderms from the Kaili Biota (middle Cambrian), Guizhou Province, South China</p><p>贵州凯里生物区中寒武世有柄棘皮动物的定居策略</p><p>1-s2.0-S0031018207004567-main.pdf</p><hr><p>⭐ The absence of echinoderms from the Lower Cambrian Chengjiang fauna of China: Palaeoecological and palaeogeographical implications</p><p>中国下寒武统澄江动物群中棘皮动物的缺失:古生态学和古地理意义</p><p>1-s2.0-S0031018210000027-main.pdf</p><hr><p>⭐ Palaeoecological aspects of the diversification of echinoderms in the Lower Ordovician of central Anti-Atlas, Morocco</p><p>摩洛哥中央反阿特拉斯下奥陶统棘皮动物多样性的古生态学方面</p><p>1-s2.0-S0031018216001395-main.pdf</p><hr><p>The mechanically adaptive connective tissue of echinoderms: Its potential for<br>bio-innovation in applied technology and ecology</p><p>棘皮动物的机械适应性结缔组织:在应用技术和生态学方面的生物创新潜力</p><p>1-s2.0-S0141113611000894-main.pdf</p><hr><p>⭐⭐ Complete mitochondrial genome of the sea cucumber Apostichopus japonicus (Echinodermata: Holothuroidea): The first representative from the subclass Aspidochirotacea with the echinoderm ground pattern</p><p>海参(Apostichopus japonicus)线粒体全基因组:棘皮海参亚纲中第一个具有棘皮基部图案的海参亚纲代表</p><p>1-s2.0-S0378111909001358-main.pdf</p><hr><p>⭐⭐ Phylogenomic Resolution of the Hemichordate and Echinoderm Clade</p><p>半棘皮类和棘皮类的系统基因组解析</p><p>1-s2.0-S0960982214012925-main.pdf</p><hr><p>⭐ Evolution of mitochondrial gene orders in echinoderms</p><p>棘皮动物线粒体基因顺序的进化</p><p>1-s2.0-S1055790307004186-main.pdf</p><hr><p>⭐ Do echinoderm genomes measure up?</p><p>棘皮动物的基因组符合标准吗?</p><p>1-s2.0-S1874778715000148-main.pdf</p><hr><p>⭐⭐ Evolution: Mapping Out Early Echinoderms</p><p>进化:绘制早期棘皮动物图谱</p><p>10.1016@j.cub.2020.05.013.pdf</p><hr><p>⭐⭐ Global Diversity of Brittle Stars (Echinodermata: Ophiuroidea)</p><p>海蛇尾全球的多样性</p><hr><p>⭐⭐⭐ Genomic insights of body plan transitions from bilateral to pentameral symmetry in Echinoderms</p><p>棘皮动物的体平面从双侧对称到五侧对称的基因组洞见</p><p>Echinoderms are an exceptional group of bilaterians that develop pentameral adult symmetry from a bilaterally symmetric larva. However, the genetic basis in evolution and development of this unique transformation remains to be clarified. Here we report newly sequenced genomes, developmental transcriptomes, and proteomes of diverse echinoderms including the green sea urchin (L. variegatus), a sea cucumber (A. japonicus), and with particular emphasis on a sister group of the earliest-diverged echinoderms, the feather star (A. japonica). We learned that the last common ancestor of echinoderms retained a well-organized Hox cluster reminiscent of the hemichordate, and had gene sets involved in endoskeleton<br>development. Further, unlike in other animal groups, the most conserved developmental stages were not at the body plan establishing phase, and genes normally involved in bilaterality appear to function in pentameric axis development. These results enhance our understanding of the divergence of protostomes and deuterostomes almost 500 Mya.</p><p>棘皮动物是一种特殊的双侧动物，从两侧对称的幼虫发展成五辐对称的成体。然而，这一独特转化的遗传基础在进化和发展仍有待澄清。本文报道了包括绿海胆(L. variegatus)、海参(a . japonicus)在内的多种棘皮动物的基因组、发育转录组和蛋白质组的最新测序结果，并重点报道了最早分化的棘皮动物的一个兄弟类群——羽星(a . japonica)。我们了解到，棘皮动物的最后一个共同祖先保留了一个组织良好的Hox簇，让人联想到半棘虫，并有参与内骨骼发育的基因集。此外，与其他动物不同的是，最保守的发育阶段并不是在身体计划建立阶段，通常参与双向性的基因似乎在五聚体轴的发育中发挥作用。这些结果加深了我们对近500米亚原口动物和后口动物差异的认识。</p><p>s42003-020-1091-1.pdf</p><hr><p>Echinoderm Phylogeny: Morphology and Molecules Approach Accord</p><p>棘皮动物的发展史: 形态学和分子方法一致</p><p>smith1992.pdf</p><hr><p>Echinoderms (Other Than Echinoids)</p><p>棘皮类动物(海胆类除外)</p><p>smith2005.pdf</p>]]></content>
    
    
      
      
    <summary type="html">&lt;details &gt;&lt;summary&gt; 主要参考资料 &lt;/summary&gt;
              &lt;div class=&#39;content&#39;&gt;
              &lt;div class=&quot;tag link&quot;&gt;&lt;a class=&quot;link-card&quot; title=&quot;寒武</summary>
      
    
    
    
    <category term="生物学" scheme="https://halo123.top/categories/%E7%94%9F%E7%89%A9%E5%AD%A6/"/>
    
    
  </entry>
  
  <entry>
    <title>基因工程复习资料整理</title>
    <link href="https://halo123.top/2021/05/27/Biology/%E5%A4%8D%E4%B9%A0%E8%B5%84%E6%96%99/%E5%9F%BA%E5%9B%A0%E5%B7%A5%E7%A8%8B/"/>
    <id>https://halo123.top/2021/05/27/Biology/%E5%A4%8D%E4%B9%A0%E8%B5%84%E6%96%99/%E5%9F%BA%E5%9B%A0%E5%B7%A5%E7%A8%8B/</id>
    <published>2021-05-27T14:40:48.000Z</published>
    <updated>2021-06-14T15:26:58.090Z</updated>
    
    <content type="html"><![CDATA[<h3 id="用基因工程的定义原理来阐述重组新冠病毒疫苗"><a class="header-anchor" href="#用基因工程的定义原理来阐述重组新冠病毒疫苗"></a>用基因工程的定义原理来阐述重组新冠病毒疫苗</h3><h3 id="根据你的设想设计一款转基因产品，简述它的设计思路及其应用"><a class="header-anchor" href="#根据你的设想设计一款转基因产品，简述它的设计思路及其应用"></a>根据你的设想设计一款转基因产品，简述它的设计思路及其应用</h3><p>略</p><h3 id="基因工程中常用工具酶种类有哪些-他们的主要作用是什么"><a class="header-anchor" href="#基因工程中常用工具酶种类有哪些-他们的主要作用是什么"></a>基因工程中常用工具酶种类有哪些?他们的主要作用是什么?</h3><h3 id="什么是星活性？引起星活性的因素有哪些？哪些措施可以抑制星活性？"><a class="header-anchor" href="#什么是星活性？引起星活性的因素有哪些？哪些措施可以抑制星活性？"></a>什么是星活性？引起星活性的因素有哪些？哪些措施可以抑制星活性？</h3><h3 id="切口移位（nick-translation）标记探针的主要步骤有哪些"><a class="header-anchor" href="#切口移位（nick-translation）标记探针的主要步骤有哪些"></a>切口移位（nick translation）标记探针的主要步骤有哪些?</h3><h3 id="20-ul-的酶切反应体系和-20-ul-的连接反应体系组成成分各是什么？酶切和连接的最佳反应温度又各是多少？"><a class="header-anchor" href="#20-ul-的酶切反应体系和-20-ul-的连接反应体系组成成分各是什么？酶切和连接的最佳反应温度又各是多少？"></a>20 ul 的酶切反应体系和 20 ul 的连接反应体系组成成分各是什么？酶切和连接的最佳反应温度又各是多少？</h3><h3 id="DNA-分子平末端的连接方式有哪些？"><a class="header-anchor" href="#DNA-分子平末端的连接方式有哪些？"></a>DNA 分子平末端的连接方式有哪些？</h3><h3 id="理想载体至少必备的条件有哪些"><a class="header-anchor" href="#理想载体至少必备的条件有哪些"></a>理想载体至少必备的条件有哪些</h3><h3 id="目前的主要载体种类有哪些"><a class="header-anchor" href="#目前的主要载体种类有哪些"></a>目前的主要载体种类有哪些</h3><h3 id="简述蓝白斑筛选法原理"><a class="header-anchor" href="#简述蓝白斑筛选法原理"></a>简述蓝白斑筛选法原理</h3><h3 id="简述噬菌体的三种选择标记"><a class="header-anchor" href="#简述噬菌体的三种选择标记"></a>简述噬菌体的三种选择标记</h3><h3 id="简述-YAC-载体的工作原理、应用、以及其缺点"><a class="header-anchor" href="#简述-YAC-载体的工作原理、应用、以及其缺点"></a>简述 YAC 载体的工作原理、应用、以及其缺点</h3><h3 id="简述碱裂解法和煮沸法抽提质粒-DNA-的原理。"><a class="header-anchor" href="#简述碱裂解法和煮沸法抽提质粒-DNA-的原理。"></a>简述碱裂解法和煮沸法抽提质粒 DNA 的原理。</h3><h3 id="简述电泳的基本原理。"><a class="header-anchor" href="#简述电泳的基本原理。"></a>简述电泳的基本原理。</h3><h3 id="琼脂糖凝胶电泳过程中影响-DNA-迁移率的因素有哪些？"><a class="header-anchor" href="#琼脂糖凝胶电泳过程中影响-DNA-迁移率的因素有哪些？"></a>琼脂糖凝胶电泳过程中影响 DNA 迁移率的因素有哪些？</h3><h3 id="简述-PCR-的基本原理"><a class="header-anchor" href="#简述-PCR-的基本原理"></a>简述 PCR 的基本原理</h3><h3 id="PCR-反应体系包含哪些成分"><a class="header-anchor" href="#PCR-反应体系包含哪些成分"></a>PCR 反应体系包含哪些成分</h3><h3 id="引物设计需遵循的原则有哪些"><a class="header-anchor" href="#引物设计需遵循的原则有哪些"></a>引物设计需遵循的原则有哪些</h3><h3 id="分子杂交的概念"><a class="header-anchor" href="#分子杂交的概念"></a>分子杂交的概念</h3><h3 id="Southern-杂交的原理"><a class="header-anchor" href="#Southern-杂交的原理"></a>Southern 杂交的原理</h3><h3 id="Northern-印迹与-Southern-印迹有哪些不同？"><a class="header-anchor" href="#Northern-印迹与-Southern-印迹有哪些不同？"></a>Northern 印迹与 Southern 印迹有哪些不同？</h3><h3 id="基因芯片的概念及应用"><a class="header-anchor" href="#基因芯片的概念及应用"></a>基因芯片的概念及应用</h3><h3 id="最常用的三种外源基因导入植物细胞的方法及原理"><a class="header-anchor" href="#最常用的三种外源基因导入植物细胞的方法及原理"></a>最常用的三种外源基因导入植物细胞的方法及原理</h3><h3 id="农杆菌-Ti-质粒的基因结构及各个结构的功能"><a class="header-anchor" href="#农杆菌-Ti-质粒的基因结构及各个结构的功能"></a>农杆菌 Ti 质粒的基因结构及各个结构的功能</h3><h3 id="简述农杆菌-Ti-质粒上的-T-DNA-导入植物基因组的过程"><a class="header-anchor" href="#简述农杆菌-Ti-质粒上的-T-DNA-导入植物基因组的过程"></a>简述农杆菌 Ti 质粒上的 T-DNA 导入植物基因组的过程</h3><h3 id="报告基因的概念"><a class="header-anchor" href="#报告基因的概念"></a>报告基因的概念</h3><h3 id="转植酸酶玉米，为什么要转植酸酶基因？植酸酶基因来自哪里？该转基因玉米的操作流程是怎么样的？"><a class="header-anchor" href="#转植酸酶玉米，为什么要转植酸酶基因？植酸酶基因来自哪里？该转基因玉米的操作流程是怎么样的？"></a>转植酸酶玉米，为什么要转植酸酶基因？植酸酶基因来自哪里？该转基因玉米的操作流程是怎么样的？</h3><h3 id="叙述-Tet-on-型四环素诱导系统的原理。"><a class="header-anchor" href="#叙述-Tet-on-型四环素诱导系统的原理。"></a>叙述 Tet-on 型四环素诱导系统的原理。</h3><h3 id="化学降解法测序原理"><a class="header-anchor" href="#化学降解法测序原理"></a>化学降解法测序原理</h3><h3 id="Sanger双脱氧链终止法测序原理"><a class="header-anchor" href="#Sanger双脱氧链终止法测序原理"></a>Sanger双脱氧链终止法测序原理</h3><h3 id="第二代和第三代测序技术分别有哪些技术？"><a class="header-anchor" href="#第二代和第三代测序技术分别有哪些技术？"></a>第二代和第三代测序技术分别有哪些技术？</h3><h3 id="目前测序技术有哪些方面的应用？"><a class="header-anchor" href="#目前测序技术有哪些方面的应用？"></a>目前测序技术有哪些方面的应用？</h3><h3 id="基因组文库和-cDNA-文库的定义、各自构建的流程、以及两者的特点"><a class="header-anchor" href="#基因组文库和-cDNA-文库的定义、各自构建的流程、以及两者的特点"></a>基因组文库和 cDNA 文库的定义、各自构建的流程、以及两者的特点</h3><h3 id="酵母双杂交的原理以及应用"><a class="header-anchor" href="#酵母双杂交的原理以及应用"></a>酵母双杂交的原理以及应用</h3><h3 id="动物基因工程的概念"><a class="header-anchor" href="#动物基因工程的概念"></a>动物基因工程的概念</h3><p>转基因动物（transgenic animal）：分为遗传性与非遗传性</p><ul><li>遗传性（转基因动物个体）：指用DNA重组技术将人们所需要的目的基因导入动物的受精卵或早期胚胎内，使外源目的基因随细胞的分裂而增殖并在体内表达，且能稳定地遗传给后代的动物。</li><li>非遗传性（动物细胞工程）：指用DNA重组技术将人们所需要的目的基因导入动物受体细胞，使外源目的基因随细胞的分裂而增殖并在体内表达，仅在当代表现，不遗传给子代。</li></ul><h3 id="转基因动物的制备方法主要有哪些？"><a class="header-anchor" href="#转基因动物的制备方法主要有哪些？"></a>转基因动物的制备方法主要有哪些？</h3><p>目前，研究制备转基因动物的主要方法有:</p><ol><li>显微注射法</li><li>胚胎干细胞法</li><li>反转录病毒感染法</li><li>精子载体导入法</li><li>体细胞核移植法</li></ol><h3 id="简述-CRISPR-Cas9-基因定向打靶技术的原理"><a class="header-anchor" href="#简述-CRISPR-Cas9-基因定向打靶技术的原理"></a>简述 CRISPR/Cas9 基因定向打靶技术的原理</h3><p>该系统原来是细菌及古菌适应性免疫系统的一部分，其功能是抵御病毒及外源 DNA 的入侵。 CRISPR/Cas 系统由 CRISPR 序列和 Cas 基因家族组成。其中，CRISPR 序列由一系列间隔序列及高度保守的正向重复序列相间排列形成，Cas 基因簇位于 CRISPR 序列的 5′ 端，编码的蛋白质可特异性切割外源 DNA。</p><p>CRISPR 是一种特殊的 DNA 重复序列家族，广泛分布于细菌和古细菌基因组中。CRISPR 位点通常由短的高度保守的重复序列（repeats）组成，重复序列的长度通常为 21 ~ 48 bp，重复序列之间被 26 ~ 72 bp 间隔序列（spacer）隔开。CRISPR 通过这些间隔序列与靶基因进行识别。</p><p>Cas（CRISPR associated）存在于 CRISPR 位点附近，是一种双链 DNA 核酸酶，能在 guide RNA 引导下对靶位点进行切割。它与 fok I 酶功能类似，但是它并不需要形成二聚体才能发挥作用。</p><p>CRISPR/Cas 系统分为 I 型、Ⅱ 型和 Ⅲ 型，以 Ⅱ 型的应用最为广泛。有外源 DNA 入侵时，CRISPR 序列转录并被加工形成约 40 nt（核苷酸数） 的成熟 crRNA（CRISPR RNAs）。成熟的 crRNA 与 tracrRNA（trans-activating CRISPR RNA）通过碱基互补配对形成双链 RNA，激活并引导 Cas9 切割外源 DNA 中的原型间隔序列（protospacer）。Cas9 蛋白具有两个核酸酶结构域：RuvC-like 结构域和 HNH 结构域，其中，HNH 结构域切割原型间隔序列中与 crRNA 互补配对的 DNA 链，RuvC-like 结构域切割另一条非互补链。研究表明，Cas9 对靶序列的编辑依赖于原型间隔序列下游的短序列 PAM （protospacer-adjacent motifs），PAM 通常为 5′-NGC-3′，极少情况下为 5′-NAG-3′，Cas9 切割的位点位于 PAM 上游第三个碱基。</p><p>根据 CRISPR/Cas9 系统的特点，研究者将 crRNA::tracrRNA 双分子结构融合成具有发夹结构的 sgRNA（single guide RNA），sgRNA 分子 5′ 端 20 nt 的引导序列可完全与 DNA 靶序列互补，从而引导 Cas9 对靶 DNA 进行编辑。只要改变 sgRNA 中的 20 nt 引导序列，基因组上任意 5′-(N)<sub>20</sub>-NGG-3′ 序列都可以被 CRISPR/Cas9 系统编辑。</p><p><img src="https://cdn.jsdelivr.net/gh/halo-blog/cdn-blog-img-c@master/img/CRISPRCas9.49zxlie890s0.png" alt="CRISPRCas9"></p><p>a ~ c 是 CRISPR/Cas9 系统的天然机制，d 是在基因编辑中 crRNA::tracrRNA 双分子结构融合成具有发夹结构的 sgRNA。</p><p>引用自 Antara Barman <a href="https://sci-hub.se/10.1007/s00294-019-01040-3"> doi：10.1007/s00294-019-01040-3 </a></p><p>10.1016/j.cell.2015.12.041</p><h3 id="详述将基因打靶技术联合应用胚胎干细胞法制备转基因动物的流程"><a class="header-anchor" href="#详述将基因打靶技术联合应用胚胎干细胞法制备转基因动物的流程"></a>详述将基因打靶技术联合应用胚胎干细胞法制备转基因动物的流程</h3><p>ESC 法是将外源 DNA 定向整合到内源基因组中表达。将转染的胚胎干细胞注射入受体囊胚腔，可参与嵌合体的形成，将来出生的动物的生殖系统就有可能整合上外源基因，通过杂交繁育得到纯合目的基因的个体，即为转基因动物。</p><ol><li>外源目的基因的制备，把目的基因和调控序列等与内源靶序列同源的序列都重组到带标记基因的载体上。</li><li>把打靶载体导入胚胎干细胞内;</li><li>对同源重组子进行筛选，用选择性培养基筛选打靶击中的重组阳性细胞。</li><li>选择合适的体外培养系统和宿主动物，将重组阳性细胞转入动物胚胎</li><li>对转基因细胞胚胎发育及鉴定</li><li>筛选所得的转基因动物品系</li></ol><h3 id="详述转基因动物技术的应用"><a class="header-anchor" href="#详述转基因动物技术的应用"></a>详述转基因动物技术的应用</h3><h3 id="酵母基因工程的优势有哪些方面？"><a class="header-anchor" href="#酵母基因工程的优势有哪些方面？"></a>酵母基因工程的优势有哪些方面？</h3><p>酵母菌表达外源基因的优势:</p><ul><li>酵母菌是最简单的真核模式生物</li><li>完成全基因组测序，基因表达调控机理比较清楚，遗传操作简便</li><li>具有原核细菌无法比拟的真核蛋白翻译后加工系统</li><li>大规模发酵历史悠久、技术成熟、工艺简单、成本低廉</li><li>能将外源基因表达产物分泌至培养基中</li><li>采用高表达的启动子，如 MOX、AOX、LAC4 等</li><li>不含有特异性的病毒、不产内毒素，美国 FDA 认定为安全的基因工程受体系统</li></ul><h3 id="详述酵母基因工程的应用进展"><a class="header-anchor" href="#详述酵母基因工程的应用进展"></a>详述酵母基因工程的应用进展</h3><p>利用酵母基因工程成功地生产了人类、动物、植物或微生物来源的异源蛋白，在医药生物技术上发挥了重要作用。例如：</p><ul><li>生物反应器。人血清白蛋白、溶菌酶、乙肝疫苗等。</li><li>人类蛋白质间的互作。如利用酵母表达系统开展分泌蛋白和受体基因的快速筛选。</li><li>筛选新药。利用酵母展示技术筛选细胞凋亡的抑制剂、HIV-1 整合抑制新药等。</li><li>利用酵母表达膜蛋白。</li></ul><p>近年来，酵母基因工程菌已经实现了工业化生产，酵母产生的蛋白已经用在食品、饲料、洗涤、纺织和造纸等行业。尤其在酶制剂领域，国内有近 10 家企业的酶制剂年产量达到万吨，年总产值约 10 亿，并且以每年 10% 左右的速度增长。例如：</p><ul><li>利用重组酿酒酵母提高酿酒工艺</li><li>利用重组酿酒酵母环境能源危机。通过转基因技术使酿酒酵母能利用纤维素和半纤维素等可再生物质来生产廉价的酒精，缓解能源紧张。</li><li>利用毕赤酵母生产饲料用植酸酶。</li><li>利用酿酒酵母生产谷胱甘肽</li></ul><h3 id="什么是基因治疗"><a class="header-anchor" href="#什么是基因治疗"></a>什么是基因治疗</h3><p>基因治疗的概念:</p><ul><li>经典概念（狭义概念）：针对患者的基因缺陷，导入特定基因补偿其缺陷或赋予机体新的功能以抗衡缺陷。</li><li>广义概念：将目的基因放进特定载体中导入靶细胞或组织，通过替换或补偿引起疾病的基因，调节异常表达的基因来治疗或缓解疾病，均称之为基因治疗。</li></ul><h3 id="目前基因药物的分类及作用原理"><a class="header-anchor" href="#目前基因药物的分类及作用原理"></a>目前基因药物的分类及作用原理</h3><p>基因工程药物包括蛋白质类药物和核酸类药物两类：</p><ul><li>蛋白质类药物主要有重组细胞因子、重组多肽类激素、重组溶栓药物、基因工程抗体和基因工程疫苗等。</li><li>核酸类药物主要有 DNA 药物，反义核酸药和 RNA 干扰药物等。主要针对的疾病有肿瘤、感染性疾病、人免疫缺陷病毒相关疾病、自身免疫性疾病、器官移植、心血管疾病、神经障碍性疾病等。</li></ul><p>基因工程药物的作用机理分为以下三类：</p><ul><li>蛋白或多肽药物：通过蛋白自身的生理生化特性而抵抗疾病，胰岛素、生长素等激素，各类生长因子。</li><li>基因工程疫苗、基因工程抗体：基于抗原抗体反应的原理来抵抗疾病；乙肝疫苗，新冠肺炎疫苗，霍乱菌疫苗等。</li><li>反义核酸、核酶和 RNAi，基于中断基因表达来抵抗疾病。福米韦生，第一代反义核酸药物，治疗艾滋病（AIDS）病人并发的巨细胞病毒（CMV）性视网膜炎。通过对人类巨细胞病毒（CMV） mRNA 的反义抑制发挥特异而强大的抗病毒作用。</li></ul><h3 id="详述基因治疗在肿瘤治疗上的主要方向及重大进展"><a class="header-anchor" href="#详述基因治疗在肿瘤治疗上的主要方向及重大进展"></a>详述基因治疗在肿瘤治疗上的主要方向及重大进展</h3><p>主要方向有：</p><ul><li>自杀基因治疗：通过转入自杀基因引起肿瘤细胞表型的改变，从而引起药物对肿瘤细胞直接或间接杀伤作用</li><li>免疫基因治疗：是把产生抗病毒或者肿瘤免疫力对应的抗原决定族基因导入机体细胞，以达到治疗目的。</li><li>小分子干扰 RNA 治疗：通过转入外源的小分子 RNA 干扰沉默肿瘤细胞中突变基因的表达</li><li>增强药物化疗效果：通过外源基因的引入增强药物化疗效果</li><li>利用基因编辑技术（重大进展）：CRISPR 技术有望进一步改进肿瘤免疫疗法，人工改造的具有嵌合抗原受体的 T 细胞，重新恢复对肿瘤细胞的免疫抑制作用。</li></ul><p>参考文献：</p><ul><li>钟里科.肿瘤免疫治疗的研究进展[J].临床医药文献电子杂志,2017,4(43):8356-8357.</li><li>孟圆,马晓磊.外源基因治疗肿瘤研究进展[J].济宁医学院学报,2017,40(06):457-461.</li><li>马云青,常兴.基因编辑与基因治疗[J].生命的化学,2019,39(01):21-27.</li></ul><p>基因编辑技术同样在肿瘤治疗领域可能得到有效应用。肿瘤的发生涉及许多基因，包括原癌基因、抑癌基因等。</p><p>例如，人子宫颈癌的发生和 HPV （human papilloma virus）感染密切相关。HPV 是 DNA 病毒。HPV 病毒 DNA 在超过 95% 的子宫颈癌患者中被发现。HPV 主要致癌基因为 <em>E6</em>、<em>E7</em>。E6 和 E7 会选择性地表达于 HPV 相关的肿瘤细胞中，使抑癌基因 <em>p53</em> 和 <em>pRb</em> 失活，细胞周期紊乱，端粒酶活化，从而使肿瘤细胞永生。其中 E6 诱导 p53 降解，从而抑制 p53 相关的信号通路，导致癌化。E7 通过与 pRb 蛋白作用使细胞周期调节紊乱。因此，E6 和 E7 基因成为子宫颈癌的基因治疗靶点。目前，体内外实验已证明，CRISPR/Cas9 技术可以靶向 E6 和 E7 编码基因的启动子区域和基因编码区域进行基因敲除，阻止肿瘤细胞增殖。</p><p>CRISPR 技术也有望进一步改进肿瘤免疫疗法。肿瘤免疫疗法采取另外一种思路来对抗肿瘤，治疗靶点不再是肿瘤，而是免疫系统。该疗法主要采用具有抗肿瘤功能的单克隆抗体或者供体 T 细胞。肿瘤细胞会发生大量的遗传学改变和表观遗传学修饰，从而产生肿瘤细胞特异性的抗原，正常情况下，宿主免疫系统会识别这些特异性的抗原，并且清除肿瘤。但肿瘤也会进化出相应的免疫逃逸机制。其中一种重要的免疫逃逸机制是免疫抑制信号通路——免疫检查点，正常情况下，免疫检查点会介导免疫耐受，减轻组织损伤；但病理情况下，肿瘤细胞会通过免疫检查点抑制免疫系统的活化逃避免疫系统的监视。其中重要的免疫检查点是细胞毒 T 淋巴细胞相关抗原-4（处 cytotoxic T-lymphocyte-associated antigen-4, CTLA-4）和程序性死亡分子 PD-1（programmed<br>death-1, PD-1）</p><p>为了重新恢复对肿瘤细胞的免疫抑制作用，采用人工改造的具有嵌合抗原受体的 T 细胞 [chimeric antigen receptor (CAR) T cells]。嵌合抗原受体在 T 细胞外部具有针对肿瘤细胞特异性抗原的结合结构域，在 T 细胞内部具有 T 细胞激活结构域和 T 细胞肿瘤细胞杀伤功能促进结构域。但是绝大数的 CART 来源于病人自身T细胞，时间成本和费用成本都很高，相对常规的抗体封闭免疫检查点的方法并不具有优势。通用的 CART 细胞会降低成本，但会与受体彼此间产生免疫排斥。ZFN 技术和 TALEN 技术已经实现了 T 细胞中内源性 TCR 基因敲除以及 CART 细胞中主要组织相容性抗原的敲除，从而解决免疫排斥问题。除此之外，为进一步加强 CART 的功能，有学者利用基因编辑技术将 CTLA-4 或 PD-1 基因敲除。</p>]]></content>
    
    
    <summary type="html">仅供参考</summary>
    
    
    
    <category term="生物技术复习资料" scheme="https://halo123.top/categories/%E7%94%9F%E7%89%A9%E6%8A%80%E6%9C%AF%E5%A4%8D%E4%B9%A0%E8%B5%84%E6%96%99/"/>
    
    
    <category term="复习资料" scheme="https://halo123.top/tags/%E5%A4%8D%E4%B9%A0%E8%B5%84%E6%96%99/"/>
    
    <category term="基因工程" scheme="https://halo123.top/tags/%E5%9F%BA%E5%9B%A0%E5%B7%A5%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>语摘</title>
    <link href="https://halo123.top/2021/05/27/Plan/%E8%AF%AD%E6%91%98/"/>
    <id>https://halo123.top/2021/05/27/Plan/%E8%AF%AD%E6%91%98/</id>
    <published>2021-05-27T08:28:48.000Z</published>
    <updated>2021-05-28T04:19:44.558Z</updated>
    
    <content type="html"><![CDATA[<h2 id="凯文·凯利给年轻人的建议"><a class="header-anchor" href="#凯文·凯利给年轻人的建议"></a>凯文·凯利给年轻人的建议</h2><div class="tag link"><a class="link-card" title="凯文·凯利《给年轻人的 99 条建议》" href="https://kk.org/thetechnium/99-additional-bits-of-unsolicited-advice/"><div class="left"><img src="https://cdn.jsdelivr.net/gh/halo-blog/cdn-blog-img-a@master/img/网站.svg"/></div><div class="right"><p class="text">凯文·凯利《给年轻人的 99 条建议》</p><p class="url">https://kk.org/thetechnium/99-additional-bits-of-unsolicited-advice/</p></div></a></div><div class="tag link"><a class="link-card" title="阮一峰 科技爱好者周刊（第 157 期）" href="https://github.com/ruanyf/weekly/blob/master/docs/issue-157.md"><div class="left"><img src="https://cdn.jsdelivr.net/gh/halo-blog/cdn-blog-img-b@master/img/GithubIcon.jpg"/></div><div class="right"><p class="text">阮一峰 科技爱好者周刊（第 157 期）</p><p class="url">https://github.com/ruanyf/weekly/blob/master/docs/issue-157.md</p></div></a></div><ul><li>That thing that made you weird as a kid could make you great as an adult — if you don′t lose it. 小时候，让你与其它同学格格不入的东西，长大后会帮助你成功，如果你不失去它的话。</li><li>If you have any doubt at all about being able to carry a load in one trip, do yourself a huge favor and make two trips.</li><li>What you get by achieving your goals is not as important as what you become by achieving your goals. At your funeral people will not recall what you did; they will only remember how you made them feel.</li><li>Recipe for success: under-promise and over-deliver.</li><li>It′s not an apology if it comes with an excuse. It is not a compliment if it comes with a request.</li><li>Jesus, Superman, and Mother Teresa never made art. Only imperfect beings can make art because art begins in what is broken.</li><li>If someone is trying to convince you it′s not a pyramid scheme, it′s a pyramid scheme.</li><li>Learn how to tie a bowline knot. Practice in the dark. With one hand. For the rest of your life you′ll use this knot more times than you would ever believe.</li><li>If something fails where you thought it would fail, that is not a failure.</li><li>Be governed not by the tyranny of the urgent but by the elevation of the important.</li><li>Leave a gate behind you the way you first found it.</li><li>The greatest rewards come from working on something that nobody has a name for. If you possibly can, work where there are no words for what you do.</li><li>A balcony or porch needs to be at least 6 feet (2m) deep or it won′t be used.</li><li>Don′t create things to make money; make money so you can create things. The reward for good work is more work.</li><li>In all things — except love — start with the exit strategy. Prepare for the ending. Almost anything is easier to get into than out of.</li><li>Train employees well enough they could get another job, but treat them well enough so they never want to.</li><li>Don′t aim to have others like you; aim to have them respect you.</li><li>The foundation of maturity: Just because it′s not your fault doesn′t mean it′s not your responsibility.</li><li>A multitude of bad ideas is necessary for one good idea.</li><li>Being wise means having more questions than answers.</li><li>Compliment people behind their back. It′ll come back to you.</li><li>Most overnight successes — in fact any significant successes — take at least 5 years. Budget your life accordingly.</li><li>You are only as young as the last time you changed your mind.</li><li>Assume anyone asking for your account information for any reason is guilty of scamming you, unless proven innocent. The way to prove innocence is to call them back, or login to your account using numbers or a website that you provide, not them. Don′t release any identifying information while they are contacting you via phone, message or email. You must control the channel.</li><li>Sustained outrage makes you stupid.</li><li>Be strict with yourself and forgiving of others. The reverse is hell for everyone.</li><li>Your best response to an insult is “You′re probably right.” Often they are.</li><li>The worst evils in history have always been committed by those who truly believed they were combating evil. Beware of combating evil.</li><li>If you can avoid seeking approval of others, your power is limitless.</li><li>When a child asks an endless string of “why?” questions, the smartest reply is, “I don′t know, what do you think?”</li><li>To be wealthy, accumulate all those things that money can′t buy.</li><li>Be the change you wish to see.</li><li>When brainstorming, improvising, jamming with others, you′ll go much further and deeper if you build upon each contribution with a playful “yes — and” example instead of a deflating “no — but” reply.</li><li>Work to become, not to acquire.</li><li>Don′t loan money to a friend unless you are ready to make it a gift.</li><li>On the way to a grand goal, celebrate the smallest victories as if each one were the final goal. No matter where it ends you are victorious.</li><li>Calm is contagious.</li><li>Even a foolish person can still be right about most things. Most conventional wisdom is true.</li><li>Always cut away from yourself.</li><li>Show me your calendar and I will tell you your priorities. Tell me who your friends are, and I′ll tell you where you′re going.</li><li>When hitchhiking, look like the person you want to pick you up.</li><li>Contemplating the weaknesses of others is easy; contemplating the weaknesses in yourself is hard, but it pays a much higher reward.</li><li>Worth repeating: measure twice, cut once.</li><li>Your passion in life should fit you exactly; but your purpose in life should exceed you. Work for something much larger than yourself.</li><li>If you can′t tell what you desperately need, it′s probably sleep.</li><li>When playing Monopoly, spend all you have to buy, barter, or trade for the Orange properties. Don′t bother with Utilities.</li><li>If you borrow something, try to return it in better shape than you received it. Clean it, sharpen it, fill it up.</li><li>Even in the tropics it gets colder at night than you think. Pack warmly.</li><li>To quiet a crowd or a drunk, just whisper.</li><li>Writing down one thing you are grateful for each day is the cheapest possible therapy ever.</li><li>When someone tells you something is wrong, they′re usually right. When someone tells you how to fix it, they′re usually wrong.</li><li>If you think you saw a mouse, you did. And, if there is one, there are more.</li><li>Money is overrated. Truly new things rarely need an abundance of money. If that was so, billionaires would have a monopoly on inventing new things, and they don′t. Instead almost all breakthroughs are made by those who lack money, because they are forced to rely on their passion, persistence and ingenuity to figure out new ways. Being poor is an advantage in innovation.</li><li>Ignore what others may be thinking of you, because they aren′t.</li><li>Avoid hitting the snooze button. That′s just training you to oversleep.</li><li>Always say less than necessary.</li><li>You are given the gift of life in order to discover what your gift <em>in</em> life is. You will complete your mission when you figure out what your mission is. This is not a paradox. This is the way.</li><li>Don′t treat people as bad as they are. Treat them as good as you are.</li><li>It is much easier to change how you think by changing your behavior, than it is to change your behavior by changing how you think. Act out the change you seek.</li><li>You can eat any dessert you want if you take only 3 bites.</li><li>Each time you reach out to people, bring them a blessing; then they′ll be happy to see you when you bring them a problem.</li><li>Bad things can happen fast, but almost all good things happen slowly.</li><li>Don′t worry how or where you begin. As long as you keep moving, your success will be far from where you start.</li><li>When you confront a stuck bolt or screw: righty tighty, lefty loosey.</li><li>If you meet a jerk, overlook them. If you meet jerks everywhere everyday, look deeper into yourself.</li><li>Dance with your hips.</li><li>We are not bodies that temporarily have souls. We are souls that temporarily have bodies.</li><li>You can reduce the annoyance of someone′s stupid belief by increasing your understanding of why they believe it.</li><li>If your goal does not have a schedule, it is a dream.</li><li>All the greatest gains in life — in wealth, relationships, or knowledge —come from the magic of compounding interest — amplifying small steady gains. All you need for abundance is to keep adding 1% more than you subtract on a regular basis.</li><li>The greatest breakthroughs are missed because they look like hard work.</li><li>People can′t remember more than 3 points from a speech.</li><li>I have never met a person I admired who did not read more books than I did.</li><li>The greatest teacher is called “doing”.</li><li>Finite games are played to win or lose. Infinite games are played to keep the game going. Seek out infinite games because they yield infinite rewards.</li><li>Everything is hard before it is easy. The day before something is a breakthrough, it′s a stupid idea.</li><li>A problem that can be solved with money is not really a problem.</li><li>When you are stuck, sleep on it. Let your subconscious work for you.</li><li>Your work will be endless, but your time is finite. You cannot limit the work so you must limit your time. Hours are the only thing you can manage.</li><li>To succeed, get other people to pay you; to become wealthy, help other people to succeed.</li><li>Children totally accept — and crave — family rules. “In our family we have a rule for X” is the only excuse a parent needs for setting a family policy. In fact, “I have a rule for X” is the only excuse you need for your own personal policies.</li><li>All guns are loaded.</li><li>Many backward steps are made by standing still.</li><li>This is the best time ever to make something. None of the greatest, coolest creations 20 years from now have been invented yet. You are not late.</li><li>No rain, no rainbow.</li><li>Every person you meet knows an amazing lot about something you know virtually nothing about. Your job is to discover what it is, and it won′t be obvious.</li><li>You don′t marry a person, you marry a family.</li><li>Always give credit, take blame.</li><li>Be frugal in all things, except in your passions splurge.</li><li>When making something, always get a few extras — extra material, extra parts, extra space, extra finishes. The extras serve as backups for mistakes, reduce stress, and fill your inventory for the future. They are the cheapest insurance.</li><li>Something does not need to be perfect to be wonderful. Especially weddings.</li><li>Don′t let your email inbox become your to-do list.</li><li>The best way to untangle a knotty tangle is not to “untie” the knots, but to keep pulling the loops apart wider and wider. Just make the mess as big, loose and open as possible. As you open up the knots they will unravel themselves. Works on cords, strings, hoses, yarns, or electronic cables.</li><li>Be a good ancestor. Do something a future generation will thank you for. A simple thing is to plant a tree.</li><li>To combat an adversary, become their friend.</li><li>Take one simple thing — almost anything — but take it extremely seriously, as if it was the only thing in the world, or maybe the entire world is in it — and by taking it seriously you′ll light up the sky.</li><li>History teaches us that in 100 years from now some of the assumptions you believed will turn out to be wrong. A good question to ask yourself today is “What might I be wrong about?”</li><li>Be nice to your children because they are going to choose your nursing home.</li><li>Advice like these are not laws. They are like hats. If one doesn′t fit, try another.</li></ul>]]></content>
    
    
    <summary type="html">记录</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>数据的表示和运算</title>
    <link href="https://halo123.top/2021/05/26/ComputerComposition/B-%E6%95%B0%E6%8D%AE%E7%9A%84%E8%A1%A8%E7%A4%BA%E5%92%8C%E8%BF%90%E7%AE%97/"/>
    <id>https://halo123.top/2021/05/26/ComputerComposition/B-%E6%95%B0%E6%8D%AE%E7%9A%84%E8%A1%A8%E7%A4%BA%E5%92%8C%E8%BF%90%E7%AE%97/</id>
    <published>2021-05-26T11:56:05.000Z</published>
    <updated>2021-05-30T08:49:35.881Z</updated>
    
    <content type="html"><![CDATA[<h2 id="数制与编码"><a class="header-anchor" href="#数制与编码"></a>数制与编码</h2><p>在计算机系统内部，所有的信息都是用二进制进行编码的，这样做的原因有以下几点：</p><ol><li>二进制只有两种状态，使用有两个稳定状态的物理器件就可以表示二进制数的每一位，制造成本比较低，例如用高低电平或电荷的正负极性都可以很方便地表示 0 和 1。</li><li>二进制位 1 和 0 正好与逻辑值“真”和“假”对应，为计算机实现逻辑运算和程序中的逻辑判断提供了便利条件。</li><li>二进制的编码和运算规则都很简单，通过逻辑门电路能方便地实现算术运算。</li></ol><h3 id="进位计数法"><a class="header-anchor" href="#进位计数法"></a>进位计数法</h3><p>进位计数法是一种计数的方法。常用的进位计数法有十进制、二进制、八进制、十六进制等。十进制数是日常生活中最常使用的，而计算机中通常使用二进制数、八进制数和十六进制数。</p><p>在进位计数法中，每个数位所用到的不同数码的个数称为基数。十进制的基数为 10（0 ~ 9），每个数位计满 10 就向高位进位，即“逢十进一”。十进制数 101，其个位的 1 显然与百位的 1 所表示的数值是不同的。每个数码所表示的数值等于该数码本身乘以一个与它所在数位有关的常数，这个常数称为位权。一个进位数的数值大小就是它的各位数码按权相加。</p><p>一个 $r$ 进制数（$K_{n} K_{n-1} \cdots K_{0} K_{-1} \cdots K_{-m}$）的数值可表示为：$$K_{n} r^{n}+ K_{n-1} r^{n-1} + \cdots + K_{0} r^{0} + K_{-1} r^{-1} + \cdots + K_{-m} r^{-m} = \sum_{i=n}^{-m} K_{i} r^{i}$$式中，$r$ 是基数；$r^{i}$ 是第 $i$ 位的位权（整数位最低规定为第 0 位）；$K_{i}$ 的取值可以是 $0,1,\cdots,r-1$ 共 $r$ 个数码中的任意一个。</p><ul><li>二进制。计算机中用得最多的是基数为 2 的计数制，即二进制。二进制只有 0 和 1 两种数字符号，计数“逢二进一”。它的任意数位的权为 $2^{i}$，$i$ 为所在位数。</li><li>八进制。八进制作为二进制的一种书写形式，其基数为 8，有 0 ~ 7 共 8 个不同的数字符号，计数“逢八进一”。因为 $r=8=2^{3}$，所以只要把二进制中的 3 位数码编为一组就是一位八进制数码，两者之间的转换极为方便。</li><li>十六进制。十六进制也是二进制的一种常用书写形式，其基数为 16，“逢十六进一”。 每个数位可取 0 ~ 9、A、B、C、D、E、F 中的任意一个，其中 A、B、C、D、E、F 分别表示 10 ~ 15。因为 $r=16=2^{4}$，因此 4 位二进制数码与 1 位十六进制数码相对应。</li></ul><h3 id="不同进制数之间的相互转换"><a class="header-anchor" href="#不同进制数之间的相互转换"></a>不同进制数之间的相互转换</h3><p>（1）二进制数转为八进制数和十六进制数</p><p>对于一个二进制混合数（既包含整数部分，又包含小数部分），在转换时应以小数点为界。</p><ul><li>其整数部分，从小数点开始往左数，将一串二进制数分为 3 位（八进制）一组或 4 位（十六进制）一组，在数的最左边可根据需要加“0”补齐；</li><li>对于小数部分，从小数点开始往右数，也将一串二进制数分为 3 位一组或 4 位一组，在数的最右边也可根据需要加“0”补齐。最终使总的位数为 3 或 4 的整数倍，然后分别用对应的八进制数或十六进制数取代。</li></ul><p>同样，由八进制数或十六进制数转换成二进制数， 只需将每位改为 3 位或 4 位二进制数即可（必要时去掉整数最高位或小数最低位的 0）。</p><p>八进制数和十六进制数之间的转换也能方便地实现，十六进数制转换为八进制数（或八进制数转换为十六进制数）时，先将十六进制（八进制）数转换为二进制数，然后由二进制数转换为八进制（十六进制）数较为方便。</p><p>（2）任意进制数转换为十进制数</p><p>将任意进制数的各位数码与它们的权值相乘，再把乘积相加，就得到了一个十进制数。这种方法称为按权展开相加法。</p><p>（3）十进制数转换为任意进制数</p><p>一个十进制数转换为任意进制数，常采用基数乘除法。这种转换方法对十进制数的整数部分和小数部分将分别进行处理，对整数部分用除基取余法，对小数部分用乘基取整法，最后将整数部分与小数部分的转换结果拼接起来。</p><ul><li>除基取余法（整数部分的转换）：整数部分除基取余，最先取得的余数为数的最低位，最后取得的余数为数的最高位（即除基取余，先余为低，后余为高），商为 0 时结束。</li><li>乘基取整法（小数部分的转换）：小数部分乘基取整，最先取得的整数为数的最高位，最后取得的整数为数的最低位（即乘基取整，先整为高，后整为低），乘积为 1.0 （或满足精度要求）时结束。</li></ul><p>例如将十进制数 123.6875 转换成二进制数：</p><p><img src="https://cdn.jsdelivr.net/gh/halo-blog/cdn-blog-img-b@master/img/%E5%8D%81%E8%BF%9B%E5%88%B6%E6%95%B0%E8%BD%AC%E6%8D%A2%E4%B8%BA%E4%BB%BB%E6%84%8F%E8%BF%9B%E5%88%B6%E6%95%B0.png" alt="十进制数转换为任意进制数"></p><p>因此整数部分 123 = (1111011)<sub>2</sub> ，小数部分 0.6885 = (0.1011)<sub>2</sub> ，所以 123.6875 = (1111011.1011)<sub>2</sub></p><blockquote><p>注意：在计算机中，小数和整数不一样，整数可以连续表示，但小数是离散的，所以并不是每个十进制小数都可以准确地用二进制表示。例如 0.3，无论经过多少次乘二取整转换都无法得到精确的结果。但任意一个二进制小数都可以用十进制小数表示。</p></blockquote><h3 id="真值和机器数"><a class="header-anchor" href="#真值和机器数"></a>真值和机器数</h3><p>在日常生活中，通常用正号、负号来分别表示正数（正号可省略）和负数，如 +15、-8 等。这种带“+”或“-”符号的数称为真值。真值是机器数所代表的实际值。</p><p>在计算机中，通常采用数的符号和数值一起编码的方法来表示数据。常用的有原码、补码和反码表示法。这几种表示法都将数据的符号数字化，通常用“0”表示“正”，用“1”表示“负”。如 0,101 （这里的逗号“,”实际上并不存在，仅为区分符号位与数值位）表示 +5。这种把符号“数字化”的数称为机器数。</p><h3 id="BCD-码"><a class="header-anchor" href="#BCD-码"></a>BCD 码</h3><p>二进制编码的十进制数（Binary-Coded Decimal, BCD）通常采用 4 位二进制数来表示一位十进制数中的 0 ~ 9 这 10 个数码。这种编码方法使二进制数和十进制数之间的转换得以快速进行。但 4 位二进制数可以组合出 16 种代码，因此必有 6 种状态为冗余状态。</p><p>下面列举几种常用的 BCD 码：</p><ol><li>8421 码（最常用）。它是一种有权码，设其各位的数值为 $b_{3}$，$b_{2}$，$b_{2}$，$b_{0}$，则权值从高到低依次为 8，4，2，1，它表示的十进制数为 $D= 8b_{3} +4b_{2} + 2b_{1}+ 1b_{0}$。如 8 → 1000；9 → 1001。若两个 8421 码相加之和小于等于 (1001)<sub>2</sub> 即 (9)<sub>10</sub>，则不需要修正；若相加之和大于等于 (1010)<sub>2</sub> 即 (10)<sub>10</sub>，则要加 6 修正（从 1010 到 1111 这 6 个为无效码，当运算结果落于这个区间时，需要将运算结果加上 6），并向高位进位，进位可以在首次相加或修正时产生。<br><img src="https://cdn.jsdelivr.net/gh/halo-blog/cdn-blog-img-b@master/img/8421%E7%A0%81%E4%BF%AE%E6%AD%A3.png" alt="8421码修正"></li><li>余 3 码。这是一种无权码，是在 8421 码的基础上加 (0011)<sub>2</sub> 形成的，因每个数都多余“3”，因此称为余 3 码。如 8 → 1011；9 → 1100。</li><li>2421 码。这也是一种有权码，权值由高到低分别为 2，4，2，1，特点是大于等于 5 的 4 位二进制数中最高位为 1，小于 5 的最高位为 0。如 5 → 1011 而非 0101。</li></ol><h3 id="字符与字符串"><a class="header-anchor" href="#字符与字符串"></a>字符与字符串</h3><p>由于计算机内部只能识别和处理二进制代码，所以字符都必须按照一定的规则用一组二进制编码来表示。</p><p>（1）字符编码 ASCII 码</p><p>目前，国际上普遍采用的一种字符系统是 7 位二进制编码的 ASCII 码，它可表示 10 个十进制数码、52 个英文大写字母和小写字母（A ~ Z, a ~ z）及一定数量的专用符号（如 $、%、+、= 等），共 128 个字符。</p><p>在 ASCII 码中，编码值 0 ~ 31 为控制字符，用于通信控制或设备的功能控制；编码值 127 是 DEL 码；编码值 32 是空格 SP；编码值 32 ~ 126 共 95 个字符称为可印刷字符。</p><blockquote><p>提示: 0 ~ 9 的 ASCII 码值为 48 (011 0000) ~ 57 (011 1001)，即去掉高 3 位，只保留低 4 位，正好是二进制形式的 0 ~ 9。</p></blockquote><p>（2）汉字的表示和编码</p><p>在 1981 年的国家标准 GB 2312——1980 中，每个编码用两字节表示，收录了一级汉字 3755 个、二级汉字 3008 个、各种符号 682 个，共计 7445 个。</p><p>目前最新的汉字编码是 2000 年公布的国家标准 GB 18030，它收录了 27484 个汉字。编码标准采用 1 B、2 B 和 4 B。</p><p>汉字的编码包括汉字的输入编码、汉字内码、汉字字形码三种，它们是计算机中用于输入、内部处理和输出三种用途的编码。区位码是国家标准局于 1981 年颁布的标准，它用两字节表示一个汉字，每字节用七位码，并将汉字和图形符号排列在一个 94 行 94 列的二维代码表中。区位码是 4 位十进制数，前 2 位是区码，后 2 位是位码，所以称为区位码。</p><p>国标码将十进制的区位码转换为十六进制数后，再在每字节上加上 20 H。国标码两字节的最高位都是 0，ASCII 码的最高位也是 0。为了方便计算机区分中文字符和英文字符，将国标码两字节的最高位都改为“1”，这就是汉字内码。</p><p>区位码和国标码都是输入码，它们和汉字内码的关系（十六进制）如下:</p><ul><li>国标码 = (区位码)<sub>16</sub> + 2020H</li><li>汉字内码 = (国标码)<sub>16</sub> + 8080H</li></ul><h3 id="校验码"><a class="header-anchor" href="#校验码"></a>校验码</h3><p>校验码是指能够发现或能够自动纠正错误的数据编码，也称检错纠错编码。校验码的原理是通过增加一些冗余码，来检验或纠错编码。</p><p>通常某种编码都由许多码字构成，任意两个合法码字之间最少变化的二进制位数，称为数据校验码的码距。对于码距不小于 2 的数据校验码，开始具有检错的能力。码距越大，检错、纠错的能力就越强，而且检错能力总是大于等于纠错能力。</p><h4 id="奇偶校验码"><a class="header-anchor" href="#奇偶校验码"></a>奇偶校验码</h4><p>在原编码上加一个校验位，它的码距等于 2，可以检测出一位错误（或奇数位错误），但不能确定出错的位置，也不能够检测出偶数位错误，增加的冗余位称为奇偶校验位。</p><p>奇偶校验实现的方法：由若干位有效信息（如 1 B）再加上一个二进制位（校验位）组成校验码。校验位的取值（0 或 1）将使整个校验码中“1”的个数为奇数或偶数，所以有两种可供选择的校验规律。</p><ul><li>奇校验码：整个校验码（有效信息位和校验位）中“1”的个数为奇数。</li><li>偶校验码：整个校验码（有效信息位和校验位）中“1”的个数为偶数。</li></ul><p>缺点：具有局限性，奇偶校验只能发现数据代码中奇数位的出错情况，但不能纠正错误，常用于对存储器数据的检查或传输数据的检查。</p><h4 id="海明校验码"><a class="header-anchor" href="#海明校验码"></a>海明校验码</h4><p>海明码是广泛采用的一种有效的校验码，它实际上是一种多重奇偶校验码。其实现原理是在有效信息位中加入几个校验位形成海明码，并把海明码的每个二进制位分配到几个奇偶校验组中。当某一位出错后，就会引起有关的几个校验位的值发生变化，这不但可以发现错位，还能指出错位的位置，为自动纠错提供依据。根据纠错理论得：$$L- 1=D+C \ (D \ge C)$$即编码最小码距 $L$ 越大，其检测错误的位数 $D$ 越大，纠正错误的位数 $C$ 也越大，且纠错能力恒小于等于检错能力。海明码就是根据这一理论提出的具有纠错能力的一种编码。</p><p>下面用一个例子来介绍求海明码的步骤。在 $n=4$、$k=3$ 时，求 1010 的海明码。</p><p>（1）确定海明码的位数</p><p>设 $n$ 为有效信息的位数，$k$ 为校验位的位数，则信息位 $n$ 和校验位 $k$ 应满足 $$n+k \le 2^{k}-1$$ 若要检测两位错，则需再增加 1 位校验位，即 $k+1$ 位。海明码位数为 $n+k=7 \le 2^{3}-1$ 成立，则 $n$、$k$ 有效。</p><p>设信息位为 $D_{4} D_{3} D_{2} D_{1}$（1010），共 4 位，校验位为 $P_{3} P_{2} P_{1}$，共 3 位，对应的海明码为 $H_{7} H_{6} H_{5} H_{4} H_{3} H_{2} H_{1}$。</p><p>（2）确定校验位的分布</p><p>规定校验位 $P_i$ 在海明位号为 $2^{i-1}$ 的位置上，其余各位为信息位，因此有：</p><ul><li>$P_1$ 的海明位号为 $2^{i-1} = 2^{0} = 1$，即 $H_1$ 为 $P_1$。</li><li>$P_2$ 的海明位号为 $2^{i-1} = 2^{1} = 2$，即 $H_2$ 为 $P_2$。</li><li>$P_3$ 的海明位号为 $2^{i-1} = 2^{2} = 4$，即 $H_4$ 为 $P_3$。</li></ul><p>将信息位按原来的顺序插入，则海明码各位的分布如下:<br>$$<br>\begin{matrix}<br>H_{7}  &amp; H_{6}  &amp; H_{5}  &amp; H_{4}  &amp; H_{3}  &amp; H_{2}  &amp; H_{1} \\<br>D_{4}  &amp; D_{3}  &amp; D_{2}  &amp; P_{3}  &amp; D_{1}  &amp; P_{2}  &amp; P_{1}<br>\end{matrix}<br>$$</p><p>（3）分组以形成校验关系</p><p>每个数据位用多个校验位进行校验，但要满足条件：被校验数据位的海明位号等于校验该数据位的各校验位海明位号之和。另外，校验位不需要再被校验。分组形成的校验关系如下。</p><p><img src="https://cdn.jsdelivr.net/gh/halo-blog/cdn-blog-img-b@master/img/%E6%B5%B7%E6%98%8E%E7%A0%81%E6%A0%A1%E9%AA%8C%E4%BD%8D.png" alt="海明码校验位"></p><p>（4）校验位取值</p><p>校验位 $P_i$ 的值为第 $i$ 组（由该校验位校验的数据位）所有位求异或（如果两个值不相同，则异或结果为 1。如果两个值相同，异或结果为 0。）。由上分组有：</p><p>$$<br>\begin{align*}<br>P_{1}=D_{1} \oplus D_{2} \oplus D_{4} = 0 \oplus 1 \oplus 1 = 0 \\<br>P_{2}=D_{1} \oplus D_{3} \oplus D_{4} = 0 \oplus 0 \oplus 1 = 1 \\<br>P_{3}=D_{2} \oplus D_{3} \oplus D_{4} = 1 \oplus 0 \oplus 1 = 0<br>\end{align*}<br>$$</p><p>所以，1010 对应的海明码为 1010010</p><p>（5）海明码的校验原理</p><p>每个校验组分别利用校验位和参与形成该校验位的信息位进行奇偶校验检查，构成 $k$ 个校验方程：</p><p>$$<br>\begin{align*}<br>S_{1}=P_{1} \oplus D_{1} \oplus D_{2} \oplus D_{4} \\<br>S_{2}=P_{2} \oplus D_{1} \oplus D_{3} \oplus D_{4} \\<br>S_{3}=P_{3} \oplus D_{2} \oplus D_{3} \oplus D_{4}<br>\end{align*}<br>$$</p><p>若 $S_{3}S_{2}S_{1} =000$，则说明无错；否则说明出错，且这个数就是错误的位号，如 $S_{3}S_{2}S_{1} = 001$，说明第 1 位出错，即 $H_{1}$ 出错，直接将该位取反就达到纠错的目的。</p><p><img src="https://cdn.jsdelivr.net/gh/halo-blog/cdn-blog-img-b@master/img/%E6%B5%B7%E6%98%8E%E7%A0%81%E6%A0%A1%E9%AA%8C%E5%85%83%E7%B4%A0%E5%85%B3%E7%B3%BB.png" alt="海明码校验元素关系"></p><p>海明码的检错能力为 1 位，纠错能力为 2 位。通常使用时会在最头部加上“全校验位”，对整体进行偶校验：</p><ul><li>$S_{3}S_{2}S_{1} =000$ 且全体偶校验成功，无错误</li><li>$S_{3}S_{2}S_{1} \ne 000$ 且全体偶校验失败，有 1 位错误，纠正即可</li><li>$S_{3}S_{2}S_{1} \ne 000$ 且全体偶校验成功，有 2 位称为，需重传</li></ul><p>拓展：</p><div class="tag link"><a class="link-card" title="【3Blue1Brown】汉明码Pa■t1，如何克服噪■" href="https://www.bilibili.com/video/BV1WK411N7kz"><div class="left"><img src="https://cdn.jsdelivr.net/gh/halo-blog/cdn-blog-img-b@master/img/bilibiliIcon.svg"/></div><div class="right"><p class="text">【3Blue1Brown】汉明码Pa■t1，如何克服噪■</p><p class="url">https://www.bilibili.com/video/BV1WK411N7kz</p></div></a></div><div class="tag link"><a class="link-card" title="【3Blue1Brown】汉明码part2，优雅的全貌" href="https://www.bilibili.com/video/BV1pV411y7E8"><div class="left"><img src="https://cdn.jsdelivr.net/gh/halo-blog/cdn-blog-img-b@master/img/bilibiliIcon.svg"/></div><div class="right"><p class="text">【3Blue1Brown】汉明码part2，优雅的全貌</p><p class="url">https://www.bilibili.com/video/BV1pV411y7E8</p></div></a></div><h4 id="循环冗余校验码"><a class="header-anchor" href="#循环冗余校验码"></a>循环冗余校验码</h4><ul><li>CRC 码的基本思想</li><li>如何构造</li><li>如何检错纠错</li></ul><p>循环冗余校验（Cyclic Redundancy Check，CRC）码的基本思想是：在 $K$ 位信息码后再拼接 $R$ 位的校验码，整个编码的长度为 $N$ 位，因此，这种编码又称 $(N,K)$ 码。</p><ul><li>数据发送、接收方约定一个“除数”</li><li>$K$ 个信息位 + $R$ 个校验位作为“被除数”，添加校验位后需保证除法的余数为 0</li><li>收到数据后，进行除法检查余数是否为 0，若余数非 0 说明出错，则进行重传或纠错</li></ul><p>CRC 码基于线性编码理论，在发送端，将要传送的 $K$ 位二进制信息码左移 $R$ 位，将它与生成多项式 $G(x)$ 做模 2 除法，生成一个 $R$ 位校验码，并附在信息码后，构成一个新的二进制码（CRC 码），共 $K+R$ 位。在接收端，利用生成多项式对接收到的编码做模 2 除法，以检测和确定出错的位置，如无错则整除，其中生成多项式是接收端和发送端的一个约定。</p><p>任意一个二进制数码都可用一个系数仅为“ 0 ”或“ 1 ”的多项式与其对应。生成多项式 $G(x)$ 的最高幂次为 $R$，转换成对应的二进制数有 $R+1$ 位。例如，生成多项式 $x^{3} + x^{2} + 1$ 对应的二进制数为 1101，而二进制数 1011 对应的多项式为 $x^{3} + x^{2} + 1$ 。下面用一个例子来介绍 CRC 的编码和检测过程。</p><p>设生成多项式 $G(x) = x^{3} + x^{2} + 1$，信息码为 101001，求对应的 CRC 码</p><ul><li>生成多项式 $G(x) = 1x^{3} + 1x^{2} + 0x^{1} + 1x^{0}$，故对应的二进制码为 1101。</li><li>$R$ 等于生成多项式最高次幂，即为 3</li><li>$K$ 等于信息码长度，即为 6</li><li>校验码位数 $N = K+R=9$</li></ul><p>（1）位移</p><p>将原信息码左移 $R$ 位，低位补 0，得到 101001000</p><p>（2）相除</p><p>对位移后的信息码，用生成多项式进行模 2 除法，产生余数。</p><blockquote><p>模 2 减法：和模 2 加法的结果相同，都是做异或运算<br>模 2 除法：模 2 除法和算术除法类似，但每位除（减）的结果不影响其他位，即不借位。</p></blockquote><ol><li>用除数对被除数最高几位做模 2 减（异或），不借位。</li><li>除数右移一位，若余数最高位为 1，商为 1，并对余数做模 2 减。若余数最高位为 0，商为 0，除数继续右移一位。</li><li>循环直到余数位数小于除数时，该余数为最终余数。</li></ol><p><img src="https://cdn.jsdelivr.net/gh/halo-blog/cdn-blog-img-b@master/img/CRC%E7%A0%81%E7%94%9F%E6%88%90%E8%BF%87%E7%A8%8B.png" alt="CRC码生成过程"></p><p>模 2 除法过程如图上所示，得到余数为 001，则报文 101001 编码后的报文（即 CRC 码）为 101001001</p><p>（3）检错和纠错</p><p>接收端收到的 CRC 码，用生成多项式 $G(x)$ 做模 2 除法，若余数为 0，则码字无错。</p><p>若接收端收的 CRC 码为 $C_{9} C_{8} C_{7} C_{6} C_{5} C_{4} C_{3} C_{2} C_{1} = 101001011$，将这个数据与 1101 进行模 2 除法，得到的余数为 010，则说明 $C_{2}$ 出错（不一定正确），将 $C_{2}$ 取反即可。</p><blockquote><p>注意：余数值与出错位置并不是二进制与十进制转换的关系。</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/halo-blog/cdn-blog-img-b@master/img/CRC%E7%A0%81%E4%BD%99%E6%95%B0%E4%B8%8E%E5%87%BA%E9%94%99%E4%BD%8D%E5%85%B3%E7%B3%BB.png" alt="CRC码余数与出错位关系"></p><p>$K$ 个信息位，$R$ 个校验位，若生成多项式选择得当，且 $2^{R} \ge K + R + 1$ ，则 CRC 码可纠正 1 位错。实际应用中一般只用来“检错”。</p><p>理论上可以证明循环冗余校验码的检错能力有以下特点：</p><ol><li>可检测出所有奇数个错误;</li><li>可检测出所有双比特的错误;</li><li>可检测出所有小于等于校验位长度的连续错误;</li></ol><h2 id="定点数的表示与运算"><a class="header-anchor" href="#定点数的表示与运算"></a>定点数的表示与运算</h2><h3 id="定点数的表示"><a class="header-anchor" href="#定点数的表示"></a>定点数的表示</h3><p>在计算机中参与运算的机器数有两大类：无符号（unsigned）数和有符号（signed）数。</p><ol><li><font color="#ea66a6">无符号数</font>。指整个机器字长的全部二进制位均为数值位，没有符号位，相当于数的绝对值。若机器字长为 8 位，则数的表示范围为 0 ~ 2<sup>8</sup>-1，即 0 ~ 255。</li><li><font color="#ea66a6">有符号数</font>。在机器中，数的“正”“负”号是无法识别的，有符号数用“0”表示“正”号，用“1”表示“负”号，从而将符号也数值化，并通常约定二进制数的最高位为符号位，即将符号位放在有效数字的前面，组成有符号数。</li></ol><p>有符号数的机器表示有原码、补码、反码和移码。为了能正确区别真值和各种机器数，约定用 X 表示真值，用 [X]<sub>原</sub>表示原码，[X]<sub>补</sub>表示补码， [X]<sub>反</sub>表示反码，[X]<sub>移</sub>表示移码。</p><p>定点表示即约定机器数中的小数点位置是固定不变的，小数点不再使用“.”表示，而是约定它的位置。理论上，小数点位置固定在哪一位都可以，但在计算机中通常采用两种简单的约定：将小数点的位置固定在数据的最高位之前，或固定在最低位之后。一般常称前者为定点小数，后者为定点整数。</p><p>（1）定点整数</p><p>定点整数是纯整数，约定小数点位置在有效数值部分最低位之后。若数据 $X$ 的形式为 $ X = x_{0}x_{1}x_{2} \cdots x_{n}$ （其中 $x_{0}$ 为符号位，$x_{1} \sim  x_{n}$ 是数值的有效部分，也称<font color="#ea66a6">尾数</font>，$x_{n}$ 为最低有效位），则在计算机中的表示形式如图所示（设机器字长 $n+1$ 位)。</p><p><img src="https://cdn.jsdelivr.net/gh/halo-blog/cdn-blog-img-c@master/img/%E5%AE%9A%E7%82%B9%E6%95%B4%E6%95%B0%E7%9A%84%E6%A0%BC%E5%BC%8F.png" alt="定点整数的格式"></p><ul><li>当 $x_{0}=0$，$x_{1} \sim x_{n}$，均为 1 时，$X$ 为其所能表示的最大正数，真值等于 $2^{n}-1$。</li><li>当 $x_{0}=1$，$x_{1} \sim x_{n}$，均为 1 时，$X$ 为其（原码）所能表示的最小负数，真值等于 $- ( 2^{-n}-1 )$。</li></ul><p>（2）定点小数</p><p>定点小数是纯小数，约定小数点位置在符号位之后、有效数值部分最高位之前。若数据 $X$ 的形式为 $ X = x_{0}x_{1}x_{2} \cdots x_{n}$ （其中 $x_{0}$ 为符号位，$x_{1} \sim  x_{n}$ 是尾数，$x_{1}$ 为最高有效位），则在计算机中的表示形式如图所示（设机器字长 $n+1$ 位)。</p><p><img src="https://cdn.jsdelivr.net/gh/halo-blog/cdn-blog-img-c@master/img/%E5%AE%9A%E7%82%B9%E5%B0%8F%E6%95%B0%E7%9A%84%E6%A0%BC%E5%BC%8F.png" alt="定点小数的格式"></p><ul><li>当 $x_{0}=0$，$x_{1} \sim x_{n}$，均为 1 时，$X$ 为其所能表示的最大正数，真值等于 $1-2^{-n}$。</li><li>当 $x_{0}=1$，$x_{1} \sim x_{n}$，均为 1 时，$X$ 为其（原码）所能表示的最小负数，真值等于 $- ( 1-2^{-n} )$。</li></ul><h3 id="原码、补码、反码、移码"><a class="header-anchor" href="#原码、补码、反码、移码"></a>原码、补码、反码、移码</h3><h4 id="原码"><a class="header-anchor" href="#原码"></a>原码</h4><p>原码是一种比较简单、直观的机器数表示法，<font color="#faa755">用机器数的最高位表示该数的符号，其余的各位表示数的绝对值</font>。原码的定义如下：</p><p>（1）纯整数的原码定义</p><p>$$[x]_{原} = \begin{cases}<br>0, x &amp; 2^{n} &gt; x \ge 0  \\<br>2^{n}-x = 2^{n}+\left | x \right |  &amp; 0 \ge x &gt; -2^{n}<br>\end{cases}$$</p><p>例如：</p><ul><li>若 $x_{1}=+1110$，字长为 8 位，则其原码表示为 $[x_{1}]_{原} = 00001110$，其中最高位是符号位。</li><li>若 $x_{2}=-1110$，字长为 8 位，则其原码表示为 $[x_{2}]_{原} = 2^{7}+1110= 10001110$，其中最高位是符号位。</li></ul><p>若字长为 $n+1$，则原码整数的表示范围为 $-(2^{n}-1) \le x \le 2^{n}-1$（关于原点对称）</p><blockquote><p>注意：真值零的原码表示有正零和负零两种形式，即 $[+0]_{原} = 00000$ 和 $[-0]_{原} = 10000$。</p></blockquote><p>（2）纯小数的原码定义</p><p>$$[x]_{原} = \begin{cases}<br>x &amp; 1 &gt; x \ge 0  \\<br>1-x = 1+\left | x \right |  &amp; 0 \ge x &gt; -1<br>\end{cases}$$</p><p>例如：</p><ul><li>若 $x_{1}=+0.1101$，字长为 8 位，则其原码表示为：$[x_{1}]_{原} = 01101000$，其中最高位是符号位。</li><li>若 $x_{2}=-0.1101$，字长为 8 位，则其原码表示为：$[x_{2}]_{原} = 1-(-0.1101) = 11101000$，其中最高位是符号位。</li></ul><p>更一般地：</p><ul><li>对于正小数 $ x= +0.x_{1}x_{2} \cdots x_{n}$，有 $ [x]_{原}= 0.x_{1}x_{2} \cdots x_{n}$</li><li>对于负小数 $ x= -0.x_{1}x_{2} \cdots x_{n}$，有 $  [x]_{原}= 1.x_{1}x_{2} \cdots x_{n}$。</li></ul><p>若字长为 $n+1$，则原码小数的表示范围为 $-(1-2^{-n}) \le x \le 1-2^{-n}$（关于原点对称）</p><blockquote><p>同样真值零的原码表示有正零和负零两种形式</p></blockquote><h4 id="反码"><a class="header-anchor" href="#反码"></a>反码</h4><p>反码通常用来作为由原码求补码或由补码求原码的中间过渡。</p><ul><li>若符号位为 0，则反码与原码相同</li><li>若符号位为 1，则数值位全部取反</li></ul><p>若字长为 $n+1$，反码的整数和小数表示范围与原码整数和小数表示范围对应相同。</p><blockquote><p>注意：真值零的反码表示不唯一，$[+0]_{反}=0.0000$，$[-0]_{反}=1.1111$</p></blockquote><h4 id="补码"><a class="header-anchor" href="#补码"></a>补码</h4><ul><li>正数的补码 = 原码</li><li>负数的补码 = 反码末位 + 1（要考虑进位）</li></ul><blockquote><p>注意：补码的真值 0 只有一种表示形式 $[+0]_{补}=[-0]_{补}=00000000$，定点整数补码 $[x]_{补}=10000000$ 表示 $x=-2^{7}$，定点小数补码 $[x]_{补}=10000000$ 表示 $x=-1$</p></blockquote><ul><li>若机器字长为 $n+1$，补码整数的表示范围：$-2^{n} \le x \le 2^{n}-1$ （比原码多表示一个 $-2^{n}$）</li><li>若机器字长为 $n+1$，补码小数的表示范围：$-1 \le x \le 1-2^{-n}$ （比原码多表示一个 $-1$）</li></ul><p><img src="https://cdn.jsdelivr.net/gh/halo-blog/cdn-blog-img-c@master/img/%E4%B8%8D%E5%90%8C%E6%9C%BA%E5%99%A8%E6%95%B0%E4%B9%8B%E9%97%B4%E7%9A%84%E8%BD%AC%E6%8D%A2.png" alt="不同机器数之间的转换"></p><h4 id="移码"><a class="header-anchor" href="#移码"></a>移码</h4><p>移码：补码的基础上将符号位取反。</p><blockquote><p>注意：移码只能用于表示整数</p></blockquote><p>移码的正值 0 和整数的表示范围与补码相同。</p><p>移码表示的整数很方便对比真值大小。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;数制与编码&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#数制与编码&quot;&gt;&lt;/a&gt;数制与编码&lt;/h2&gt;
&lt;p&gt;在计算机系统内部，所有的信息都是用二进制进行编码的，这样做的原因有以下几点：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;二进制只有两种状态，使用有两个稳</summary>
      
    
    
    
    <category term="计算机组成原理" scheme="https://halo123.top/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/"/>
    
    
    <category term="计算机组成原理" scheme="https://halo123.top/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>中文文案排版</title>
    <link href="https://halo123.top/2021/05/26/BasicKnowledge/%E4%B8%AD%E6%96%87%E6%96%87%E6%A1%88%E6%8E%92%E7%89%88/"/>
    <id>https://halo123.top/2021/05/26/BasicKnowledge/%E4%B8%AD%E6%96%87%E6%96%87%E6%A1%88%E6%8E%92%E7%89%88/</id>
    <published>2021-05-26T08:30:50.000Z</published>
    <updated>2021-05-26T08:34:29.754Z</updated>
    
    <content type="html"><![CDATA[<div class="tag link"><a class="link-card" title="转自 《中文文案排版指北》" href="https://github.com/sparanoid/chinese-copywriting-guidelines/blob/master/README.zh-CN.md"><div class="left"><img src="https://cdn.jsdelivr.net/gh/halo-blog/cdn-blog-img-b@master/img/GithubIcon.jpg"/></div><div class="right"><p class="text">转自 《中文文案排版指北》</p><p class="url">https://github.com/sparanoid/chinese-copywriting-guidelines/blob/master/README.zh-CN.md</p></div></a></div><h2 id="空格"><a class="header-anchor" href="#空格"></a>空格</h2><h3 id="中英文之间需要增加空格"><a class="header-anchor" href="#中英文之间需要增加空格"></a>中英文之间需要增加空格</h3><p>正确：</p><blockquote><p>在 LeanCloud 上，数据存储是围绕 <code>AVObject</code> 进行的。</p></blockquote><p>错误：</p><blockquote><p>在LeanCloud上，数据存储是围绕<code>AVObject</code>进行的。</p><p>在 LeanCloud上，数据存储是围绕<code>AVObject</code> 进行的。</p></blockquote><p>完整的正确用法：</p><blockquote><p>在 LeanCloud 上，数据存储是围绕 <code>AVObject</code> 进行的。每个 <code>AVObject</code> 都包含了与 JSON 兼容的 key-value 对应的数据。数据是 schema-free 的，你不需要在每个 <code>AVObject</code> 上提前指定存在哪些键，只要直接设定对应的 key-value 即可。</p></blockquote><p>例外：「豆瓣FM」等产品名词，按照官方所定义的格式书写。</p><h3 id="中文与数字之间需要增加空格"><a class="header-anchor" href="#中文与数字之间需要增加空格"></a>中文与数字之间需要增加空格</h3><p>正确：</p><blockquote><p>今天出去买菜花了 5000 元。</p></blockquote><p>错误：</p><blockquote><p>今天出去买菜花了 5000元。</p><p>今天出去买菜花了5000元。</p></blockquote><h3 id="数字与单位之间需要增加空格"><a class="header-anchor" href="#数字与单位之间需要增加空格"></a>数字与单位之间需要增加空格</h3><p>正确：</p><blockquote><p>我家的光纤入屋宽带有 10 Gbps，SSD 一共有 20 TB</p></blockquote><p>错误：</p><blockquote><p>我家的光纤入屋宽带有 10Gbps，SSD 一共有 20TB</p></blockquote><p>例外：度 / 百分比与数字之间不需要增加空格：</p><p>正确：</p><blockquote><p>今天是 233° 的高温。</p><p>新 MacBook Pro 有 15% 的 CPU 性能提升。</p></blockquote><p>错误：</p><blockquote><p>今天是 233 ° 的高温。</p><p>新 MacBook Pro 有 15 % 的 CPU 性能提升。</p></blockquote><h3 id="全角标点与其他字符之间不加空格"><a class="header-anchor" href="#全角标点与其他字符之间不加空格"></a>全角标点与其他字符之间不加空格</h3><p>正确：</p><blockquote><p>刚刚买了一部 iPhone，好开心！</p></blockquote><p>错误：</p><blockquote><p>刚刚买了一部 iPhone ，好开心！</p><p>刚刚买了一部 iPhone， 好开心！</p></blockquote><h3 id="用-text-spacing-来挽救？"><a class="header-anchor" href="#用-text-spacing-来挽救？"></a>用 <code>text-spacing</code> 来挽救？</h3><p>CSS Text Module Level 4 的 <a href="https://www.w3.org/TR/css-text-4/#text-spacing-property"><code>text-spacing</code></a> 和 Microsoft 的 <a href="https://msdn.microsoft.com/library/ms531164(v=vs.85).aspx"><code>-ms-text-autospace</code></a> 可以实现自动为中英文之间增加空白。不过目前并未普及，另外在其他应用场景，例如 macOS、iOS、Windows 等用户介面目前并不存在这个特性，所以请继续保持随手加空格的习惯。</p><h2 id="标点符号"><a class="header-anchor" href="#标点符号"></a>标点符号</h2><h3 id="不重复使用标点符号"><a class="header-anchor" href="#不重复使用标点符号"></a>不重复使用标点符号</h3><p>正确：</p><blockquote><p>德国队竟然战胜了巴西队！</p><p>她竟然对你说「喵」？！</p></blockquote><p>错误：</p><blockquote><p>德国队竟然战胜了巴西队！！</p><p>德国队竟然战胜了巴西队！！！！！！！！</p><p>她竟然对你说「喵」？？！！</p><p>她竟然对你说「喵」？！？！？？！！</p></blockquote><h2 id="全角和半角"><a class="header-anchor" href="#全角和半角"></a>全角和半角</h2><p>不明白什么是全角（全形）与半角（半形）符号？请查看维基百科词条『<a href="https://zh.wikipedia.org/wiki/%E5%85%A8%E5%BD%A2%E5%92%8C%E5%8D%8A%E5%BD%A2">全形和半形</a>』。</p><h3 id="使用全角中文标点"><a class="header-anchor" href="#使用全角中文标点"></a>使用全角中文标点</h3><p>正确：</p><blockquote><p>嗨！你知道嘛？今天前台的小妹跟我说「喵」了哎！</p><p>核磁共振成像（NMRI）是什么原理都不知道？JFGI！</p></blockquote><p>错误：</p><blockquote><p>嗨! 你知道嘛? 今天前台的小妹跟我说 “喵” 了哎！</p><p>嗨!你知道嘛?今天前台的小妹跟我说&quot;喵&quot;了哎！</p><p>核磁共振成像 (NMRI) 是什么原理都不知道? JFGI!</p><p>核磁共振成像(NMRI)是什么原理都不知道?JFGI!</p></blockquote><h3 id="数字使用半角字符"><a class="header-anchor" href="#数字使用半角字符"></a>数字使用半角字符</h3><p>正确：</p><blockquote><p>这个蛋糕只卖 1000 元。</p></blockquote><p>错误：</p><blockquote><p>这个蛋糕只卖 １０００ 元。</p></blockquote><p>例外：在设计稿、宣传海报中如出现极少量数字的情形时，为方便文字对齐，是可以使用全形数字的。</p><h3 id="遇到完整的英文整句、特殊名词，其内容使用半角标点"><a class="header-anchor" href="#遇到完整的英文整句、特殊名词，其内容使用半角标点"></a>遇到完整的英文整句、特殊名词，其内容使用半角标点</h3><p>正确：</p><blockquote><p>贾伯斯那句话是怎么说的？「Stay hungry, stay foolish.」</p><p>推荐你阅读《Hackers &amp; Painters: Big Ideas from the Computer Age》，非常的有趣。</p></blockquote><p>错误：</p><blockquote><p>贾伯斯那句话是怎么说的？「Stay hungry，stay foolish。」</p><p>推荐你阅读《Hackers＆Painters：Big Ideas from the Computer Age》，非常的有趣。</p></blockquote><h2 id="名词"><a class="header-anchor" href="#名词"></a>名词</h2><h3 id="专有名词使用正确的大小写"><a class="header-anchor" href="#专有名词使用正确的大小写"></a>专有名词使用正确的大小写</h3><p>大小写相关用法原属于英文书写范畴，不属于本 wiki 讨论内容，在这里只对部分易错用法进行简述。</p><p>正确：</p><blockquote><p>使用 GitHub 登录</p><p>我们的客户有 GitHub、Foursquare、Microsoft Corporation、Google、Facebook, Inc.。</p></blockquote><p>错误：</p><blockquote><p>使用 github 登录</p><p>使用 GITHUB 登录</p><p>使用 Github 登录</p><p>使用 gitHub 登录</p><p>使用 gｲんĤЦ8 登录</p><p>我们的客户有 github、foursquare、microsoft corporation、google、facebook, inc.。</p><p>我们的客户有 GITHUB、FOURSQUARE、MICROSOFT CORPORATION、GOOGLE、FACEBOOK, INC.。</p><p>我们的客户有 Github、FourSquare、MicroSoft Corporation、Google、FaceBook, Inc.。</p><p>我们的客户有 gitHub、fourSquare、microSoft Corporation、google、faceBook, Inc.。</p><p>我们的客户有 gｲんĤЦ8、ｷouЯƧquﾑгє、๓เςг๏ร๏Ŧt ς๏гק๏гคtเ๏ภn、900913、ƒ4ᄃëв๏๏к, IПᄃ.。</p></blockquote><p>注意：当网页中需要配合整体视觉风格而出现全部大写／小写的情形，HTML 中请使用标淮的大小写规范进行书写；并通过 <code>text-transform: uppercase;</code>／<code>text-transform: lowercase;</code> 对表现形式进行定义。</p><h3 id="不要使用不地道的缩写"><a class="header-anchor" href="#不要使用不地道的缩写"></a>不要使用不地道的缩写</h3><p>正确：</p><blockquote><p>我们需要一位熟悉 JavaScript、HTML5，至少理解一种框架（如 Backbone.js、AngularJS、React 等）的前端开发者。</p></blockquote><p>错误：</p><blockquote><p>我们需要一位熟悉 Js、h5，至少理解一种框架（如 backbone、angular、RJS 等）的 FED。</p></blockquote><h2 id="争议"><a class="header-anchor" href="#争议"></a>争议</h2><p>以下用法略带有个人色彩，即：无论是否遵循下述规则，从语法的角度来讲都是<strong>正确</strong>的。</p><h3 id="链接之间增加空格"><a class="header-anchor" href="#链接之间增加空格"></a>链接之间增加空格</h3><p>用法：</p><blockquote><p>请 <a href="#">提交一个 issue</a> 并分配给相关同事。</p><p>访问我们网站的最新动态，请 <a href="#">点击这里</a> 进行订阅！</p></blockquote><p>对比用法：</p><blockquote><p>请<a href="#">提交一个 issue</a>并分配给相关同事。</p><p>访问我们网站的最新动态，请<a href="#">点击这里</a>进行订阅！</p></blockquote><h3 id="简体中文使用直角引号"><a class="header-anchor" href="#简体中文使用直角引号"></a>简体中文使用直角引号</h3><p>用法：</p><blockquote><p>「老师，『有条不紊』的『紊』是什么意思？」</p></blockquote><p>对比用法：</p><blockquote><p>“老师，‘有条不紊’的‘紊’是什么意思？”</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;div class=&quot;tag link&quot;&gt;&lt;a class=&quot;link-card&quot; title=&quot;转自 《中文文案排版指北》&quot; href=&quot;https://github.com/sparanoid/chinese-copywriting-guidelines/blob/mast</summary>
      
    
    
    
    <category term="Tips" scheme="https://halo123.top/categories/Tips/"/>
    
    
    <category term="Tips" scheme="https://halo123.top/tags/Tips/"/>
    
  </entry>
  
  <entry>
    <title>计算机组成原理概述</title>
    <link href="https://halo123.top/2021/05/26/ComputerComposition/A-%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%E6%A6%82%E8%BF%B0/"/>
    <id>https://halo123.top/2021/05/26/ComputerComposition/A-%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%E6%A6%82%E8%BF%B0/</id>
    <published>2021-05-26T04:55:05.000Z</published>
    <updated>2021-06-08T07:29:00.885Z</updated>
    
    <content type="html"><![CDATA[<h2 id="计算机系统的组成"><a class="header-anchor" href="#计算机系统的组成"></a>计算机系统的组成</h2><p>硬件系统和软件系统共同构成了一个完整的计算机系统。</p><ul><li><font color="#ea66a6">硬件</font>是指有形的物理设备，是计算机系统中实际物理装置的总称。</li><li><font color="#ea66a6">软件</font>是指在硬件上运行的程序和相关的数据及文档。</li></ul><p>计算机系统性能的好坏，很大程度上是由软件的效率和作用来表征的，而软件性能的发挥又离不开硬件的支持。对某一功能来说，其既可以用软件实现，又可以用硬件实现，则称为<font color="#faa755">软硬件在逻辑上是等效的</font>。</p><p>在设计计算机系统时，要进行软/硬件的功能分配。通常来说，一个功能若使用较为频繁且用硬件实现的成本较为理想，则使用硬件解决可以提高效率。而用软件实现可以提高灵活性，但效率往往不如硬件实现高。</p><h2 id="计算机硬件的基本组成"><a class="header-anchor" href="#计算机硬件的基本组成"></a>计算机硬件的基本组成</h2><h3 id="早期的冯·诺依曼机"><a class="header-anchor" href="#早期的冯·诺依曼机"></a>早期的冯·诺依曼机</h3><p>冯·诺依曼在研究 <a href="https://baike.baidu.com/item/EDVAC/8438215?fr=aladdin">EDVAC 机</a> 时提出了“存储程序”的概念，“存储程序”的思想奠定了现代计算机的基本结构，以此概念为基础的各类计算机通称为冯·诺依曼机，其特点如下：</p><ol><li>计算机硬件系统由运算器、存储器、控制器、输入设备和输出设备 5 大部件组成。</li><li>指令和数据以同等地位存储在存储器中，并可按地址寻访。</li><li>指令和数据均用二进制代码表示。</li><li>指令由操作码和地址码组成，操作码用来表示操作的性质，地址码用来表示操作数在存储器中的位置。</li><li>指令在存储器内按顺序存放。通常，指令是顺序执行的，在特定条件下可根据运算结果或根据设定的条件改变执行顺序。</li><li>早期的冯·诺依曼机以运算器为中心，输入/输出设备通过运算器与存储器传送数据。</li></ol><blockquote><p>注意：“存储程序”的概念是指将指令以代码的形式事先输入计算机的主存储器，然后按其在存储器中的首地址执行程序的第一条指令，以后就按该程序的规定顺序执行其他指令，直至程序执行结束。</p></blockquote><p>典型的冯·诺依曼机计算机结构如下图所示</p><p><img src="https://cdn.jsdelivr.net/gh/halo-blog/cdn-blog-img-b@master/img/%E5%85%B8%E5%9E%8B%E7%9A%84%E5%86%AF%E8%AF%BA%E4%BE%9D%E6%9B%BC%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%93%E6%9E%84.png" alt="典型的冯诺依曼计算机结构"></p><h3 id="现代计算机的组织结构"><a class="header-anchor" href="#现代计算机的组织结构"></a>现代计算机的组织结构</h3><p>在微处理器问世之前，运算器和控制器分离，而且存储器的容量很小，因此设计成以运算器为中心的结构，其他部件都通过运算器完成信息的传递。</p><p>而随着微电子技术的进步，同时计算机需要处理、加工的信息量也与日俱增，大量 I/O 设备的速度和 CPU 的速度差距悬殊，因此以运算器为中心的结构不能够满足计算机发展的要求。现代计算机已发展为以存储器为中心，使 I/O 操作尽可能地绕过 CPU ，直接在 I/O 设备和存储器之间完成，以提高系统的整体运行效率，其结构如图所示。</p><p><img src="https://cdn.jsdelivr.net/gh/halo-blog/cdn-blog-img-b@master/img/%E4%BB%A5%E5%AD%98%E5%82%A8%E5%99%A8%E4%B8%BA%E4%B8%AD%E5%BF%83%E7%9A%84%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%93%E6%9E%84.png" alt="以存储器为中心的计算机结构"></p><p>目前绝大多数现代计算机仍遵循冯·诺依曼的存储程序的设计思想。</p><h3 id="计算机的功能部件"><a class="header-anchor" href="#计算机的功能部件"></a>计算机的功能部件</h3><p>传统冯·诺依曼计算机和现代计算机的结构虽然有所不同，但功能部件是一致的，它们的功能部件包括如下几种：</p><p>（1）输入设备</p><p>输入设备的主要功能是将程序和数据以机器所能识别和接受的信息形式输入计算机。最常用也最基本的输入设备是键盘，此外还有鼠标、扫描仪、摄像机等。</p><p>（2）输出设备</p><p>输出设备的任务是将计算机处理的结果以人们所能接受的形式或其他系统所要求的信息形式输出。最常用、最基本的输出设备是显示器、打印机。计算机的输入/输出设备（简称 I/O 设备）是计算机与外界联系的桥梁，是计算机中不可缺少的重要组成部分。</p><p>（3）存储器</p><p>存储器是计算机的存储部件，用来存放程序和数据。存储器分为主存储器（简称主存，也称内存储器）和辅助存储器（简称辅存，也称外存储器）。</p><ul><li>CPU 能够直接访问的存储器是主存储器。</li><li>辅助存储器用于帮助主存储器记忆更多的信息，辅助存储器中的信息必须调入主存后，才能为 CPU 所访问。</li></ul><p>主存储器由许多存储单元组成，每个存储单元包含若干存储元件，每个存储元件存储一位二进制代码“0”或“1”。因此存储单元可存储一串二进制代码，称这串代码为存储字，称这串代码的位数为存储字长，存储字长可以是 1 B（8 bit）或是字节的偶数倍。</p><p>主存储器的工作方式是按存储单元的地址进行存取，这种存取方式称为按地址存取方式（相联存储器是按内容访问的）。</p><p>主存储器的最基本组成如下图所示</p><p><img src="https://cdn.jsdelivr.net/gh/halo-blog/cdn-blog-img-b@master/img/%E4%B8%BB%E5%AD%98%E5%82%A8%E5%99%A8%E9%80%BB%E8%BE%91%E5%9B%BE.png" alt="主存储器逻辑图"></p><ul><li>存储体存放二进制信息；</li><li><font color="#ea66a6">地址寄存器</font>（Memory Address Register，<font color="#ea66a6">MAR</font>）存放访存地址，经过地址译码后找到所选的存储单元；</li><li><font color="#ea66a6">数据寄存器</font>（Memory Data Register，<font color="#ea66a6">MDR</font>）用于暂存要从存储器中读或写的信息；</li><li>时序控制逻辑用于产生存储器操作所需的各种时序信号。</li></ul><p>MAR 用于寻址，其位数对应着存储单元的个数，如 MAR 为 10 位，则有 2<sup>10</sup> = 1024 个存储单元，记为 1 K。MAR 的长度与<font color="#ea66a6">程序计数器</font>（Program Counter，<font color="#ea66a6">PC</font>）的长度相等。</p><p>MDR 的位数和存储字长相等，一般为字节的二次幂的整数倍。</p><blockquote><p>注意：MAR 与 MDR 虽然是存储器的一部分，但在现代 CPU 中却是存在于 CPU 中的。另外，高速缓存（Cache）也存在于 CPU 中。</p></blockquote><p>（4）运算器</p><p>运算器是计算机的执行部件，用于进行算术运算和逻辑运算。</p><ul><li>算术运算是按算术运算规则进行的运算，如加、减、乘、除；</li><li>逻辑运算包括与、或、非、异或、比较、移位等运算。</li></ul><p>运算器的核心是算术逻辑单元（Arithmetic and Logical Unit，ALU）。</p><p>运算器包含若干通用寄存器，用于暂存操作数和中间结果，如累加器（Accumulator，ACC）、乘商寄存器（Multiple—Quotient Register，MQ）、操作数寄存器（X）、变址寄存器（IX）、基址寄存器（BR）等，其中前 3 个寄存器是必须有的。</p><p>运算器内还有程序状态寄存器（Program Status Word，PSW），也称标志寄存器，用于存放 ALU 运算得到的一些标志信息或处理机的状态信息，如结果是否溢出、有无产生进位或借位、结果是否为负等。</p><p>（5）控制器</p><p>控制器是计算机的指挥中心，由其“指挥”各部件自动协调地进行工作。控制器由程序计数器（Program Counter，PC）、指令寄存器（Instruction Register，IR）和控制单元（CU）组成。</p><p>PC 用来存放当前欲执行指令的地址，可以自动加 1 以形成下一条指令的地址，它与主存的 MAR 之间有一条直接通路。</p><p>IR 用来存放当前的指令，其内容来自主存的 MDR。</p><ul><li>指令中的操作码 OP(IR) 送至 CU，用以分析指令并发出各种微操作命令序列</li><li>指令中的地址码 Ad(IR) 送往 MAR，用以取操作数。</li></ul><p>一般将运算器和控制器集成到同一个芯片上，称为中央处理器（Central Processing Unit，CPU）。CPU 和主存储器共同构成主机，而除主机外的其他硬件装置（外存、I/O 设备等）统称为外部设备，简称外设。</p><p>下图所示为冯·诺依曼结构的模型机。CPU 包含 ALU、通用寄存器组 GPRs、标志寄存器、控制器、指令寄存器 IR、程序计数器 PC、存储器地址寄存器 MAR 和存储器数据寄存器 MDR。图中从控制器送出的虚线就是控制信号，可以控制如何修改 PC 以得到下一条指令的地址，可以控制 ALU 执行什么运算，可以控制主存是进行读操作还是写操作（读/写控制信号）。</p><p><img src="https://cdn.jsdelivr.net/gh/halo-blog/cdn-blog-img-b@master/img/%E5%86%AF%E8%AF%BA%E4%BE%9D%E6%9B%BC%E7%BB%93%E6%9E%84%E7%9A%84%E6%A8%A1%E5%9E%8B%E6%9C%BA.png" alt="冯诺依曼结构的模型机"></p><p>CPU 和主存之间通过一组总线相连，总线中有地址、控制和数据 3 组信号线。</p><ul><li>MAR 中的地址信息会直接送到地址线上，用于指向读/写操作的主存存储单元；</li><li>控制线中有读/写信号线，指出数据是从 CPU 写入主存还是从主存读出到 CPU，根据是读操作还是写操作来控制将 MDR 中的数据是直接送到数据线上还是将数据线上的数据接收到 MDR 中。</li></ul><h2 id="计算机软件的分类"><a class="header-anchor" href="#计算机软件的分类"></a>计算机软件的分类</h2><h3 id="系统软件和应用软件"><a class="header-anchor" href="#系统软件和应用软件"></a>系统软件和应用软件</h3><p>软件按其功能分类，可分为系统软件和应用软件。</p><ul><li>系统软件是一组保证计算机系统高效、正确运行的基础软件，通常作为系统资源提供给用户使用。系统软件主要有操作系统（OS）、数据库管理系统（DBMS）、语言处理程序、分布式软件系统、网络软件系统、标准库程序、服务性程序等。</li><li>应用软件是指用户为解决某个应用领域中的各类问题而编制的程序，如各种科学计算类程序、工程设计类程序、数据统计与处理程序等。</li></ul><blockquote><p>注意：数据库管理系统（DBMS）和数据库系统（DBS）是有区别的。DBMS 是位于用户和操作系统之间的一层数据管理软件，是系统软件；而 DBS 是指计算机系统中引入数据库后的系统，一般由数据库、数据库管理系统、数据库管理员（DBA）和应用系统构成。</p></blockquote><h3 id="三个级别的语言"><a class="header-anchor" href="#三个级别的语言"></a>三个级别的语言</h3><ol><li>机器语言。又称二进制代码语言，需要编程人员记忆每条指令的二进制编码。机器语言是计算机唯一可以直接识别和执行的语言。</li><li>汇编语言。汇编语言用英文单词或其缩写代替二进制的指令代码，更容易为人们记忆和理解。使用汇编语言编辑的程序，必须经过一个称为汇编程序的系统软件的翻译，将其转换为计算机的机器语言后，才能在计算机的硬件系统上执行。</li><li>高级语言。高级语言（如C、C++、Java等）是为方便程序设计人员写出解决问题的处理方案和解题过程的程序。通常高级语言需要经过编译程序编译成汇编语言程序，然后经过汇编操作得到机器语言程序，或直接由高级语言程序翻译成机器语言程序。</li></ol><h2 id="计算机的工作过程"><a class="header-anchor" href="#计算机的工作过程"></a>计算机的工作过程</h2><p>计算机的工作过程分为以下三个步骤：</p><ol><li>把程序和数据装入主存储器。</li><li>将源程序转换成可执行文件。</li><li>从可执行文件的首地址开始逐条执行指令。</li></ol><h3 id="从源程序到可执行文件"><a class="header-anchor" href="#从源程序到可执行文件"></a>从源程序到可执行文件</h3><p>在计算机中编写的 C 语言程序，都必须被转换为一系列的低级机器指令，这些指令按照一种称为可执行目标文件的格式打好包，并以二进制磁盘文件的形式存放起来。</p><p>以 UNIX 系统中的 GCC 编译器程序为例，读取源程序文件 hello.c，并把它翻译成一个可执行目标文件 hello，整个翻译过程可分为 4 个阶段完成，如图所示。</p><p><img src="https://cdn.jsdelivr.net/gh/halo-blog/cdn-blog-img-b@master/img/%E6%BA%90%E7%A8%8B%E5%BA%8F%E8%BD%AC%E6%8D%A2%E4%B8%BA%E5%8F%AF%E6%89%A7%E8%A1%8C%E6%96%87%E4%BB%B6%E7%9A%84%E8%BF%87%E7%A8%8B.png" alt="源程序转换为可执行文件的过程"></p><ol><li>预处理阶段：预处理器（cpp）对源程序中以字符 <code>#</code> 开头的命令进行处理，例如将 <code>#include</code> 命令后面的 .h 文件内容插入程序文件。输出结果是一个以 i 为扩展名的源文件 hello.i</li><li>编译阶段：编译器（ccl）对预处理后的源程序进行编译，生成一个汇编语言源程序 hello.s 汇编语言源程序中的每条语句都以一种文本格式描述了一条低级机器语言指令。</li><li>汇编阶段：汇编器（as）将 hello.s 翻译成机器语言指令，把这些指令打包成一个称为可重定位目标文件的 hello.o，它是一种二进制文件，因此在文本编辑器中打开它时会显示乱码。</li><li>链接阶段：链接器（ld）将多个可重定位目标文件和标准库函数合并为一个可执行目标文件，或简称可执行文件。本例中，链接器将 hello.o 和标准库函数 <code>prinft</code> 所在的可重定位目标模块 prinft.o 合并，生成可执行文件 hello。最终生成的可执行文件被保存在磁盘上。</li></ol><h3 id="指令执行过程的描述"><a class="header-anchor" href="#指令执行过程的描述"></a>指令执行过程的描述</h3><p>程序中第一条指令的地址置于 PC 中，根据 PC 取出第一条指令，经过译码、执行步骤等，控制计算机各功能部件协同运行，完成这条指令的功能，并计算下一条指令的地址。用新得到的指令地址继续读出第二条指令并执行，直到程序结束为止。</p><p>下面以取数指令（即将指令地址码指示的存储单元中的操作数取出后送至运算器的 ACC 中）为例进行说明，其信息流程如下：</p><p>1、取指令: PC → MAR → M → MDR → IR</p><p>根据 PC 取指令到 IR（指令寄存器）。将 PC 的内容送 MAR（地址寄存器），MAR 中的内容直接送地址线，同时控制器将读信号送读/写信号线，主存根据地址线上的地址和读信号，从指定存储单元读出指令，送到数据线上，MDR（数据寄存器） 从数据线接收指令信息，并传送到 IR 中。</p><p>2、分析指令: OP(IR) → CU</p><p>指令译码并送出控制信号。控制器根据IR中指令的操作码，生成相应的控制信号，送到不同的执行部件。在本例中，IR 中是取数指令，因此读控制信号被送到总线的控制线上。</p><p>3、执行指令：Ad(IR) → MAR → M → MDR → ACC</p><p>取数操作。将 IR 中指令的地址码送 MAR，MAR 中的内容送地址线，同时控制器将读信号送读/写信号线，从主存指定存储单元读出操作数，并通过数据线送至 MDR，再传送到 ACC 中。</p><p>此外，每取完一条指令，还须为取下一条指令做准备，形成下一条指令的地址，即 (PC)+1 → PC。</p><blockquote><p>注意: (PC) 指程序计数器 PC 中存放的内容。PC → MAR 应理解为 (PC) → MAR，即程序计数器中的值经过数据通路送到 MAR，也即表示数据通路时括号可省略（因为只是表示数据流经的途径，而不强调数据本身的流动）。但运算时括号不能省略，即 (PC)+1 → PC 不能写为 PC+1 → PC。</p></blockquote><h2 id="计算机系统的多级层次结构"><a class="header-anchor" href="#计算机系统的多级层次结构"></a>计算机系统的多级层次结构</h2><p>现代计算机是一个硬件与软件组成的综合体。由于面对的应用范围越来越广，因此必须有复杂的系统软件和硬件的支持。由于软/硬件的设计者和使用者都从不同的角度并用不同的语言来对待同一个计算机系统，因此他们各自看到的计算机系统的属性及对计算机系统提出的要求也就不同。</p><p>计算机系统的多级层次结构的作用，就是针对上述情况，根据从各种角度所看到的机器之间的有机联系，来分清彼此之间的界面，明确各自的功能，以便构成合理、高效的计算机系统。</p><p>关于计算机系统层次结构的分层方式，目前尚无统一的标准，这里采用如下图所示的层次结构。</p><p><img src="https://cdn.jsdelivr.net/gh/halo-blog/cdn-blog-img-b@master/img/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%E7%9A%84%E5%A4%9A%E7%BA%A7%E5%B1%82%E6%AC%A1%E7%BB%93%E6%9E%84.png" alt="计算机系统的多级层次结构"></p><p>第 1 级是微程序机器层，这是一个实在的硬件层，它由机器硬件直接执行微指令。</p><p>第 2 级是传统机器语言层，它也是一个实际的机器层，由微程序解释机器指令系统。</p><p>第 3 级是操作系统层，它由操作系统程序实现。操作系统程序是由机器指令和广义指令组成的，这些广义指令是为了扩展机器功能而设置的，是由操作系统定义和解释的软件指令，所以这一层也称混合层。</p><p>第 4 级是汇编语言层，它为用户提供一种符号化的语言，借此可编写汇编语言源程序。这一层由汇编程序支持和执行。</p><p>第 5 级是高级语言层，它是面向用户的，是为方便用户编写应用程序而设置的。该层由各种高级语言编译程序支持和执行。</p><p>在高级语言层之上，还可以有应用层，它由解决实际问题和应用问题的处理程序组成，如文字处理软件、数据库软件、多媒体处理软件和办公自动化软件等。</p><p>通常把没有配备软件的纯硬件系统称为“裸机”。第 3 层至第 5 层称为虚拟机，简单来说就是软件实现的机器。虚拟机只对该层的观察者存在，这里的分层和计算机网络的分层类似，对于某层的观察者来说，只能通过该层次的语言来了解和使用计算机，而不必关心下层是如何工作的。</p><p>层次之间的关系紧密，下层是上层的基础，上层是下层的扩展。随着超大规模集成电路技术的不断发展，部分软件功能将由硬件来实现，因而软/硬件交界面的划分也不是绝对的。</p><p>这里主要讨论传统机器 M1 和微程序机器 M0 的组成原理及设计思想。</p><h2 id="计算机的性能指标"><a class="header-anchor" href="#计算机的性能指标"></a>计算机的性能指标</h2><h3 id="计算机的主要性能指标"><a class="header-anchor" href="#计算机的主要性能指标"></a>计算机的主要性能指标</h3><p>（1）机器字长</p><p>机器字长是指计算机进行一次整数运算（即定点整数运算）所能处理的二进制数据的位数，通常与 CPU 的寄存器位数、加法器有关。因此，机器字长一般等于内部寄存器的大小，字长越长，数的表示范围越大，计算精度越高。计算机字长通常选定为字节（8 位）的整数倍。</p><blockquote><p>注意：<a href="#%E6%9C%BA%E5%99%A8%E5%AD%97%E9%95%BF%E3%80%81%E6%8C%87%E4%BB%A4%E5%AD%97%E9%95%BF%E5%92%8C%E5%AD%98%E5%82%A8%E5%AD%97%E9%95%BF%E7%9A%84%E5%85%B3%E7%B3%BB">机器字长、指令字长和存储字长的关系</a></p></blockquote><p>（2）数据通路带宽</p><p>数据通路带宽是指数据总线一次所能并行传送信息的位数。这里所说的数据通路宽度是指外部数据总线的宽度，它与 CPU 内部的数据总线宽度（内部寄存器的大小）有可能不同。</p><blockquote><p>注意：各个子系统通过数据总线连接形成的数据传送路径称为数据通路。</p></blockquote><p>（3）主存容量</p><p>主存容量是指主存储器所能存储信息的最大容量，通常以字节来衡量，也可用字数 × 字长（如 512 K × 16位）来表示存储容量。其中，MAR 的位数反映存储单元的个数，MAR 的位数反映可寻址范围的最大值（而不一定是实际存储器的存储容量）。</p><p>例如，MAR 为 16 位，表示 2<sup>16</sup> = 65536，即此存储体内有 65536 个存储单元（可称为 64 K 内存，1 K = 1024），若 MDR 为 32 位，表示存储容量为 64 K × 32 位。</p><p>（4）运算速度</p><ul><li><p>吞吐量。指系统在单位时间内处理请求的数量。它取决于信息能多快地输入内存，CPU 能多快地取指令，数据能多快地从内存取出或存入，以及所得结果能多快地从内存送给一台外部设备。几乎每步都关系到主存，因此系统吞吐量主要取决于主存的存取周期。</p></li><li><p>响应时间。指从用户向计算机发送一个请求，到系统对该请求做出响应并获得所需结果的等待时间。通常包括 CPU 时间（运行一个程序所花费的时间）与等待时间（用于磁盘访问、存储器访问、I/O 操作、操作系统开销等的时间）。</p></li><li><p>CPU 时钟周期。通常为节拍脉冲或 T 周期，即主频的倒数，它是 CPU 中最小的时间单位，每个动作至少需要 1 个时钟周期。CPU时钟周期 = 1/主频，主频通常以 Hz（赫兹）为单位，1 Hz 表示每秒 1 次。</p></li><li><p>主频（CPU 时钟频率）。机器内部主时钟的频率，是衡量机器速度的重要参数。对于同一个型号的计算机，其主频越高，完成指令的一个执行步骤所用的时间越短，执行指令的速度越快。例如，常用 CPU 的主频有 1.8 GHz、2.4 GHz、 2.8 GHz 等。</p></li><li><p>CPI（Clock cycle Per Instruction），即执行一条 指令所需的时钟周期数。</p></li><li><p>CPU 执行时间，指运行一个程序所花费的时间。</p><p>CPU 执行时间 = CPU 时钟周期数 / 主频 = (指令条数 × CPI) / 主频。</p><p>上式表明，CPU 的性能（CPU 执行时间）取决于三个要素：主频（时钟频率）；每条指令执行所用的时钟周期数（CPI）；指令条数。</p><p>主频、CPI 和指令条数是相互制约的。例如，更改指令集可以减少程序所含指令的条数，但同时可能引起 CPU 结构的调整，从而可能会增加时钟周期的宽度（降低主频）。</p></li><li><p>MIPS（Million Instructions Per Second），即每秒执行多少百万条指令。</p><p>MIPS = 指令条数 / (执行时间 × 10<sup>6</sup>) = 主频 / CPI</p></li><li><p>MFLOPS（Mega Floating point Operations Per Second），即每秒执行多少百万次浮点运算。</p><p>MFLOPS = 浮点操作次数 / (执行时间 × 10<sup>6</sup>)</p></li><li><p>GFLOPS（Giga Floating point Operations Per Second），即每秒执行多少十亿次浮点运算。</p><p>GFLOPS = 浮点操作次数 / (执行时间 × 10<sup>9</sup>)</p></li><li><p>TFLOPS（Tera Floating point Operations Per Second），即每秒执行多少万亿次浮点运算。</p><p>TFLOPS = 浮点操作次数 / (执行时间 × 10<sup>12</sup>)</p></li></ul><blockquote><p>注意：在描述存储容量、文件大小等时，K、M、G、T 通常用 2 的幂次表示，如 1 Kb = 2<sup>10</sup> b；在描述速率、频率等时，k、M、G、T 通常用 10 的幂次表示，如 1 kb/s = 10 b/s。通常前者用大写的 K，后者用小写的 k，但其他前缀均为大写，表示的含义取决于所用的场景。</p></blockquote><h3 id="几个专业术语"><a class="header-anchor" href="#几个专业术语"></a>几个专业术语</h3><ul><li>系列机。具有基本相同的体系结构，使用相同基本指令系统的多个不同型号的计算机组成的一个产品系列。</li><li>兼容。指计算机软件或硬件的通用性，即使用或运行在某个型号的计算机系统中的硬件/软件也能应用于另一个型号的计算机系统时，称这两台计算机在硬件或软件上存在兼容性。</li><li>软件可移植性。指把使用在某个系列计算机中的软件直接或进行很少的修改就能运行在另一个系列计算机中的可能性。</li><li>固件。将程序固定在 ROM 中组成的部件称为固件。固件是一种具有软件特性的硬件，固件的性能指标介于硬件与软件之间，吸收了软/硬件各自的优点，其执行速度快于软件，灵活性优于硬件，是软/硬件结合的产物。例如，目前操作系统已实现了部分固化（把软件永恒地存储于只读存储器中）。</li></ul><h2 id="常见问题和易混淆知识点"><a class="header-anchor" href="#常见问题和易混淆知识点"></a>常见问题和易混淆知识点</h2><h3 id="计算机由哪几部分组成？以哪部分为中心？"><a class="header-anchor" href="#计算机由哪几部分组成？以哪部分为中心？"></a>计算机由哪几部分组成？以哪部分为中心？</h3><p>计算机由运算器、控制器、存储器、输入设备及输出设备五大部分构成，现代计算机通常把运算器和控制器集成在一个芯片上，合称为中央处理器。</p><p>而在微处理器面世之前，运算器和控制器分离，而且存储器的容量很小，因此设计成以运算器为中心的结构，其他部件都通过运算器完成信息的传递。</p><p>随着微电子技术的进步，同时计算机需要处理、加工的信息量也与日俱增，大量 I/O 设备的速度和 CPU 的速度差距悬殊，因此以运算器为中心的结构不能满足计算机发展的要求。现代计算机已经发展为以存储器为中心，使 I/O 操作尽可能地绕过 CPU，直接在 I/O 设备和存储器之间完成，以提高系统的整体运行效率。</p><h3 id="主频高的-CPU-一定比主频低的-CPU-快吗？为什么？"><a class="header-anchor" href="#主频高的-CPU-一定比主频低的-CPU-快吗？为什么？"></a>主频高的 CPU 一定比主频低的 CPU 快吗？为什么？</h3><p>衡量 CPU 运算速度的指标有很多，不能以单独的某个指标来判断 CPU 的好坏。CPU 的主频，即 CPU 内核工作的时钟频率。CPU 的主频表示 CPU 内数字脉冲信号振荡的速度，主频和实际的运算速度存在一定的关系，但目前还没有一个确定的公式能够定量两者的数值关系，因为 CPU 的运算速度还要看 CPU 的流水线的各方面的性能指标（架构、缓存、指令集、CPU 的位数、Cache 大小等）。由于主频并不直接代表运算速度，因此在一定情况下很可能会出现主频较高的 CPU 实际运算速度较低的现象。</p><h3 id="不同级别的语言编写的程序有什么区别？哪种语言编写的程序能被硬件直接执行？"><a class="header-anchor" href="#不同级别的语言编写的程序有什么区别？哪种语言编写的程序能被硬件直接执行？"></a>不同级别的语言编写的程序有什么区别？哪种语言编写的程序能被硬件直接执行？</h3><p>机器语言和汇编语言与机器指令对应，而高级语言不与指令直接对应，具有较好的可移植性。其中机器语言可以被硬件直按执行。</p><h3 id="什么是透明性？透明是指什么都能看见吗？"><a class="header-anchor" href="#什么是透明性？透明是指什么都能看见吗？"></a>什么是透明性？透明是指什么都能看见吗？</h3><p>在计算机领域中，站在某类用户的角度，若感觉不到某个事物或属性的存在，即“看”不到某个事物或属性，则称为“对该用户而言，某个事物或属性是透明的”。这与日常生活中的“透明”概念（公开、看得见）正好相反。</p><p>例如，对于高级语言程序员来说，浮点数格式、乘法指令等这些指令的格式、数据如何在运算器中运算等都是透明的；而对于机器语言或汇编语言程序员来说，指令的格式、机器结构、数据格式等则不是透明的。</p><p>在 CPU 中，IR、MAR 和 MDR 对各类程序员都是透明的。</p><h3 id="计算机体系结构和计算机组成的区别和联系是什么？"><a class="header-anchor" href="#计算机体系结构和计算机组成的区别和联系是什么？"></a>计算机体系结构和计算机组成的区别和联系是什么？</h3><p>计算机体系结构是指机器语言或汇编语言程序员所看得到的传统机器的属性，包括指令集、数据类型、存储器寻址技术等，大都属于抽象的属性。</p><p>计算机组成是指如何实现计算机体系结构所体现的属性，它包含对许多对程序员来说透明的硬件细节。例如，指令系统属于结构的问题，但指令的实现即如何取指令、分析指令、取操作数、如何运算等都属于组成的问题。因此，当两台机器指令系统相同时，只能认为它们具有相同的结构，至于这两台机器如何实现其指令，完全可以不同，即可以认为它们的组成方式是不同的。例<br>如，一台机器是否具备乘法指令是一个结构的问题，但实现乘法指令采用什么方式则是一个组成的问题。</p><p>许多计算机厂商提供一系列体系结构相同的计算机，而它们的组成却有相当大的差别，即使是同一系列的不同型号机器，其性能和价格差异也很大。例如，IBM System/370 结构就包含了多种价位和性能的机型。</p><h3 id="基准程序执行得越快说明机器的性能越好吗"><a class="header-anchor" href="#基准程序执行得越快说明机器的性能越好吗"></a>基准程序执行得越快说明机器的性能越好吗?</h3><p>一般情况下， 基准测试程序能够反映机器性能的好坏。但是，由于基准程序中的语句存在频度的差异，因此运行结果并不能完全说明问题。</p><h3 id="机器字长、指令字长和存储字长的关系"><a class="header-anchor" href="#机器字长、指令字长和存储字长的关系"></a>机器字长、指令字长和存储字长的关系</h3><ul><li>机器字长：计算机能直接处理的二进制数据的位数，机器字长一般等于内部寄存器的大小，它决定了计算机的运算精度。</li><li>指令字长：一个指令字中包含的二进制代码的位数。</li><li>存储字长：一个存储单元存储的二进制代码的长度。</li></ul><p>它们都必须是字节的整数倍。</p><p>指令字长一般取存储字长的整数倍，若指令字长等于存储字长的 2 倍，则需要 2 次访存来取出一条指令，因此取指周期为机器周期的 2 倍；若指令字长等于存储字长，则取指周期等于机器周期。</p><p>早期的计算机存储字长一般和机器的指令字长与数据字长相等，因此访问一次主存便可取出一条指令或一个数据。随着计算机的发展，指令字长可变，数据字长也可变，但它们必须都是字节的整数倍。</p><p>请注意 64 位操作系统是指特别为 64 位架构的计算机而设计的操作系统，它能够利用 64 位处理器的优势。但 64 位机器既可以使用 64 位操作系统，又可以使用 32 位操作系统。而 32 位处理器是无法使用 64 位操作系统的。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;计算机系统的组成&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#计算机系统的组成&quot;&gt;&lt;/a&gt;计算机系统的组成&lt;/h2&gt;
&lt;p&gt;硬件系统和软件系统共同构成了一个完整的计算机系统。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;font color=&quot;#ea66a6</summary>
      
    
    
    
    <category term="计算机组成原理" scheme="https://halo123.top/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/"/>
    
    
    <category term="计算机组成原理" scheme="https://halo123.top/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>内存管理</title>
    <link href="https://halo123.top/2021/05/25/ComputerOperatingSystem/D_%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/"/>
    <id>https://halo123.top/2021/05/25/ComputerOperatingSystem/D_%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/</id>
    <published>2021-05-25T15:33:05.000Z</published>
    <updated>2021-05-26T04:52:10.894Z</updated>
    
    <content type="html"><![CDATA[<h2 id="内存管理概念"><a class="header-anchor" href="#内存管理概念"></a>内存管理概念</h2><h3 id="内存管理的基本原理和要求"><a class="header-anchor" href="#内存管理的基本原理和要求"></a>内存管理的基本原理和要求</h3><h2 id="虚拟内存管理"><a class="header-anchor" href="#虚拟内存管理"></a>虚拟内存管理</h2>]]></content>
    
    
    <summary type="html">内存管理</summary>
    
    
    
    <category term="操作系统" scheme="https://halo123.top/categories/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
    
    <category term="操作系统" scheme="https://halo123.top/tags/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
  </entry>
  
  <entry>
    <title>VSCode 下 C\C++ 开发环境配置</title>
    <link href="https://halo123.top/2021/05/24/C/VSCode%E4%B8%8BC%E5%BC%80%E5%8F%91/"/>
    <id>https://halo123.top/2021/05/24/C/VSCode%E4%B8%8BC%E5%BC%80%E5%8F%91/</id>
    <published>2021-05-24T13:15:36.000Z</published>
    <updated>2021-05-28T13:52:06.180Z</updated>
    
    <content type="html"><![CDATA[<p>参考视频：</p><div class="tag link"><a class="link-card" title="哔哩哔哩视频" href="https://www.bilibili.com/video/BV13K411M78v"><div class="left"><img src="https://cdn.jsdelivr.net/gh/halo-blog/cdn-blog-img-b@master/img/bilibiliIcon.svg"/></div><div class="right"><p class="text">哔哩哔哩视频</p><p class="url">https://www.bilibili.com/video/BV13K411M78v</p></div></a></div><h2 id="开发环境搭建"><a class="header-anchor" href="#开发环境搭建"></a>开发环境搭建</h2><ul><li>MinGW-w64 编译器 <a href="http://www.mingw-w64.org/doku.php/download">官网下载链接</a></li><li>CMake工具 <a href="https://cmake.org/download/">官网下载链接</a></li></ul><p>将下载的压缩包解压，并将 解压后的文件夹的 bin 文件夹目录放到环境变量中。</p><p>VSCode 插件，在插件中搜索下载</p><ul><li>C\C++：智能提示、debug 和代码浏览</li><li>CMake：CMake 的语法支持</li><li>CMake Tools：CMake 的扩展支持</li></ul><hr><p>CMake Tools 安装遇到的坑</p><p>问题描述：</p><p>CMake Tools 版本为 1.7.3，报错代码如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Bad CMake executable . Is it installed or settings contain the correct path (cmake.cmakePath)? </span><br></pre></td></tr></table></figure><p>原因是 CMake Tools 没有找到正确的 CMake 安装路径</p><p>解决方法：在设置中指定 cmake.exe 的文件地址。具体方法是打开设置（快捷键 Ctrl + 逗号）搜索 cmake.cmakePath 可以看到 Name/path of the CMake executable to use. 默认为 cmake 将其设置自己安装 cmake.exe 文件地址，例如我的设置是 E:\Program\Develop\Cmake\bin\cmake.exe。</p><p>参考解决地址：<a href="https://github.com/microsoft/vscode-cmake-tools/issues/685">https://github.com/microsoft/vscode-cmake-tools/issues/685</a></p><h2 id="基于-g-命令"><a class="header-anchor" href="#基于-g-命令"></a>基于 g++ 命令</h2><h3 id="编译单文件"><a class="header-anchor" href="#编译单文件"></a>编译单文件</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">swap</span><span class="params">(<span class="keyword">int</span> &amp;a, <span class="keyword">int</span> &amp;b)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> temp;</span><br><span class="line">    temp = a;</span><br><span class="line">    a = b;</span><br><span class="line">    b = temp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> val1 = <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">int</span> val2 = <span class="number">20</span>;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;Before swap:&quot;</span> &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;val1 = &quot;</span> &lt;&lt; val1 &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;val2 = &quot;</span> &lt;&lt; val2 &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">swap</span>(val1, val2);</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;After swap:&quot;</span> &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;val1 = &quot;</span> &lt;&lt; val1 &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;val2 = &quot;</span> &lt;&lt; val2 &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里顺便写段实例代码，打开命令行 VSCode 默认快捷键为 Ctrl 加反引号。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">E:\Project\CodeBase\C\VSCode&gt;g++ .\main.cpp</span><br><span class="line"></span><br><span class="line">E:\Project\CodeBase\C\VSCode&gt;.\a.exe</span><br><span class="line">Before swap:</span><br><span class="line">val1 &#x3D; 10   </span><br><span class="line">val2 &#x3D; 20   </span><br><span class="line">After swap: </span><br><span class="line">val1 &#x3D; 20   </span><br><span class="line">val2 &#x3D; 10  </span><br></pre></td></tr></table></figure><p>这里会默认生成 a.exe 可执行文件，通过命令行可以运行。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">E:\Project\CodeBase\C\VSCode&gt; g++ -g .\main.cpp -o swap</span><br></pre></td></tr></table></figure><p>通过上一段命令可以生成名为 swap 的可调试的可执行文件</p><p><img src="https://cdn.jsdelivr.net/gh/halo-blog/cdn-blog-img-b@master/img/VSCode%E9%85%8D%E7%BD%AElaunch.json.png" alt="VSCode配置launch"></p><p>选择 g++.exe - Build and debug active file ，会在目录 .vscode 下自动生成 launch.json 文件夹，同时产生了与 cpp 同名的 .exe 文件用于断点调试</p><h3 id="编译多文件"><a class="header-anchor" href="#编译多文件"></a>编译多文件</h3><p>将上述代码拆分成多个文件如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// many_main.cpp</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;many.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> val1 = <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">int</span> val2 = <span class="number">20</span>;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;Before swap:&quot;</span> &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;val1 = &quot;</span> &lt;&lt; val1 &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;val2 = &quot;</span> &lt;&lt; val2 &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">swap</span>(val1, val2);</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;After swap:&quot;</span> &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;val1 = &quot;</span> &lt;&lt; val1 &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;val2 = &quot;</span> &lt;&lt; val2 &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// many_swap.cpp</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;many.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">swap</span><span class="params">(<span class="keyword">int</span> &amp;a, <span class="keyword">int</span> &amp;b)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> temp;</span><br><span class="line">    temp = a;</span><br><span class="line">    a = b;</span><br><span class="line">    b = temp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// many.h</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">swap</span><span class="params">(<span class="keyword">int</span> &amp;a, <span class="keyword">int</span> &amp;b)</span></span>;</span><br></pre></td></tr></table></figure><p>通过 g++ 编译多文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">g++ -g .\many_main.cpp .\many_swap.cpp -o many_swap </span><br></pre></td></tr></table></figure><p>如果使用 VSCode 默认生成的 launch.json 进行调试会出错，这里需要进行配置，修改 <code>program</code> 属性为 g++ 生成的可调式的可执行文件名，并注释 <code>preLaunchTask</code>，这里因为自己使用 g++ 命令编程完成，不在需要 VSCode 进行编译</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;version&quot;</span>: <span class="string">&quot;0.2.0&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;configurations&quot;</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;g++.exe - Build and debug active file&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;cppdbg&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;request&quot;</span>: <span class="string">&quot;launch&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;program&quot;</span>: <span class="string">&quot;$&#123;fileDirname&#125;\\many_swap.exe&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;args&quot;</span>: [],</span><br><span class="line">            <span class="attr">&quot;stopAtEntry&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">            <span class="attr">&quot;cwd&quot;</span>: <span class="string">&quot;$&#123;fileDirname&#125;&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;environment&quot;</span>: [],</span><br><span class="line">            <span class="attr">&quot;externalConsole&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">            <span class="attr">&quot;MIMode&quot;</span>: <span class="string">&quot;gdb&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;miDebuggerPath&quot;</span>: <span class="string">&quot;E:\\Program\\Develop\\MinGW\\mingw64\\bin\\gdb.exe&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;setupCommands&quot;</span>: [</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="attr">&quot;description&quot;</span>: <span class="string">&quot;Enable pretty-printing for gdb&quot;</span>,</span><br><span class="line">                    <span class="attr">&quot;text&quot;</span>: <span class="string">&quot;-enable-pretty-printing&quot;</span>,</span><br><span class="line">                    <span class="attr">&quot;ignoreFailures&quot;</span>: <span class="literal">true</span></span><br><span class="line">                &#125;</span><br><span class="line">            ],</span><br><span class="line">            <span class="comment">// &quot;preLaunchTask&quot;: &quot;C/C++: g++.exe build active file&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="基于-Cmake"><a class="header-anchor" href="#基于-Cmake"></a>基于 Cmake</h2><p>在主目录中新建 CMakeLists.txt</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">project(SWAP)</span><br><span class="line"></span><br><span class="line">add_executable(cmake_swap many_main.cpp many_swap.cpp)</span><br></pre></td></tr></table></figure><p>使用 Shift + Ctrl + P 调出配置搜索，搜索 CMake:Configure 选择 mingw</p><p>之后会自动生成 build 文件夹</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">E:\Project\CodeBase\C\VSCode&gt;cd build</span><br><span class="line"></span><br><span class="line">E:\Project\CodeBase\C\VSCode\build&gt;cmake ..</span><br><span class="line">-- Configuring done</span><br><span class="line">-- Generating done</span><br><span class="line">-- Build files have been written to: E:&#x2F;Project&#x2F;CodeBase&#x2F;C&#x2F;VSCode&#x2F;build</span><br><span class="line"></span><br><span class="line">E:\Project\CodeBase\C\VSCode\build&gt;mingw32-make.exe</span><br></pre></td></tr></table></figure><p>就会在 build 文件夹中生成 cmake_swap.exe （根据 CMakeLists.txt 配置生成）</p><p>如果电脑中安装了 VS 可以会调用微软的 MSVC 编译器，第一次使用时用</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cmake -G &quot;MinGW Makefiles&quot; ..</span><br></pre></td></tr></table></figure><p>来代替</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cmake ..</span><br></pre></td></tr></table></figure><h2 id="修改-launch-json-和-tasks-json"><a class="header-anchor" href="#修改-launch-json-和-tasks-json"></a>修改 launch.json 和 tasks.json</h2><p>launch.json 需要关注的点为：</p><ul><li><code>program</code>：可执行文件的路径</li><li><code>preLaunchTask</code>：对应 tasks.json 的 <code>label</code> 属性的值</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;version&quot;</span>: <span class="string">&quot;0.2.0&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;configurations&quot;</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;g++.exe - Build and debug active file&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;cppdbg&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;request&quot;</span>: <span class="string">&quot;launch&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;program&quot;</span>: <span class="string">&quot;$&#123;fileDirname&#125;\\build\\cmake_swap.exe&quot;</span>,</span><br><span class="line">            <span class="comment">// 调试时需要添加的参数</span></span><br><span class="line">            <span class="attr">&quot;args&quot;</span>: [],</span><br><span class="line">            <span class="attr">&quot;stopAtEntry&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">            <span class="attr">&quot;cwd&quot;</span>: <span class="string">&quot;$&#123;fileDirname&#125;&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;environment&quot;</span>: [],</span><br><span class="line">            <span class="attr">&quot;externalConsole&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">            <span class="attr">&quot;MIMode&quot;</span>: <span class="string">&quot;gdb&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;miDebuggerPath&quot;</span>: <span class="string">&quot;E:\\Program\\Develop\\MinGW\\mingw64\\bin\\gdb.exe&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;setupCommands&quot;</span>: [</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="attr">&quot;description&quot;</span>: <span class="string">&quot;Enable pretty-printing for gdb&quot;</span>,</span><br><span class="line">                    <span class="attr">&quot;text&quot;</span>: <span class="string">&quot;-enable-pretty-printing&quot;</span>,</span><br><span class="line">                    <span class="attr">&quot;ignoreFailures&quot;</span>: <span class="literal">true</span></span><br><span class="line">                &#125;</span><br><span class="line">            ],</span><br><span class="line">            <span class="attr">&quot;preLaunchTask&quot;</span>: <span class="string">&quot;C/C++: g++.exe build active file&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>tasks.json 用于调试之前的编译工作指令，需要关注的点为：</p><ul><li><code>args</code>：多文件需要指定文件名</li><li><code>label</code>：与 launch.json 的 <code>preLaunchTask</code> 对应</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;tasks&quot;</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;cppbuild&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;label&quot;</span>: <span class="string">&quot;C/C++: g++.exe build active file&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;command&quot;</span>: <span class="string">&quot;E:\\Program\\Develop\\MinGW\\mingw64\\bin\\g++.exe&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;args&quot;</span>: [</span><br><span class="line">                <span class="string">&quot;-g&quot;</span>,</span><br><span class="line">                <span class="string">&quot;$&#123;file&#125;&quot;</span>,</span><br><span class="line">                <span class="string">&quot;-o&quot;</span>,</span><br><span class="line">                <span class="string">&quot;$&#123;fileDirname&#125;\\$&#123;fileBasenameNoExtension&#125;.exe&quot;</span></span><br><span class="line">            ],</span><br><span class="line">            <span class="attr">&quot;options&quot;</span>: &#123;</span><br><span class="line">                <span class="attr">&quot;cwd&quot;</span>: <span class="string">&quot;$&#123;fileDirname&#125;&quot;</span></span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">&quot;problemMatcher&quot;</span>: [</span><br><span class="line">                <span class="string">&quot;$gcc&quot;</span></span><br><span class="line">            ],</span><br><span class="line">            <span class="attr">&quot;group&quot;</span>: &#123;</span><br><span class="line">                <span class="attr">&quot;kind&quot;</span>: <span class="string">&quot;build&quot;</span>,</span><br><span class="line">                <span class="attr">&quot;isDefault&quot;</span>: <span class="literal">true</span></span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">&quot;detail&quot;</span>: <span class="string">&quot;Task generated by Debugger.&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">    ],</span><br><span class="line">    <span class="attr">&quot;version&quot;</span>: <span class="string">&quot;2.0.0&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对于 CMake 文件的自动配置 tasks.json 如下</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;version&quot;</span>: <span class="string">&quot;2.0.0&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;options&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;cwd&quot;</span>: <span class="string">&quot;$&#123;fileDirname&#125;/build&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">&quot;tasks&quot;</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;shell&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;label&quot;</span>: <span class="string">&quot;cmake&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;command&quot;</span>: <span class="string">&quot;cmake&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;args&quot;</span>: [</span><br><span class="line">                <span class="string">&quot;..&quot;</span></span><br><span class="line">            ]</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">&quot;label&quot;</span>: <span class="string">&quot;make&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;group&quot;</span>: &#123;</span><br><span class="line">                <span class="attr">&quot;kind&quot;</span>: <span class="string">&quot;build&quot;</span>,</span><br><span class="line">                <span class="attr">&quot;isDefault&quot;</span>: <span class="literal">true</span></span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">&quot;command&quot;</span>: <span class="string">&quot;mingw32-make.exe&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;args&quot;</span>: []</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">&quot;label&quot;</span>: <span class="string">&quot;Build&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;dependsOn&quot;</span>: [</span><br><span class="line">                <span class="string">&quot;cmake&quot;</span>,</span><br><span class="line">                <span class="string">&quot;make&quot;</span></span><br><span class="line">            ]</span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;参考视频：&lt;/p&gt;
&lt;div class=&quot;tag link&quot;&gt;&lt;a class=&quot;link-card&quot; title=&quot;哔哩哔哩视频&quot; href=&quot;https://www.bilibili.com/video/BV13K411M78v&quot;&gt;&lt;div class=&quot;left&quot;&gt;</summary>
      
    
    
    
    <category term="C\C++" scheme="https://halo123.top/categories/C-C/"/>
    
    
    <category term="C" scheme="https://halo123.top/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>Java IO</title>
    <link href="https://halo123.top/2021/05/23/Java/Java-I-IO/"/>
    <id>https://halo123.top/2021/05/23/Java/Java-I-IO/</id>
    <published>2021-05-23T08:31:54.000Z</published>
    <updated>2021-05-27T13:59:27.027Z</updated>
    
    <content type="html"><![CDATA[<p>参考资料：《Java 技术手册》</p><h2 id="File-类"><a class="header-anchor" href="#File-类"></a>File 类</h2><p>File 类是对文件系统中文件以及文件夹进行操作的类，可以通过面向对象的思想操作文件和文件夹。是以前 Java 处理文件 I/O 的基础。这个抽象既能表示文件，也能表示目录，不过有时使用起来有些麻烦，写出的代码如下所示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建一个文件对象，表示用户的家目录</span></span><br><span class="line">File homedir = <span class="keyword">new</span> File(System.getProperty(<span class="string">&quot;user.home&quot;</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建一个对象，表示配置文件</span></span><br><span class="line"><span class="comment">// （家目录中应该存在这个文件）</span></span><br><span class="line">File f = <span class="keyword">new</span> File(homedir, <span class="string">&quot;app.conf&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 检查文件是否存在，是否真是文件，以及是否可读</span></span><br><span class="line"><span class="keyword">if</span> (f.exists() &amp;&amp; f.isFile() &amp;&amp; f.canRead()) &#123;</span><br><span class="line">    <span class="comment">// 创建一个文件对象，表示新配置目录</span></span><br><span class="line">    File configdir = <span class="keyword">new</span> File(f, <span class="string">&quot;.configdir&quot;</span>);</span><br><span class="line">    <span class="comment">// 然后创建这个目录</span></span><br><span class="line">    configdir.mkdir();</span><br><span class="line">    <span class="comment">// 最后，把配置文件移到新位置</span></span><br><span class="line">    f.renameTo(<span class="keyword">new</span> File(configdir, <span class="string">&quot;.config&quot;</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上述代码展现了 File 类使用灵活的一面，但也演示了这种抽象带来的一些问题。一般情况下，需要调用很多方法查询 File 对象才能判断这个对象到底表示的是什么，以及具有什么能力。</p><p>File 类中有相当多的方法，但根本没有直接提供一些基本功能（尤其是无法读取文件的内容），下述代码简要总结了 File 类中的方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 权限管理</span></span><br><span class="line"><span class="keyword">boolean</span> canX = f.canExecute();</span><br><span class="line"><span class="keyword">boolean</span> canR = f.canRead();</span><br><span class="line"><span class="keyword">boolean</span> canW = f.canWrite();</span><br><span class="line"></span><br><span class="line"><span class="keyword">boolean</span> ok;</span><br><span class="line">ok = f.setReadOnly();</span><br><span class="line">ok = f.setExecutable(<span class="keyword">true</span>);</span><br><span class="line">ok = f.setReadable(<span class="keyword">true</span>);</span><br><span class="line">ok = f.setWritable(<span class="keyword">false</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用不同的方式表示文件名</span></span><br><span class="line">File absF = f.getAbsoluteFile();</span><br><span class="line">File canF = f.getCanonicalFile();</span><br><span class="line">String absName = f.getAbsolutePath();</span><br><span class="line">String canName = f.getCanonicalPath();</span><br><span class="line">String name = f.getName();</span><br><span class="line">String pName = getParent();</span><br><span class="line">URI fileURI = f.toURI(); <span class="comment">// 创建文件路径的URI形式</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 文件的元数据</span></span><br><span class="line"><span class="keyword">boolean</span> exists = f.exists();</span><br><span class="line"><span class="keyword">boolean</span> isAbs = f.isAbsolute();</span><br><span class="line"><span class="keyword">boolean</span> isDir = f.isDirectory();</span><br><span class="line"><span class="keyword">boolean</span> isFile = f.isFile();</span><br><span class="line"><span class="keyword">boolean</span> isHidden = f.isHidden();</span><br><span class="line"><span class="keyword">long</span> modTime = f.lastModified(); <span class="comment">// 距Epoch时间的毫秒数</span></span><br><span class="line"><span class="keyword">boolean</span> updateOK = f.setLastModified(updateTime); <span class="comment">// 毫秒</span></span><br><span class="line"><span class="keyword">long</span> fileLen = f.length();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 文件管理操作</span></span><br><span class="line"><span class="keyword">boolean</span> renamed = f.renameTo(destFile);</span><br><span class="line"><span class="keyword">boolean</span> deleted = f.delete();</span><br><span class="line"><span class="comment">// 创建文件不会覆盖现有文件</span></span><br><span class="line"><span class="keyword">boolean</span> createdOK = f.createNewFile();</span><br><span class="line"><span class="comment">// 处理临时文件</span></span><br><span class="line">File tmp = File.createTempFile(<span class="string">&quot;my-tmp&quot;</span>, <span class="string">&quot;.tmp&quot;</span>);</span><br><span class="line">tmp.deleteOnExit();</span><br><span class="line"><span class="comment">// 处理目录</span></span><br><span class="line"><span class="keyword">boolean</span> createdDir = dir.mkdir();</span><br><span class="line">String[] fileNames = dir.list();</span><br><span class="line">File[] files = dir.listFiles();</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;参考资料：《Java 技术手册》&lt;/p&gt;
&lt;h2 id=&quot;File-类&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#File-类&quot;&gt;&lt;/a&gt;File 类&lt;/h2&gt;
&lt;p&gt;File 类是对文件系统中文件以及文件夹进行操作的类，可以通过面向对象的思想操作文</summary>
      
    
    
    
    <category term="Java" scheme="https://halo123.top/categories/Java/"/>
    
    
    <category term="Java" scheme="https://halo123.top/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Java 泛型</title>
    <link href="https://halo123.top/2021/05/20/Java/Java-G-%E6%B3%9B%E5%9E%8B/"/>
    <id>https://halo123.top/2021/05/20/Java/Java-G-%E6%B3%9B%E5%9E%8B/</id>
    <published>2021-05-20T13:47:40.000Z</published>
    <updated>2021-05-28T04:23:12.903Z</updated>
    
    <content type="html"><![CDATA[<h2 id="什么是泛型"><a class="header-anchor" href="#什么是泛型"></a>什么是泛型</h2><p>在讲解什么是泛型之前，我们先观察 Java 标准库提供的 <code>ArrayList</code>，它可以看作“可变长度”的数组，因为用起来比数组更方便。</p><p>实际上 <code>ArrayList</code> 内部就是一个 <code>Object[]</code> 数组，配合存储一个当前分配的长度，就可以充当“可变数组”：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArrayList</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Object[] array;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> size;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(Object e)</span> </span>&#123;...&#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">remove</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;...&#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">get</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;...&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果用上述 <code>ArrayList</code> 存储 String 类型，会有这么几个缺点：</p><ul><li>需要强制转型；</li><li>不方便，易出错。</li></ul><p>例如，代码必须这么写：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ArrayList list = <span class="keyword">new</span> ArrayList();</span><br><span class="line">list.add(<span class="string">&quot;Hello&quot;</span>);</span><br><span class="line"><span class="comment">// 获取到Object，必须强制转型为String:</span></span><br><span class="line">String first = (String) list.get(<span class="number">0</span>);</span><br></pre></td></tr></table></figure><p>很容易出现 <code>ClassCastException</code>，因为容易“误转型”：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">list.add(<span class="keyword">new</span> Integer(<span class="number">123</span>));</span><br><span class="line"><span class="comment">// ERROR: ClassCastException:</span></span><br><span class="line">String second = (String) list.get(<span class="number">1</span>);</span><br></pre></td></tr></table></figure><p>要解决上述问题，我们可以为 String 单独编写一种 ArrayList：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StringArrayList</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String[] array;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> size;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(String e)</span> </span>&#123;...&#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">remove</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;...&#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">get</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;...&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样一来，存入的必须是 String，取出的也一定是 String，不需要强制转型，因为编译器会强制检查放入的类型：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">StringArrayList list = <span class="keyword">new</span> StringArrayList();</span><br><span class="line">list.add(<span class="string">&quot;Hello&quot;</span>);</span><br><span class="line">String first = list.get(<span class="number">0</span>);</span><br><span class="line"><span class="comment">// 编译错误: 不允许放入非String类型:</span></span><br><span class="line">list.add(<span class="keyword">new</span> Integer(<span class="number">123</span>));</span><br></pre></td></tr></table></figure><p>问题暂时解决。然而，新的问题是，如果要存储 Integer，还需要为 Integer 单独编写一种 ArrayList，实际上，还需要为其他所有 class 单独编写一种 ArrayList。这是不可能的，JDK 的 class 就有上千个，而且它还不知道其他人编写的 class。</p><p>为了解决新的问题，我们必须把 <code>ArrayList</code> 变成一种模板：<code>ArrayList&lt;T&gt;</code>，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArrayList</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> T[] array;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> size;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(T e)</span> </span>&#123;...&#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">remove</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;...&#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> T <span class="title">get</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;...&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>T</code> 可以是任何 class。这样一来，我们就实现了，编写一次模版，可以创建任意类型的 <code>ArrayList</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建可以存储String的ArrayList:</span></span><br><span class="line">ArrayList&lt;String&gt; strList = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line"><span class="comment">// 创建可以存储Float的ArrayList:</span></span><br><span class="line">ArrayList&lt;Float&gt; floatList = <span class="keyword">new</span> ArrayList&lt;Float&gt;();</span><br><span class="line"><span class="comment">// 创建可以存储Person的ArrayList:</span></span><br><span class="line">ArrayList&lt;Person&gt; personList = <span class="keyword">new</span> ArrayList&lt;Person&gt;();</span><br></pre></td></tr></table></figure><p>因此，泛型就是定义一种模板，例如 <code>ArrayList&lt;T&gt;</code>，然后在代码中为用到的类创建对应的 <code>ArrayList&lt;类型&gt;</code>。由编译器针对类型作检查：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">strList.add(<span class="string">&quot;hello&quot;</span>); <span class="comment">// OK</span></span><br><span class="line">String s = strList.get(<span class="number">0</span>); <span class="comment">// OK</span></span><br><span class="line">strList.add(<span class="keyword">new</span> Integer(<span class="number">123</span>)); <span class="comment">// compile error!</span></span><br><span class="line">Integer n = strList.get(<span class="number">0</span>); <span class="comment">// compile error!</span></span><br></pre></td></tr></table></figure><p>这样一来，既实现了编写一次，万能匹配，又通过编译器保证了类型安全：这就是泛型。</p><h3 id="向上转型"><a class="header-anchor" href="#向上转型"></a>向上转型</h3><p>在 Java 标准库中的 <code>ArrayList&lt;T&gt;</code> 实现了 <code>List&lt;T&gt;</code> 接口，它可以向上转型为 <code>List&lt;T&gt;</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArrayList</span>&lt;<span class="title">T</span>&gt; <span class="keyword">implements</span> <span class="title">List</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>即类型 <code>ArrayList&lt;T&gt;</code> 可以向上转型为 <code>List&lt;T&gt;</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">List&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br></pre></td></tr></table></figure><p>要特别注意：不能把 <code>ArrayList&lt;Integer&gt;</code> 向上转型为 <code>ArrayList&lt;Number&gt;</code> 或 <code>List&lt;Number&gt;</code> 。</p><p>假设 <code>ArrayList&lt;Integer&gt;</code> 可以向上转型为 <code>ArrayList&lt;Number&gt;</code>，观察一下代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建ArrayList&lt;Integer&gt;类型：</span></span><br><span class="line">ArrayList&lt;Integer&gt; integerList = <span class="keyword">new</span> ArrayList&lt;Integer&gt;();</span><br><span class="line"><span class="comment">// 添加一个Integer：</span></span><br><span class="line">integerList.add(<span class="keyword">new</span> Integer(<span class="number">123</span>));</span><br><span class="line"><span class="comment">// “向上转型”为ArrayList&lt;Number&gt;：</span></span><br><span class="line">ArrayList&lt;Number&gt; numberList = integerList;</span><br><span class="line"><span class="comment">// 添加一个Float，因为Float也是Number：</span></span><br><span class="line">numberList.add(<span class="keyword">new</span> Float(<span class="number">12.34</span>));</span><br><span class="line"><span class="comment">// 从ArrayList&lt;Integer&gt;获取索引为1的元素（即添加的Float）：</span></span><br><span class="line">Integer n = integerList.get(<span class="number">1</span>); <span class="comment">// ClassCastException!</span></span><br></pre></td></tr></table></figure><p>我们把一个 <code>ArrayList&lt;Integer&gt;</code> 转型为 <code>ArrayList&lt;Number&gt;</code> 类型后，这个 <code>ArrayList&lt;Number&gt;</code> 就可以接受 Float 类型，因为 Float 是 Number 的子类。但是，<code>ArrayList&lt;Number&gt;</code> 实际上和 <code>ArrayList&lt;Integer&gt;</code> 是同一个对象，也就是 <code>ArrayList&lt;Integer&gt;</code> 类型，它不可能接受 Float 类型， 所以在获取 Integer 的时候将产生  <code>ClassCastException</code>。</p><p>实际上，编译器为了避免这种错误，根本就不允许把 <code>ArrayList&lt;Integer&gt;</code> 转型为 <code>ArrayList&lt;Number&gt;</code>。</p><p><code>ArrayList&lt;Integer&gt;</code> 和 <code>ArrayList&lt;Number&gt;</code> 两者完全没有继承关系。</p><h2 id="使用泛型"><a class="header-anchor" href="#使用泛型"></a>使用泛型</h2><p>使用 ArrayList 时，如果不定义泛型类型时，泛型类型实际上就是 Object：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 编译器警告</span></span><br><span class="line">List list = <span class="keyword">new</span> ArrayList();</span><br><span class="line">list.add(<span class="string">&quot;Hello&quot;</span>);</span><br><span class="line">list.add(<span class="string">&quot;World&quot;</span>);</span><br><span class="line">String first = (String) list.get(<span class="number">0</span>);</span><br><span class="line">String second = (String) list.get(<span class="number">1</span>);</span><br></pre></td></tr></table></figure><p>此时，只能把 <code>&lt;T&gt;</code> 当作 Object 使用，没有发挥泛型的优势。</p><p>当我们定义泛型类型 <code>&lt;String&gt;</code> 后，<code>List&lt;T&gt;</code> 的泛型接口变为强类型 <code>List&lt;String&gt;</code> ：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 无编译器警告</span></span><br><span class="line">List&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line">list.add(<span class="string">&quot;Hello&quot;</span>);</span><br><span class="line">list.add(<span class="string">&quot;World&quot;</span>);</span><br><span class="line"><span class="comment">// 无强制转型:</span></span><br><span class="line">String first = list.get(<span class="number">0</span>);</span><br><span class="line">String second = list.get(<span class="number">1</span>);</span><br></pre></td></tr></table></figure><p>当我们定义泛型类型 <code>&lt;Number&gt;</code> 后，<code>List&lt;T&gt;</code> 的泛型接口变为强类型 <code>List&lt;Number&gt;</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">List&lt;Number&gt; list = <span class="keyword">new</span> ArrayList&lt;Number&gt;();</span><br><span class="line">list.add(<span class="keyword">new</span> Integer(<span class="number">123</span>));</span><br><span class="line">list.add(<span class="keyword">new</span> Double(<span class="number">12.34</span>));</span><br><span class="line">Number first = list.get(<span class="number">0</span>);</span><br><span class="line">Number second = list.get(<span class="number">1</span>);</span><br></pre></td></tr></table></figure><p>编译器如果能自动推断出泛型类型，就可以省略后面的泛型类型。例如，对于下面的代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">List&lt;Number&gt; list = <span class="keyword">new</span> ArrayList&lt;Number&gt;();</span><br></pre></td></tr></table></figure><p>编译器看到泛型类型 <code>List&lt;Number&gt;</code> 就可以自动推断出后面的 <code>ArrayList&lt;T&gt;</code> 的泛型类型必须是 <code>ArrayList&lt;Number&gt;</code>，因此，可以把代码简写为：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 可以省略后面的Number，编译器可以自动推断泛型类型</span></span><br><span class="line">List&lt;Number&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br></pre></td></tr></table></figure><p>除了 <code>ArrayList&lt;T&gt;</code> 使用了泛型，还可以在接口中使用泛型。例如，<code>Arrays.sort(Object[])</code> 可以对任意数组进行排序，但待排序的元素必须实现 <code>Comparable&lt;T&gt;</code> 这个泛型接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Comparable</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 返回负数: 当前实例比参数o小</span></span><br><span class="line"><span class="comment">     * 返回0: 当前实例与参数o相等</span></span><br><span class="line"><span class="comment">     * 返回正数: 当前实例比参数o大</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">compareTo</span><span class="params">(T o)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以直接对 String 数组进行排序：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">String[] ss = <span class="keyword">new</span> String[] &#123; <span class="string">&quot;Orange&quot;</span>, <span class="string">&quot;Apple&quot;</span>, <span class="string">&quot;Pear&quot;</span> &#125;;</span><br><span class="line">Arrays.sort(ss);</span><br><span class="line">System.out.println(Arrays.toString(ss));</span><br></pre></td></tr></table></figure><p>这是因为 String 本身已经实现了 <code>Comparable&lt;String&gt;</code> 接口。如果换成我们自定义的 Person 类型</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// sort</span></span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Person[] ps = <span class="keyword">new</span> Person[]&#123;</span><br><span class="line">                <span class="keyword">new</span> Person(<span class="string">&quot;Bob&quot;</span>, <span class="number">61</span>),</span><br><span class="line">                <span class="keyword">new</span> Person(<span class="string">&quot;Alice&quot;</span>, <span class="number">88</span>),</span><br><span class="line">                <span class="keyword">new</span> Person(<span class="string">&quot;Lily&quot;</span>, <span class="number">75</span>),</span><br><span class="line">        &#125;;</span><br><span class="line">        Arrays.sort(ps);</span><br><span class="line">        System.out.println(Arrays.toString(ps));</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    String name;</span><br><span class="line">    <span class="keyword">int</span> score;</span><br><span class="line"></span><br><span class="line">    Person(String name, <span class="keyword">int</span> score) &#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.score = score;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.name + <span class="string">&quot;,&quot;</span> + <span class="keyword">this</span>.score;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行程序，我们会得到 <code>ClassCastException</code>，即无法将 Person 转型为 Comparable。我们修改代码，让 Person 实现 <code>Comparable&lt;T&gt;</code> 接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> <span class="keyword">implements</span> <span class="title">Comparable</span>&lt;<span class="title">Person</span>&gt; </span>&#123;</span><br><span class="line">    String name;</span><br><span class="line">    <span class="keyword">int</span> score;</span><br><span class="line">    Person(String name, <span class="keyword">int</span> score) &#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.score = score;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compareTo</span><span class="params">(Person other)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.name.compareTo(other.name);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.name + <span class="string">&quot;,&quot;</span> + <span class="keyword">this</span>.score;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行上述代码，可以正确实现按 <code>name</code> 进行排序。也可以修改比较逻辑，例如，按 <code>score</code> 从高到低排序。</p><h2 id="编写泛型"><a class="header-anchor" href="#编写泛型"></a>编写泛型</h2><p>编写泛型类比普通类要复杂。通常来说，泛型类一般用在集合类中，例如 <code>ArrayList&lt;T&gt;</code>，我们很少需要编写泛型类。</p><p>如果我们确实需要编写一个泛型类，那么，应该如何编写它？</p><p>可以按照以下步骤来编写一个泛型类。</p><p>首先，按照某种类型，例如 <code>String</code>，来编写类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Pair</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String first;</span><br><span class="line">    <span class="keyword">private</span> String last;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Pair</span><span class="params">(String first, String last)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.first = first;</span><br><span class="line">        <span class="keyword">this</span>.last = last;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getFirst</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> first;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getLast</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> last;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后，标记所有的特定类型，这里是 <code>String</code>，最后，把特定类型 <code>String</code> 替换为 <code>T</code>，并申明 <code>&lt;T&gt;</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Pair</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> T first;</span><br><span class="line">    <span class="keyword">private</span> T last;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Pair</span><span class="params">(T first, T last)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.first = first;</span><br><span class="line">        <span class="keyword">this</span>.last = last;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> T <span class="title">getFirst</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> first;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> T <span class="title">getLast</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> last;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>熟练后即可直接从 <code>T</code> 开始编写。</p><h3 id="静态方法"><a class="header-anchor" href="#静态方法"></a>静态方法</h3><p>编写泛型类时，要特别注意，泛型类型 <code>&lt;T&gt;</code> 不能用于静态方法。例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Pair</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> T first;</span><br><span class="line">    <span class="keyword">private</span> T last;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Pair</span><span class="params">(T first, T last)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.first = first;</span><br><span class="line">        <span class="keyword">this</span>.last = last;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> T <span class="title">getFirst</span><span class="params">()</span> </span>&#123; ... &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> T <span class="title">getLast</span><span class="params">()</span> </span>&#123; ... &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 对静态方法使用&lt;T&gt;:</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Pair&lt;T&gt; <span class="title">create</span><span class="params">(T first, T last)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Pair&lt;T&gt;(first, last);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上述代码会导致编译错误，我们无法在静态方法 <code>create()</code> 的方法参数和返回类型上使用泛型类型 <code>T</code>。</p><p>可以在 <code>static</code> 修饰符后面加一个 <code>&lt;T&gt;</code>，编译就能通过：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Pair</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> T first;</span><br><span class="line">    <span class="keyword">private</span> T last;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Pair</span><span class="params">(T first, T last)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.first = first;</span><br><span class="line">        <span class="keyword">this</span>.last = last;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> T <span class="title">getFirst</span><span class="params">()</span> </span>&#123; ... &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> T <span class="title">getLast</span><span class="params">()</span> </span>&#123; ... &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 可以编译通过</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="function">Pair&lt;T&gt; <span class="title">create</span><span class="params">(T first, T last)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Pair&lt;T&gt;(first, last);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但实际上，这个 <code>&lt;T&gt;</code> 和 <code>Pair&lt;T&gt;</code> 类型的 <code>&lt;T&gt;</code> 已经没有任何关系了。</p><p>对于静态方法，我们可以单独改写为“泛型”方法，只需要使用另一个类型即可。对于上面的 <code>create()</code> 静态方法，我们应该把它改为另一种泛型类型，例如，<code>&lt;K&gt;</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Pair</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> T first;</span><br><span class="line">    <span class="keyword">private</span> T last;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Pair</span><span class="params">(T first, T last)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.first = first;</span><br><span class="line">        <span class="keyword">this</span>.last = last;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> T <span class="title">getFirst</span><span class="params">()</span> </span>&#123; ... &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> T <span class="title">getLast</span><span class="params">()</span> </span>&#123; ... &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 静态泛型方法应该使用其他类型区分</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;K&gt; <span class="function">Pair&lt;K&gt; <span class="title">create</span><span class="params">(K first, K last)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Pair&lt;K&gt;(first, last);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样才能清楚地将静态方法的泛型类型和实例类型的泛型类型区分开。</p><h3 id="多个泛型类型"><a class="header-anchor" href="#多个泛型类型"></a>多个泛型类型</h3><p>泛型还可以定义多种类型。例如，我们希望 <code>Pair</code> 不总是存储两个类型一样的对象，就可以使用类型 <code>&lt;T, K&gt;</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Pair</span>&lt;<span class="title">T</span>, <span class="title">K</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> T first;</span><br><span class="line">    <span class="keyword">private</span> K last;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Pair</span><span class="params">(T first, K last)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.first = first;</span><br><span class="line">        <span class="keyword">this</span>.last = last;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> T <span class="title">getFirst</span><span class="params">()</span> </span>&#123; ... &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> K <span class="title">getLast</span><span class="params">()</span> </span>&#123; ... &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用的时候，需要指出两种类型：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Pair&lt;String, Integer&gt; p = <span class="keyword">new</span> Pair&lt;&gt;(<span class="string">&quot;test&quot;</span>, <span class="number">123</span>);</span><br></pre></td></tr></table></figure><p>Java 标准库的 <code>Map&lt;K, V&gt;</code> 就是使用两种泛型类型的例子。它对 Key 使用一种类型，对 Value 使用另一种类型。</p><h3 id="擦拭法"><a class="header-anchor" href="#擦拭法"></a>擦拭法</h3><p>泛型是一种类似“模板代码”的技术，不同语言的泛型实现方式不一定相同。Java 语言的泛型实现方式是擦拭法（Type Erasure）。</p><p>所谓擦拭法是指，虚拟机对泛型其实一无所知，所有的工作都是编译器做的。例如，我们编写了一个泛型类 <code>Pair&lt;T&gt;</code>，这是编译器看到的代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Pair</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> T first;</span><br><span class="line">    <span class="keyword">private</span> T last;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Pair</span><span class="params">(T first, T last)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.first = first;</span><br><span class="line">        <span class="keyword">this</span>.last = last;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> T <span class="title">getFirst</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> first;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> T <span class="title">getLast</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> last;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>而虚拟机根本不知道泛型。这是虚拟机执行的代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Pair</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Object first;</span><br><span class="line">    <span class="keyword">private</span> Object last;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Pair</span><span class="params">(Object first, Object last)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.first = first;</span><br><span class="line">        <span class="keyword">this</span>.last = last;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">getFirst</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> first;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">getLast</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> last;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>因此，Java 使用擦拭法实现泛型，导致了：</p><ul><li>编译器把类型 <code>&lt;T&gt;</code> 视为 Object；</li><li>编译器根据 <code>&lt;T&gt;</code> 实现安全的强制转型。</li></ul><p>使用泛型的时候，我们编写的代码也是编译器看到的代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Pair&lt;String&gt; p = <span class="keyword">new</span> Pair&lt;&gt;(<span class="string">&quot;Hello&quot;</span>, <span class="string">&quot;world&quot;</span>);</span><br><span class="line">String first = p.getFirst();</span><br><span class="line">String last = p.getLast();</span><br></pre></td></tr></table></figure><p>而虚拟机执行的代码并没有泛型：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Pair p = <span class="keyword">new</span> Pair(<span class="string">&quot;Hello&quot;</span>, <span class="string">&quot;world&quot;</span>);</span><br><span class="line">String first = (String) p.getFirst();</span><br><span class="line">String last = (String) p.getLast();</span><br></pre></td></tr></table></figure><p>所以，Java 的泛型是由编译器在编译时实行的，编译器内部永远把所有类型 <code>T</code> 视为 Object 处理，但是，在需要转型的时候，编译器会根据 <code>T</code> 的类型自动为我们实行安全地强制转型。</p><p>了解了 Java 泛型的实现方式——擦拭法，我们就知道了 Java 泛型的局限：</p><p>局限一：<code>&lt;T&gt;</code> 不能是基本类型，例如 int，因为实际类型是 Object，Object 类型无法持有基本类型：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Pair&lt;<span class="keyword">int</span>&gt; p = <span class="keyword">new</span> Pair&lt;&gt;(<span class="number">1</span>, <span class="number">2</span>); <span class="comment">// compile error!</span></span><br></pre></td></tr></table></figure><p>局限二：无法取得带泛型的 Class。观察以下代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Pair&lt;String&gt; p1 = <span class="keyword">new</span> Pair&lt;&gt;(<span class="string">&quot;Hello&quot;</span>, <span class="string">&quot;world&quot;</span>);</span><br><span class="line">        Pair&lt;Integer&gt; p2 = <span class="keyword">new</span> Pair&lt;&gt;(<span class="number">123</span>, <span class="number">456</span>);</span><br><span class="line">        Class c1 = p1.getClass();</span><br><span class="line">        Class c2 = p2.getClass();</span><br><span class="line">        System.out.println(c1==c2); <span class="comment">// true</span></span><br><span class="line">        System.out.println(c1==Pair.class); <span class="comment">// true</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Pair</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> T first;</span><br><span class="line">    <span class="keyword">private</span> T last;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Pair</span><span class="params">(T first, T last)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.first = first;</span><br><span class="line">        <span class="keyword">this</span>.last = last;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> T <span class="title">getFirst</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> first;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> T <span class="title">getLast</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> last;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>因为 <code>T</code> 是 Object，我们对 <code>Pair&lt;String&gt;</code> 和 <code>Pair&lt;Integer&gt;</code> 类型获取 Class 时，获取到的是同一个 Class，也就是 Pair 类的 Class。</p><p>换句话说，所有泛型实例，无论 <code>T</code> 的类型是什么，<code>getClass()</code> 返回同一个 <code>Class</code> 实例，因为编译后它们全部都是 <code>Pair&lt;Object&gt;</code>。</p><p>局限三：无法判断带泛型的类型：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Pair&lt;Integer&gt; p = <span class="keyword">new</span> Pair&lt;&gt;(<span class="number">123</span>, <span class="number">456</span>);</span><br><span class="line"><span class="comment">// Compile error:</span></span><br><span class="line"><span class="keyword">if</span> (p <span class="keyword">instanceof</span> Pair&lt;String&gt;) &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>原因和前面一样，并不存在 <code>Pair&lt;String&gt;.class</code>，而是只有唯一的 <code>Pair.class</code>。</p><p>局限四：不能实例化 <code>T</code> 类型：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Pair</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> T first;</span><br><span class="line">    <span class="keyword">private</span> T last;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Pair</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// Compile error:</span></span><br><span class="line">        first = <span class="keyword">new</span> T();</span><br><span class="line">        last = <span class="keyword">new</span> T();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上述代码无法通过编译，因为构造方法的两行语句：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">first = <span class="keyword">new</span> T();</span><br><span class="line">last = <span class="keyword">new</span> T();</span><br></pre></td></tr></table></figure><p>擦拭后实际上变成了：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">first = <span class="keyword">new</span> Object();</span><br><span class="line">last = <span class="keyword">new</span> Object();</span><br></pre></td></tr></table></figure><p>这样一来，创建 <code>new Pair&lt;String&gt;()</code> 和创建 <code>new Pair&lt;Integer&gt;()</code> 就全部成了 Object，显然编译器要阻止这种类型不对的代码。</p><p>要实例化 <code>T</code> 类型，我们必须借助额外的 <code>Class&lt;T&gt;</code> 参数：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Pair</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> T first;</span><br><span class="line">    <span class="keyword">private</span> T last;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Pair</span><span class="params">(Class&lt;T&gt; clazz)</span> </span>&#123;</span><br><span class="line">        first = clazz.newInstance();</span><br><span class="line">        last = clazz.newInstance();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上述代码借助 <code>Class&lt;T&gt;</code> 参数并通过反射来实例化T类型，使用的时候，也必须传入 <code>Class&lt;T&gt;</code> 。例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Pair&lt;String&gt; pair = <span class="keyword">new</span> Pair&lt;&gt;(String.class);</span><br></pre></td></tr></table></figure><p>因为传入了 <code>Class&lt;String&gt;</code> 的实例，所以我们借助 <code>String.class</code> 就可以实例化 String 类型。</p><h3 id="不恰当的覆写方法"><a class="header-anchor" href="#不恰当的覆写方法"></a>不恰当的覆写方法</h3><p>有些时候，一个看似正确定义的方法会无法通过编译。例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Pair</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(T t)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span> == t;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这是因为，定义的 <code>equals(T t)</code> 方法实际上会被擦拭成 <code>equals(Object t)</code>，而这个方法是继承自 Object 的，编译器会阻止一个实际上会变成覆写的泛型方法定义。</p><p>换个方法名，避开与 <code>Object.equals(Object)</code> 的冲突就可以成功编译：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Pair</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">same</span><span class="params">(T t)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span> == t;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="泛型继承"><a class="header-anchor" href="#泛型继承"></a>泛型继承</h3><p>一个类可以继承自一个泛型类。例如：父类的类型是 <code>Pair&lt;Integer&gt;</code>，子类的类型是 <code>IntPair</code>，可以这么继承：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IntPair</span> <span class="keyword">extends</span> <span class="title">Pair</span>&lt;<span class="title">Integer</span>&gt; </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用的时候，因为子类 <code>IntPair</code> 并没有泛型类型，所以，正常使用即可。</p><p>前面讲了，我们无法获取 <code>Pair&lt;T&gt;</code> 的 <code>T</code> 类型，即给定一个变量 <code>Pair&lt;Integer&gt; p</code>，无法从 <code>p</code> 中获取到 <code>Integer</code> 类型。</p><p>但是，在父类是泛型类型的情况下，编译器就必须把类型 <code>T</code>（对 <code>IntPair</code> 来说，也就是 <code>Integer</code> 类型）保存到子类的 class 文件中，不然编译器就不知道 <code>IntPair</code> 只能存取 Integer 这种类型。</p><p>在继承了泛型类型的情况下，子类可以获取父类的泛型类型。例如：<code>IntPair</code> 可以获取到父类的泛型类型 Integer。获取父类的泛型类型代码比较复杂：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.lang.reflect.ParameterizedType;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Type;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Class&lt;IntPair&gt; clazz = IntPair.class;</span><br><span class="line">        Type t = clazz.getGenericSuperclass();</span><br><span class="line">        <span class="keyword">if</span> (t <span class="keyword">instanceof</span> ParameterizedType) &#123;</span><br><span class="line">            ParameterizedType pt = (ParameterizedType) t;</span><br><span class="line">            Type[] types = pt.getActualTypeArguments(); <span class="comment">// 可能有多个泛型类型</span></span><br><span class="line">            Type firstType = types[<span class="number">0</span>]; <span class="comment">// 取第一个泛型类型</span></span><br><span class="line">            Class&lt;?&gt; typeClass = (Class&lt;?&gt;) firstType;</span><br><span class="line">            System.out.println(typeClass); <span class="comment">// Integer</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Pair</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> T first;</span><br><span class="line">    <span class="keyword">private</span> T last;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Pair</span><span class="params">(T first, T last)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.first = first;</span><br><span class="line">        <span class="keyword">this</span>.last = last;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> T <span class="title">getFirst</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> first;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> T <span class="title">getLast</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> last;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">IntPair</span> <span class="keyword">extends</span> <span class="title">Pair</span>&lt;<span class="title">Integer</span>&gt; </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">IntPair</span><span class="params">(Integer first, Integer last)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(first, last);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>因为 Java 引入了泛型，所以，只用 Class 来标识类型已经不够了。实际上，Java 的类型系统结构如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">                      ┌────┐</span><br><span class="line">                      │Type│</span><br><span class="line">                      └────┘</span><br><span class="line">                         ▲</span><br><span class="line">                         │</span><br><span class="line">   ┌────────────┬────────┴─────────┬───────────────┐</span><br><span class="line">   │            │                  │               │</span><br><span class="line">┌─────┐┌─────────────────┐┌────────────────┐┌────────────┐</span><br><span class="line">│Class││ParameterizedType││GenericArrayType││WildcardType│</span><br><span class="line">└─────┘└─────────────────┘└────────────────┘└────────────┘</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="extends-通配符"><a class="header-anchor" href="#extends-通配符"></a>extends 通配符</h2><p>我们前面已经讲到了泛型的继承关系：<code>Pair&lt;Integer&gt;</code> 不是 <code>Pair&lt;Number&gt;</code> 的子类。</p><p>假设我们定义了 <code>Pair&lt;T&gt;</code>，然后，我们又针对 <code>Pair&lt;Number&gt;</code> 类型写了一个静态方法，它接收的参数类型是 <code>Pair&lt;Number&gt;</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PairHelper</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">add</span><span class="params">(Pair&lt;Number&gt; p)</span> </span>&#123;</span><br><span class="line">        Number first = p.getFirst();</span><br><span class="line">        Number last = p.getLast();</span><br><span class="line">        <span class="keyword">return</span> first.intValue() + last.intValue();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上述代码是可以正常编译的。使用的时候，我们传入：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> sum = PairHelper.add(<span class="keyword">new</span> Pair&lt;Number&gt;(<span class="number">1</span>, <span class="number">2</span>));</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">泛型是一种“代码模板”，可以用一套代码套用各种类型。</summary>
    
    
    
    <category term="Java" scheme="https://halo123.top/categories/Java/"/>
    
    
    <category term="Java" scheme="https://halo123.top/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Java 反射</title>
    <link href="https://halo123.top/2021/05/20/Java/Java-E-%E5%8F%8D%E5%B0%84/"/>
    <id>https://halo123.top/2021/05/20/Java/Java-E-%E5%8F%8D%E5%B0%84/</id>
    <published>2021-05-20T09:42:40.000Z</published>
    <updated>2021-05-28T04:23:36.206Z</updated>
    
    <content type="html"><![CDATA[<p>反射（Reflection），Java 的反射是指程序在运行期可以拿到一个对象的所有信息。</p><p>正常情况下，如果我们要调用一个对象的方法，或者访问一个对象的字段，通常会传入对象实例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Main.java</span></span><br><span class="line"><span class="keyword">import</span> com.halo.test.Person;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function">String <span class="title">getFullName</span><span class="params">(Person p)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> p.getFirstName() + <span class="string">&quot; &quot;</span> + p.getLastName();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但是，如果不能获得 <code>Person</code> 类，只有一个 <code>Object</code> 实例，比如这样：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">String <span class="title">getFullName</span><span class="params">(Object obj)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="comment">// ???</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>怎么办？强制转型？</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">String <span class="title">getFullName</span><span class="params">(Object obj)</span> </span>&#123;</span><br><span class="line">    Person p = (Person) obj;</span><br><span class="line">    <span class="keyword">return</span> p.getFirstName() + <span class="string">&quot; &quot;</span> + p.getLastName();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>强制转型的时候，你会发现一个问题：编译上面的代码，仍然需要引用 <code>Person</code> 类。不然，去掉import语句，不能编译通过</p><p>而反射是为了解决在运行期，对某个实例一无所知的情况下，如何调用其方法。</p><h2 id="Class-类"><a class="header-anchor" href="#Class-类"></a>Class 类</h2><p>除了 int 等基本类型外，Java 的其他类型全部都是 class（包括 interface ）。</p><p>仔细思考，我们可以得出结论：class（包括 interface ）的本质是数据类型（Type）。无继承关系的数据类型无法赋值：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Number n = <span class="keyword">new</span> Double(<span class="number">123.456</span>); <span class="comment">// OK</span></span><br><span class="line">String s = <span class="keyword">new</span> Double(<span class="number">123.456</span>); <span class="comment">// compile error!</span></span><br></pre></td></tr></table></figure><p>而 class 是由 JVM 在执行过程中动态加载的。JVM 在第一次读取到一种 class 类型时，将其加载进内存。</p><p>每加载一种 class，JVM 就为其创建一个 <code>Class</code> 类型的实例，并关联起来。注意：这里的 <code>Class</code> 类型是一个名叫 Class 的 class。它长这样：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">Class</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Class</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以 String 类为例，当 JVM 加载 String 类时，它首先读取 <code>String.class</code> 文件到内存，然后，为 String 类创建一个 <code>Class</code> 实例并关联起来：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Class cls = <span class="keyword">new</span> Class(String);</span><br></pre></td></tr></table></figure><p>这个 <code>Class</code> 实例是 JVM 内部创建的，如果我们查看 JDK 源码，可以发现 <code>Class</code> 类的构造方法是 private，只有 JVM 能创建 <code>Class</code> 实例，我们自己的 Java 程序是无法创建 Class 实例的。</p><p>所以， JVM 持有的每个 <code>Class</code> 实例都指向一个数据类型（class或interface）：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">┌───────────────────────────┐</span><br><span class="line">│      Class Instance       │──────&gt; String</span><br><span class="line">├───────────────────────────┤</span><br><span class="line">│name &#x3D; &quot;java.lang.String&quot;  │</span><br><span class="line">└───────────────────────────┘</span><br><span class="line">┌───────────────────────────┐</span><br><span class="line">│      Class Instance       │──────&gt; Random</span><br><span class="line">├───────────────────────────┤</span><br><span class="line">│name &#x3D; &quot;java.util.Random&quot;  │</span><br><span class="line">└───────────────────────────┘</span><br><span class="line">┌───────────────────────────┐</span><br><span class="line">│      Class Instance       │──────&gt; Runnable</span><br><span class="line">├───────────────────────────┤</span><br><span class="line">│name &#x3D; &quot;java.lang.Runnable&quot;│</span><br><span class="line">└───────────────────────────┘</span><br></pre></td></tr></table></figure><p>一个 <code>Class</code> 实例包含了该 class 的所有完整信息：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">┌───────────────────────────┐</span><br><span class="line">│      Class Instance       │──────&gt; String</span><br><span class="line">├───────────────────────────┤</span><br><span class="line">│name &#x3D; &quot;java.lang.String&quot;  │</span><br><span class="line">├───────────────────────────┤</span><br><span class="line">│package &#x3D; &quot;java.lang&quot;      │</span><br><span class="line">├───────────────────────────┤</span><br><span class="line">│super &#x3D; &quot;java.lang.Object&quot; │</span><br><span class="line">├───────────────────────────┤</span><br><span class="line">│interface &#x3D; CharSequence...│</span><br><span class="line">├───────────────────────────┤</span><br><span class="line">│field &#x3D; value[],hash,...   │</span><br><span class="line">├───────────────────────────┤</span><br><span class="line">│method &#x3D; indexOf()...      │</span><br><span class="line">└───────────────────────────┘</span><br></pre></td></tr></table></figure><p>由于 JVM 为每个加载的 class 创建了对应的 <code>Class</code> 实例，并在实例中保存了该 class 的所有信息，包括类名、包名、父类、实现的接口、所有方法、字段等，因此，如果获取了某个 <code>Class</code> 实例，我们就可以通过这个 <code>Class</code> 实例获取到该实例对应的 class 的所有信息。</p><p>这种通过 <code>Class</code> 实例获取 class 信息的方法称为反射（Reflection）。</p><p>如何获取一个 class 的 <code>Class</code> 实例？有三个方法：</p><p>方法一：直接通过一个 class 的静态变量 class 获取：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Class cls = String.class;</span><br></pre></td></tr></table></figure><p>方法二：如果我们有一个实例变量，可以通过该实例变量提供的 <code>getClass()</code> 方法获取：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">String s = <span class="string">&quot;Hello&quot;</span>;</span><br><span class="line">Class cls = s.getClass();</span><br></pre></td></tr></table></figure><p>方法三：如果知道一个 class 的完整类名，可以通过静态方法 <code>Class.forName()</code> 获取：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Class cls = Class.forName(<span class="string">&quot;java.lang.String&quot;</span>);</span><br></pre></td></tr></table></figure><p>因为 <code>Class</code> 实例在 JVM 中是唯一的，所以，上述方法获取的 <code>Class</code> 实例是同一个实例。可以用 <code>==</code> 比较两个 <code>Class</code> 实例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Class cls1 = String.class;</span><br><span class="line"></span><br><span class="line">String s = <span class="string">&quot;Hello&quot;</span>;</span><br><span class="line">Class cls2 = s.getClass();</span><br><span class="line"></span><br><span class="line"><span class="keyword">boolean</span> sameClass = cls1 == cls2; <span class="comment">// true</span></span><br></pre></td></tr></table></figure><p>注意一下 <code>Class</code> 实例比较和 <code>instanceof</code> 的差别：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Integer n = <span class="keyword">new</span> Integer(<span class="number">123</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">boolean</span> b1 = n <span class="keyword">instanceof</span> Integer; <span class="comment">// true，因为n是Integer类型</span></span><br><span class="line"><span class="keyword">boolean</span> b2 = n <span class="keyword">instanceof</span> Number; <span class="comment">// true，因为n是Number类型的子类</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">boolean</span> b3 = n.getClass() == Integer.class; <span class="comment">// true，因为n.getClass()返回Integer.class</span></span><br><span class="line"><span class="keyword">boolean</span> b4 = n.getClass() == Number.class; <span class="comment">// false，因为Integer.class!=Number.class</span></span><br></pre></td></tr></table></figure><p>用 <code>instanceof</code> 不但匹配指定类型，还匹配指定类型的子类。而用 <code>==</code> 判断 class 实例可以精确地判断数据类型，但不能作子类型比较。</p><p>通常情况下，我们应该用 <code>instanceof</code> 判断数据类型，因为面向抽象编程的时候，我们不关心具体的子类型。只有在需要精确判断一个类型是不是某个 class 的时候，我们才使用 <code>==</code> 判断 class 实例。</p><p>因为反射的目的是为了获得某个实例的信息。因此，当我们拿到某个 <code>Object</code> 实例时，我们可以通过反射获取该 <code>Object</code> 的 class 信息：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printObjectInfo</span><span class="params">(Object obj)</span> </span>&#123;</span><br><span class="line">    Class cls = obj.getClass();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>要从 <code>Class</code> 实例获取获取的基本信息，参考下面的代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        printClassInfo(<span class="string">&quot;&quot;</span>.getClass());</span><br><span class="line">        printClassInfo(Runnable.class);</span><br><span class="line">        printClassInfo(java.time.Month.class);</span><br><span class="line">        printClassInfo(String[].class);</span><br><span class="line">        printClassInfo(<span class="keyword">int</span>.class);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">printClassInfo</span><span class="params">(Class cls)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Class name: &quot;</span> + cls.getName());</span><br><span class="line">        System.out.println(<span class="string">&quot;Simple name: &quot;</span> + cls.getSimpleName());</span><br><span class="line">        <span class="keyword">if</span> (cls.getPackage() != <span class="keyword">null</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;Package name: &quot;</span> + cls.getPackage().getName());</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;is interface: &quot;</span> + cls.isInterface());</span><br><span class="line">        System.out.println(<span class="string">&quot;is enum: &quot;</span> + cls.isEnum());</span><br><span class="line">        System.out.println(<span class="string">&quot;is array: &quot;</span> + cls.isArray());</span><br><span class="line">        System.out.println(<span class="string">&quot;is primitive: &quot;</span> + cls.isPrimitive());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意到数组（例如 <code>String[]</code>）也是一种 <code>Class</code>，而且不同于 <code>String.class</code>，它的类名是 <code>[Ljava.lang.String</code>。此外，JVM 为每一种基本类型如 <code>int</code> 也创建了 <code>Class</code>，通过 <code>int.class</code> 访问。</p><p>如果获取到了一个 <code>Class</code> 实例，我们就可以通过该 <code>Class</code> 实例来创建对应类型的实例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取String的Class实例:</span></span><br><span class="line">Class cls = String.class;</span><br><span class="line"><span class="comment">// 创建一个String实例:</span></span><br><span class="line">String s = (String) cls.newInstance();</span><br></pre></td></tr></table></figure><p>上述代码相当于 <code>new String()</code>。通过 <code>Class.newInstance()</code> 可以创建类实例，它的局限是：只能调用 public 的无参数构造方法。带参数的构造方法，或者非 public 的构造方法都无法通过 <code>Class.newInstance()</code> 被调用。</p><h2 id="动态加载"><a class="header-anchor" href="#动态加载"></a>动态加载</h2><p>JVM 在执行 Java 程序的时候，并不是一次性把所有用到的 class 全部加载到内存，而是第一次需要用到 class 时才加载。例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Main.java</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (args.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            create(args[<span class="number">0</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">create</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        Person p = <span class="keyword">new</span> Person(name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当执行 Main.java 时，由于用到了 <code>Main</code>，因此，JVM 首先会把 Main.class 加载到内存。然而，并不会加载 Person.class，除非程序执行到 <code>create()</code> 方法，JVM 发现需要加载 <code>Person</code> 类时，才会首次加载 <code>Person.class</code>。如果没有执行 <code>create()</code> 方法，那么 Person.class根本就不会被加载。</p><p>这就是 JVM 动态加载 class 的特性。</p><p>动态加载 class 的特性对于 Java 程序非常重要。利用 JVM 动态加载 class 的特性，我们才能在运行期根据条件加载不同的实现类。例如，Commons Logging 总是优先使用 Log4j，只有当 Log4j 不存在时，才使用 JDK 的 logging。利用 JVM 动态加载特性，大致的实现代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Commons Logging优先使用Log4j:</span></span><br><span class="line">LogFactory factory = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">if</span> (isClassPresent(<span class="string">&quot;org.apache.logging.log4j.Logger&quot;</span>)) &#123;</span><br><span class="line">    factory = createLog4j();</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    factory = createJdkLog();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">isClassPresent</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        Class.forName(name);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>就是为什么我们只需要把 Log4j 的 jar 包放到 classpath 中，Commons Logging 就会自动使用 Log4j 的原因。</p><h2 id="访问字段"><a class="header-anchor" href="#访问字段"></a>访问字段</h2><p>对任意的一个 Object 实例，只要我们获取了它的 <code>Class</code>，就可以获取它的一切信息。</p><p>我们先看看如何通过 <code>Class</code> 实例获取字段信息。<code>Class</code> 类提供了以下几个方法来获取字段：</p><ul><li><code>Field getField(name)</code>：根据字段名获取某个 public 的 field（包括父类）</li><li><code>Field getDeclaredField(name)</code>：根据字段名获取当前类的某个 field（不包括父类）</li><li><code>Field[] getFields()</code>：获取所有 public 的 field（包括父类）</li><li><code>Field[] getDeclaredFields()</code>：获取当前类的所有 field（不包括父类）</li></ul><p>我们来看一下示例代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Class stdClass = Student.class;</span><br><span class="line">        <span class="comment">// 获取public字段&quot;score&quot;:</span></span><br><span class="line">        System.out.println(stdClass.getField(<span class="string">&quot;score&quot;</span>));</span><br><span class="line">        <span class="comment">// 获取继承的public字段&quot;name&quot;:</span></span><br><span class="line">        System.out.println(stdClass.getField(<span class="string">&quot;name&quot;</span>));</span><br><span class="line">        <span class="comment">// 获取private字段&quot;grade&quot;:</span></span><br><span class="line">        System.out.println(stdClass.getDeclaredField(<span class="string">&quot;grade&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span> <span class="keyword">extends</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> score;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> grade;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> String name;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上述代码首先获取 <code>Student</code> 的 <code>Class</code> 实例，然后，分别获取 <code>public</code> 字段、继承的 <code>public</code> 字段以及 <code>private</code> 字段，打印出的 Field ：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">public int Student.score</span><br><span class="line">public java.lang.String Person.name</span><br><span class="line">private int Student.grade</span><br></pre></td></tr></table></figure><p>一个 Field 对象包含了一个字段的所有信息：</p><ul><li><code>getName()</code>：返回字段名称，例如，<code>name</code>；</li><li><code>getType()</code>：返回字段类型，也是一个 <code>Class</code> 实例，例如，<code>String.class</code>；</li><li><code>getModifiers()</code>：返回字段的修饰符，它是一个 int，不同的 bit 表示不同的含义。</li></ul><p>以 String 类的 <code>value</code> 字段为例，它的定义是：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">String</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">byte</span>[] value;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们用反射获取该字段的信息，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Field f = String.class.getDeclaredField(<span class="string">&quot;value&quot;</span>);</span><br><span class="line">f.getName(); <span class="comment">// &quot;value&quot;</span></span><br><span class="line">f.getType(); <span class="comment">// class [B 表示byte[]类型</span></span><br><span class="line"><span class="keyword">int</span> m = f.getModifiers();</span><br><span class="line">Modifier.isFinal(m); <span class="comment">// true</span></span><br><span class="line">Modifier.isPublic(m); <span class="comment">// false</span></span><br><span class="line">Modifier.isProtected(m); <span class="comment">// false</span></span><br><span class="line">Modifier.isPrivate(m); <span class="comment">// true</span></span><br><span class="line">Modifier.isStatic(m); <span class="comment">// false</span></span><br></pre></td></tr></table></figure><p>利用反射拿到字段的一个 Field 实例只是第一步，我们还可以拿到一个实例对应的该字段的值。</p><p>例如，对于一个 <code>Person</code> 实例，我们可以先拿到 <code>name</code> 字段对应的 Field，再获取这个实例的 <code>name</code> 字段的值：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Object p = <span class="keyword">new</span> Person(<span class="string">&quot;Xiao Ming&quot;</span>);</span><br><span class="line">        Class c = p.getClass();</span><br><span class="line">        Field f = c.getDeclaredField(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">        Object value = f.get(p);</span><br><span class="line">        System.out.println(value); <span class="comment">// &quot;Xiao Ming&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上述代码先获取 <code>Class</code> 实例，再获取 Field 实例，然后，用 <code>Field.get(Object)</code> 获取指定实例的指定字段的值。</p><p>运行代码，如果不出意外，会得到一个 <code>IllegalAccessException</code>，这是因为 <code>name</code> 被定义为一个 private 字段，正常情况下，<code>Main</code> 类无法访问 <code>Person</code> 类的 private 字段。要修复错误，可以将 private 改为 public，或者，在调用<code>Object value = f.get(p);</code> 前，先写一句：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">f.setAccessible(<span class="keyword">true</span>);</span><br></pre></td></tr></table></figure><p>调用 <code>Field.setAccessible(true)</code> 的意思是，别管这个字段是不是 public，一律允许访问。再运行代码，就可以打印出 private 字段的值。</p><p>如果使用反射可以获取 private 字段的值，那么类的封装还有什么意义？</p><p>答案是正常情况下，我们总是通过 <code>p.name</code> 来访问 Person 的 name 字段，编译器会根据 public、protected 和 private 决定是否允许访问字段，这样就达到了数据封装的目的。</p><p>而反射是一种非常规的用法，使用反射，首先代码非常繁琐，其次，它更多地是给工具或者底层框架来使用，目的是在不知道目标实例任何信息的情况下，获取特定字段的值。</p><p>此外，<code>setAccessible(true)</code> 可能会失败。如果 JVM 运行期存在 SecurityManager，那么它会根据规则进行检查，有可能阻止 <code>setAccessible(true)</code> 。例如，某个 SecurityManager 可能不允许对 java 和 javax 开头的 package 的类调用 <code>setAccessible(true)</code>，这样可以保证 JVM 核心库的安全。</p><h2 id="设置字段值"><a class="header-anchor" href="#设置字段值"></a>设置字段值</h2><p>通过 Field 实例既然可以获取到指定实例的字段值，自然也可以设置字段的值。</p><p>设置字段值是通过 <code>Field.set(Object, Object)</code> 实现的，其中第一个 <code>Object</code> 参数是指定的实例，第二个 <code>Object</code> 参数是待修改的值。示例代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Person p = <span class="keyword">new</span> Person(<span class="string">&quot;Xiao Ming&quot;</span>);</span><br><span class="line">        System.out.println(p.getName()); <span class="comment">// &quot;Xiao Ming&quot;</span></span><br><span class="line">        Class c = p.getClass();</span><br><span class="line">        Field f = c.getDeclaredField(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">        f.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">        f.set(p, <span class="string">&quot;Xiao Hong&quot;</span>);</span><br><span class="line">        System.out.println(p.getName()); <span class="comment">// &quot;Xiao Hong&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行上述代码，打印的 <code>name</code> 字段从 <code>Xiao Ming</code> 变成了 <code>Xiao Hong</code>，说明通过反射可以直接修改字段的值。</p><p>同样的，修改非 public 字段，需要首先调用 <code>setAccessible(true)</code>。</p><h2 id="调用方法"><a class="header-anchor" href="#调用方法"></a>调用方法</h2><p>我们已经能通过 Class 实例获取所有 Field 对象，同样的，可以通过 Class 实例获取所有 Method 信息。Class 类提供了以下几个方法来获取 Method：</p><ul><li><code>Method getMethod(name, Class...)</code>：获取某个 public 的 Method（包括父类）</li><li><code>Method getDeclaredMethod(name, Class...)</code>：获取当前类的某个 Method（不包括父类）</li><li><code>Method[] getMethods()</code>：获取所有 public 的 Method（包括父类）</li><li><code>Method[] getDeclaredMethods()</code>：获取当前类的所有 Method（不包括父类）</li></ul><p>我们来看一下示例代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Class stdClass = Student.class;</span><br><span class="line">        <span class="comment">// 获取public方法getScore，参数为String:</span></span><br><span class="line">        System.out.println(stdClass.getMethod(<span class="string">&quot;getScore&quot;</span>, String.class));</span><br><span class="line">        <span class="comment">// 获取继承的public方法getName，无参数:</span></span><br><span class="line">        System.out.println(stdClass.getMethod(<span class="string">&quot;getName&quot;</span>));</span><br><span class="line">        <span class="comment">// 获取private方法getGrade，参数为int:</span></span><br><span class="line">        System.out.println(stdClass.getDeclaredMethod(<span class="string">&quot;getGrade&quot;</span>, <span class="keyword">int</span>.class));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span> <span class="keyword">extends</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getScore</span><span class="params">(String type)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">99</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">getGrade</span><span class="params">(<span class="keyword">int</span> year)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Person&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上述代码首先获取 Student 的 Class 实例，然后，分别获取 public 方法、继承的 public 方法以及 private 方法，打印出的 Method 类似：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">int</span> Student.getScore(java.lang.String)</span><br><span class="line"><span class="keyword">public</span> java.lang.String Person.getName()</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> Student.getGrade(<span class="keyword">int</span>)</span><br></pre></td></tr></table></figure><p>一个 <code>Method</code> 对象包含一个方法的所有信息：</p><ul><li><code>getName()</code>：返回方法名称，例如：“getScore”；</li><li><code>getReturnType()</code>：返回方法返回值类型，也是一个 Class 实例，例如：<code>String.class</code>；</li><li><code>getParameterTypes()</code>：返回方法的参数类型，是一个 Class 数组，例如：<code>&#123;String.class, int.class&#125;</code>；</li><li><code>getModifiers()</code>：返回方法的修饰符，它是一个 int，不同的 bit 表示不同的含义。</li></ul><p>当我们获取到一个 Method 对象时，就可以对它进行调用。我们以下面的代码为例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">String s = <span class="string">&quot;Hello world&quot;</span>;</span><br><span class="line">String r = s.substring(<span class="number">6</span>); <span class="comment">// &quot;world&quot;</span></span><br></pre></td></tr></table></figure><p>如果用反射来调用 <code>substring</code> 方法，需要以下代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">// String对象:</span></span><br><span class="line">        String s = <span class="string">&quot;Hello world&quot;</span>;</span><br><span class="line">        <span class="comment">// 获取String substring(int)方法，参数为int:</span></span><br><span class="line">        Method m = String.class.getMethod(<span class="string">&quot;substring&quot;</span>, <span class="keyword">int</span>.class);</span><br><span class="line">        <span class="comment">// 在s对象上调用该方法并获取结果:</span></span><br><span class="line">        String r = (String) m.invoke(s, <span class="number">6</span>);</span><br><span class="line">        <span class="comment">// 打印调用结果:</span></span><br><span class="line">        System.out.println(r);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对 Method 实例调用 <code>invoke</code> 就相当于调用该方法，<code>invoke</code> 的第一个参数是对象实例，即在哪个实例上调用该方法，后面的可变参数要与方法参数一致，否则将报错。</p><h3 id="调用静态方法"><a class="header-anchor" href="#调用静态方法"></a>调用静态方法</h3><p>如果获取到的 Method 表示一个静态方法，调用静态方法时，由于无需指定实例对象，所以 <code>invoke</code> 方法传入的第一个参数永远为 null。我们以 <code>Integer.parseInt(String)</code> 为例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">// 获取Integer.parseInt(String)方法，参数为String:</span></span><br><span class="line">        Method m = Integer.class.getMethod(<span class="string">&quot;parseInt&quot;</span>, String.class);</span><br><span class="line">        <span class="comment">// 调用该静态方法并获取结果:</span></span><br><span class="line">        Integer n = (Integer) m.invoke(<span class="keyword">null</span>, <span class="string">&quot;12345&quot;</span>);</span><br><span class="line">        <span class="comment">// 打印调用结果:</span></span><br><span class="line">        System.out.println(n);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="调用非-public-方法"><a class="header-anchor" href="#调用非-public-方法"></a>调用非 public 方法</h3><p>和 Field 类似，对于非 public 方法，我们虽然可以通过 <code>Class.getDeclaredMethod()</code> 获取该方法实例，但直接对其调用将得到一个 <code>IllegalAccessException</code> 。为了调用非 public 方法，我们通过 <code>Method.setAccessible(true)</code> 允许其调用：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Person p = <span class="keyword">new</span> Person();</span><br><span class="line">        Method m = p.getClass().getDeclaredMethod(<span class="string">&quot;setName&quot;</span>, String.class);</span><br><span class="line">        m.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">        m.invoke(p, <span class="string">&quot;Bob&quot;</span>);</span><br><span class="line">        System.out.println(p.name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    String name;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="多态"><a class="header-anchor" href="#多态"></a>多态</h3><p>我们来考察这样一种情况：一个 <code>Person</code> 类定义了 <code>hello()</code> 方法，并且它的子类 <code>Student</code> 也覆写了 <code>hello()</code> 方法，那么，从 <code>Person.class</code> 获取的 Method，作用于 <code>Student</code> 实例时，调用的方法到底是哪个？</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">// 获取Person的hello方法:</span></span><br><span class="line">        Method h = Person.class.getMethod(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">        <span class="comment">// 对Student实例调用hello方法:</span></span><br><span class="line">        h.invoke(<span class="keyword">new</span> Student());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">hello</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Person:hello&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span> <span class="keyword">extends</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">hello</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Student:hello&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行上述代码，发现打印出的是 <code>Student:hello</code>，因此，使用反射调用方法时，仍然遵循多态原则：即总是调用实际类型的覆写方法（如果存在）。上述的反射代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Method m = Person.class.getMethod(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">m.invoke(<span class="keyword">new</span> Student());</span><br></pre></td></tr></table></figure><p>实际上相当于：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Person p = <span class="keyword">new</span> Student();</span><br><span class="line">p.hello();</span><br></pre></td></tr></table></figure><h2 id="调用构造方法"><a class="header-anchor" href="#调用构造方法"></a>调用构造方法</h2><p>我们通常使用new操作符创建新的实例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Person p = <span class="keyword">new</span> Person();</span><br></pre></td></tr></table></figure><p>如果通过反射来创建新的实例，可以调用 Class 提供的 <code>newInstance()</code> 方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Person p = Person.class.newInstance();</span><br></pre></td></tr></table></figure><p>调用 <code>Class.newInstance()</code> 的局限是，它只能调用该类的 public 无参数构造方法。如果构造方法带有参数，或者不是 public，就无法直接通过 <code>Class.newInstance()</code> 来调用。</p><p>为了调用任意的构造方法，Java 的反射 API 提供了 <code>Constructor</code> 对象，它包含一个构造方法的所有信息，可以创建一个实例。<code>Constructor</code> 对象和 Method 非常类似，不同之处仅在于它是一个构造方法，并且，调用结果总是返回实例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">// 获取构造方法Integer(int):</span></span><br><span class="line">        Constructor cons1 = Integer.class.getConstructor(<span class="keyword">int</span>.class);</span><br><span class="line">        <span class="comment">// 调用构造方法:</span></span><br><span class="line">        Integer n1 = (Integer) cons1.newInstance(<span class="number">123</span>);</span><br><span class="line">        System.out.println(n1);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取构造方法Integer(String)</span></span><br><span class="line">        Constructor cons2 = Integer.class.getConstructor(String.class);</span><br><span class="line">        Integer n2 = (Integer) cons2.newInstance(<span class="string">&quot;456&quot;</span>);</span><br><span class="line">        System.out.println(n2);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过 Class 实例获取 Constructor 的方法如下：</p><ul><li><code>getConstructor(Class...)</code>：获取某个 public 的 <code>Constructor</code>；</li><li><code>getDeclaredConstructor(Class...)</code>：获取某个 Constructor`；</li><li><code>getConstructors()</code>：获取所有 public 的 <code>Constructor</code>；</li><li><code>getDeclaredConstructors()</code>：获取所有 <code>Constructor</code>。</li></ul><p>注意 <code>Constructor</code> 总是当前类定义的构造方法，和父类无关，因此不存在多态的问题。</p><p>调用非 public 的 <code>Constructor</code> 时，必须首先通过 <code>setAccessible(true)</code> 设置允许访问。<code>setAccessible(true)</code> 可能会失败。</p><h2 id="获取继承关系"><a class="header-anchor" href="#获取继承关系"></a>获取继承关系</h2><p>当我们获取到某个 Class 对象时，实际上就获取到了一个类的类型：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Class cls = String.class; <span class="comment">// 获取到String的Class</span></span><br></pre></td></tr></table></figure><p>还可以用实例的 <code>getClass()</code> 方法获取：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">String s = <span class="string">&quot;&quot;</span>;</span><br><span class="line">Class cls = s.getClass(); <span class="comment">// s是String，因此获取到String的Class</span></span><br></pre></td></tr></table></figure><p>最后一种获取 Class 的方法是通过 <code>Class.forName(&quot;&quot;)</code>，传入 Class 的完整类名获取：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Class s = Class.forName(<span class="string">&quot;java.lang.String&quot;</span>);</span><br></pre></td></tr></table></figure><p>这三种方式获取的 Class 实例都是同一个实例，因为 JVM 对每个加载的 Class 只创建一个 Class 实例来表示它的类型。</p><h3 id="获取父类的-Class"><a class="header-anchor" href="#获取父类的-Class"></a>获取父类的 Class</h3><p>有了 Class 实例，我们还可以获取它的父类的 Class：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Class i = Integer.class;</span><br><span class="line">        Class n = i.getSuperclass();</span><br><span class="line">        System.out.println(n);</span><br><span class="line">        Class o = n.getSuperclass();</span><br><span class="line">        System.out.println(o);</span><br><span class="line">        System.out.println(o.getSuperclass());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行上述代码，可以看到，Integer 的父类类型是 Number，Number 的父类是 Object，Object 的父类是 null。除 Object 外，其他任何非 interface 的 Class都必定存在一个父类类型。</p><h3 id="获取-interface"><a class="header-anchor" href="#获取-interface"></a>获取 interface</h3><p>由于一个类可能实现一个或多个接口，通过 Class 我们就可以查询到实现的接口类型。例如，查询 Integer 实现的接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Class s = Integer.class;</span><br><span class="line">        Class[] is = s.getInterfaces();</span><br><span class="line">        <span class="keyword">for</span> (Class i : is) &#123;</span><br><span class="line">            System.out.println(i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行上述代码可知，Integer 实现的接口有：</p><ul><li><code>java.lang.Comparable</code></li><li><code>java.lang.constant.Constable</code></li><li><code>java.lang.constant.ConstantDesc</code></li></ul><p>要特别注意：<code>getInterfaces()</code> 只返回当前类直接实现的接口类型，并不包括其父类实现的接口类型：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Class s = Integer.class.getSuperclass();</span><br><span class="line">        Class[] is = s.getInterfaces();</span><br><span class="line">        <span class="keyword">for</span> (Class i : is) &#123;</span><br><span class="line">            System.out.println(i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Integer 的父类是 Number，Number 实现的接口是 <code>java.io.Serializable</code>。</p><p>此外，对所有 interface 的 Class 调用 <code>getSuperclass()</code> 返回的是 null，获取接口的父接口要用 <code>getInterfaces()</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">System.out.println(java.io.DataInputStream.class.getSuperclass()); </span><br><span class="line"><span class="comment">// java.io.FilterInputStream，因为DataInputStream继承自FilterInputStream</span></span><br><span class="line">System.out.println(java.io.Closeable.class.getSuperclass()); </span><br><span class="line"><span class="comment">// null，对接口调用getSuperclass()总是返回null，获取接口的父接口要用getInterfaces()</span></span><br></pre></td></tr></table></figure><p>如果一个类没有实现任何 interface，那么 <code>getInterfaces()</code> 返回空数组。</p><h3 id="继承关系"><a class="header-anchor" href="#继承关系"></a>继承关系</h3><p>当我们判断一个实例是否是某个类型时，正常情况下，使用 <code>instanceof</code> 操作符：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Object n = Integer.valueOf(<span class="number">123</span>);</span><br><span class="line"><span class="keyword">boolean</span> isDouble = n <span class="keyword">instanceof</span> Double; <span class="comment">// false</span></span><br><span class="line"><span class="keyword">boolean</span> isInteger = n <span class="keyword">instanceof</span> Integer; <span class="comment">// true</span></span><br><span class="line"><span class="keyword">boolean</span> isNumber = n <span class="keyword">instanceof</span> Number; <span class="comment">// true</span></span><br><span class="line"><span class="keyword">boolean</span> isSerializable = n <span class="keyword">instanceof</span> java.io.Serializable; <span class="comment">// true</span></span><br></pre></td></tr></table></figure><p>如果是两个 Class 实例，要判断一个向上转型是否成立，可以调用 <code>isAssignableFrom()</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Integer i = ?</span></span><br><span class="line">Integer.class.isAssignableFrom(Integer.class); <span class="comment">// true，因为Integer可以赋值给Integer</span></span><br><span class="line"><span class="comment">// Number n = ?</span></span><br><span class="line">Number.class.isAssignableFrom(Integer.class); <span class="comment">// true，因为Integer可以赋值给Number</span></span><br><span class="line"><span class="comment">// Object o = ?</span></span><br><span class="line">Object.class.isAssignableFrom(Integer.class); <span class="comment">// true，因为Integer可以赋值给Object</span></span><br><span class="line"><span class="comment">// Integer i = ?</span></span><br><span class="line">Integer.class.isAssignableFrom(Number.class); <span class="comment">// false，因为Number不能赋值给Integer</span></span><br></pre></td></tr></table></figure><h3 id="动态代理"><a class="header-anchor" href="#动态代理"></a>动态代理</h3><p>我们来比较 Java 的 class 和 interface 的区别：</p><ul><li>可以实例化 class（非abstract）；</li><li>不能实例化 interface。</li></ul><p>所有 interface 类型的变量总是通过向上转型并指向某个实例的：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CharSequence cs = <span class="keyword">new</span> StringBuilder();</span><br></pre></td></tr></table></figure><p>有没有可能不编写实现类，直接在运行期创建某个 interface 的实例呢？</p><p>这是可能的，因为 Java 标准库提供了一种动态代理（Dynamic Proxy）的机制：可以在运行期动态创建某个 interface 的实例。</p><p>什么叫运行期动态创建？听起来好像很复杂。所谓动态代理，是和静态相对应的。我们来看静态代码怎么写：</p><p>定义接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Hello</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">morning</span><span class="params">(String name)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编写实现类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorld</span> <span class="keyword">implements</span> <span class="title">Hello</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">morning</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Good morning, &quot;</span> + name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>创建实例，转型为接口并调用：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Hello hello = <span class="keyword">new</span> HelloWorld();</span><br><span class="line">hello.morning(<span class="string">&quot;Bob&quot;</span>);</span><br></pre></td></tr></table></figure><p>这种方式就是我们通常编写代码的方式。</p><p>还有一种方式是动态代码，我们仍然先定义了接口 <code>Hello</code>，但是我们并不去编写实现类，而是直接通过 JDK 提供的一个 <code>Proxy.newProxyInstance()</code> 创建了一个 <code>Hello</code> 接口对象。这种没有实现类但是在运行期动态创建了一个接口对象的方式，我们称为动态代码。JDK 提供的动态创建接口对象的方式，就叫动态代理。</p><p>一个最简单的动态代理实现如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        InvocationHandler handler = <span class="keyword">new</span> InvocationHandler() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">                System.out.println(method);</span><br><span class="line">                <span class="keyword">if</span> (method.getName().equals(<span class="string">&quot;morning&quot;</span>)) &#123;</span><br><span class="line">                    System.out.println(<span class="string">&quot;Good morning, &quot;</span> + args[<span class="number">0</span>]);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        Hello hello = (Hello) Proxy.newProxyInstance(</span><br><span class="line">            Hello.class.getClassLoader(), <span class="comment">// 传入ClassLoader</span></span><br><span class="line">            <span class="keyword">new</span> Class[] &#123; Hello.class &#125;, <span class="comment">// 传入要实现的接口</span></span><br><span class="line">            handler); <span class="comment">// 传入处理调用方法的InvocationHandler</span></span><br><span class="line">        hello.morning(<span class="string">&quot;Bob&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Hello</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">morning</span><span class="params">(String name)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在运行期动态创建一个 interface 实例的方法如下：</p><ul><li>定义一个 <code>InvocationHandler</code> 实例，它负责实现接口的方法调用；</li><li>通过 <code>Proxy.newProxyInstance()</code> 创建 interface 实例，它需要3个参数：<ol><li>使用的 <code>ClassLoader</code>，通常就是接口类的 <code>ClassLoader</code>；</li><li>需要实现的接口数组，至少需要传入一个接口进去；</li><li>用来处理接口方法调用的 <code>InvocationHandler</code> 实例。</li></ol></li><li>将返回的 Object 强制转型为接口。</li></ul><p>动态代理实际上是 JVM 在运行期动态创建 class 字节码并加载的过程，它并没有什么黑魔法，把上面的动态代理改写为静态实现类大概长这样：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloDynamicProxy</span> <span class="keyword">implements</span> <span class="title">Hello</span> </span>&#123;</span><br><span class="line">    InvocationHandler handler;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">HelloDynamicProxy</span><span class="params">(InvocationHandler handler)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.handler = handler;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">morning</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        handler.invoke(</span><br><span class="line">           <span class="keyword">this</span>,</span><br><span class="line">           Hello.class.getMethod(<span class="string">&quot;morning&quot;</span>, String.class),</span><br><span class="line">           <span class="keyword">new</span> Object[] &#123; name &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其实就是 JVM 帮我们自动编写了一个上述类（不需要源码，可以直接生成字节码），并不存在可以直接实例化接口的黑魔法。</p>]]></content>
    
    
    <summary type="html">Java 反射</summary>
    
    
    
    <category term="Java" scheme="https://halo123.top/categories/Java/"/>
    
    
    <category term="Java" scheme="https://halo123.top/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Java 异常处理</title>
    <link href="https://halo123.top/2021/05/20/Java/Java-D-%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/"/>
    <id>https://halo123.top/2021/05/20/Java/Java-D-%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/</id>
    <published>2021-05-20T09:33:40.000Z</published>
    <updated>2021-05-28T04:23:29.107Z</updated>
    
    <content type="html"><![CDATA[<p>参考资料：</p><div class="tag link"><a class="link-card" title="廖雪峰Java教程" href="https://www.liaoxuefeng.com/wiki/1252599548343744/1255943543190176"><div class="left"><img src="https://cdn.jsdelivr.net/gh/halo-blog/cdn-blog-img-a@master/img/网站.svg"/></div><div class="right"><p class="text">廖雪峰Java教程</p><p class="url">https://www.liaoxuefeng.com/wiki/1252599548343744/1255943543190176</p></div></a></div><h2 id="Java-的异常"><a class="header-anchor" href="#Java-的异常"></a>Java 的异常</h2><p>在计算机程序运行的过程中，总是会出现各种各样的错误。</p><p>有一些错误是用户造成的，比如，希望用户输入一个 int 类型的年龄，但是用户的输入是 abc：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 假设用户输入了abc：</span></span><br><span class="line">String s = <span class="string">&quot;abc&quot;</span>;</span><br><span class="line"><span class="keyword">int</span> n = Integer.parseInt(s); <span class="comment">// NumberFormatException</span></span><br></pre></td></tr></table></figure><p>程序想要读写某个文件的内容，但是用户已经把它删除了：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 用户删除了该文件：</span></span><br><span class="line">String t = readFile(<span class="string">&quot;C:\\abc.txt&quot;</span>); <span class="comment">// FileNotFoundException!</span></span><br></pre></td></tr></table></figure><p>还有一些错误是随机出现，并且永远不可能避免的。比如：</p><ul><li>网络突然断了，连接不到远程服务器；</li><li>内存耗尽，程序崩溃了；</li><li>用户点“打印”，但根本没有打印机；</li><li>……</li></ul><p>所以，一个健壮的程序必须处理各种各样的错误。</p><p>所谓错误，就是程序调用某个函数的时候，如果失败了，就表示出错。</p><p>调用方如何获知调用失败的信息？有两种方法：</p><p>方法一：约定返回错误码。</p><p>例如，处理一个文件，如果返回 0，表示成功，返回其他整数，表示约定的错误码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> code = processFile(<span class="string">&quot;C:\\test.txt&quot;</span>);</span><br><span class="line"><span class="keyword">if</span> (code == <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="comment">// ok:</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// error:</span></span><br><span class="line">    <span class="keyword">switch</span> (code) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">        <span class="comment">// file not found:</span></span><br><span class="line">    <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">        <span class="comment">// no read permission:</span></span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">        <span class="comment">// unknown error:</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>因为使用 int 类型的错误码，想要处理就非常麻烦。这种方式常见于底层C函数。</p><p>方法二：在语言层面上提供一个异常处理机制。</p><p>Java 内置了一套异常处理机制，总是使用异常来表示错误。</p><p>异常是一种 class，因此它本身带有类型信息。异常可以在任何地方抛出，但只需要在上层捕获，这样就和方法调用分离了：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    String s = processFile(“C:\\test.txt”);</span><br><span class="line">    <span class="comment">// ok:</span></span><br><span class="line">&#125; <span class="keyword">catch</span> (FileNotFoundException e) &#123;</span><br><span class="line">    <span class="comment">// file not found:</span></span><br><span class="line">&#125; <span class="keyword">catch</span> (SecurityException e) &#123;</span><br><span class="line">    <span class="comment">// no read permission:</span></span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">    <span class="comment">// io error:</span></span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">    <span class="comment">// other error:</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>从继承关系可知：<code>Throwable</code> 是异常体系的根，它继承自 <code>Object</code>。<code>Throwable</code> 有两个体系：<code>Error</code> 和 <code>Exception</code>，<code>Error</code> 表示严重的错误，程序对此一般无能为力，例如：</p><ul><li><code>OutOfMemoryError</code>：内存耗尽</li><li><code>NoClassDefFoundError</code>：无法加载某个Class</li><li><code>StackOverflowError</code>：栈溢出</li></ul><p>而 <code>Exception</code> 则是运行时的错误，它可以被捕获并处理。</p><p>某些异常是应用程序逻辑处理的一部分，应该捕获并处理。例如：</p><ul><li><code>NumberFormatException</code>：数值类型的格式错误</li><li><code>FileNotFoundException</code>：未找到文件</li><li><code>SocketException</code>：读取网络失败</li></ul><p>还有一些异常是程序逻辑编写不对造成的，应该修复程序本身。例如：</p><ul><li><code>NullPointerException</code>：对某个 null 的对象调用方法或字段</li><li><code>IndexOutOfBoundsException</code>：数组索引越界</li></ul><p><code>Exception</code> 又分为两大类：</p><ul><li><code>RuntimeException</code> 以及它的子类；</li><li>非 <code>RuntimeException</code>（包括 <code>IOException</code>、<code>ReflectiveOperationException</code> 等等）</li></ul><p>Java规定：</p><ul><li>必须捕获的异常，包括 <code>Exception</code> 及其子类，但不包括 <code>RuntimeException</code> 及其子类，这种类型的异常称为 Checked Exception。</li><li>不需要捕获的异常，包括 <code>Error</code> 及其子类，<code>RuntimeException</code> 及其子类。</li></ul><p>注意：编译器对 <code>RuntimeException</code> 及其子类不做强制捕获要求，不是指应用程序本身不应该捕获并处理 <code>RuntimeException</code>。是否需要捕获，具体问题具体分析。</p><h2 id="捕获异常"><a class="header-anchor" href="#捕获异常"></a>捕获异常</h2><p>捕获异常使用 <code>try...catch</code> 语句，把可能发生异常的代码放到 <code>try &#123;...&#125;</code> 中，然后使用 <code>catch</code> 捕获对应的 <code>Exception</code> 及其子类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">byte</span>[] bs = toGBK(<span class="string">&quot;中文&quot;</span>);</span><br><span class="line">        System.out.println(Arrays.toString(bs));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">byte</span>[] toGBK(String s) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 用指定编码转换String为byte[]:</span></span><br><span class="line">            <span class="keyword">return</span> s.getBytes(<span class="string">&quot;GBK&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (UnsupportedEncodingException e) &#123;</span><br><span class="line">            <span class="comment">// 如果系统不支持GBK编码，会捕获到UnsupportedEncodingException:</span></span><br><span class="line">            System.out.println(e); <span class="comment">// 打印异常信息</span></span><br><span class="line">            <span class="keyword">return</span> s.getBytes(); <span class="comment">// 尝试使用用默认编码</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果我们不捕获 <code>UnsupportedEncodingException</code>，会出现编译失败的问题</p><p>编译器会报错，错误信息类似：<code>unreported exception UnsupportedEncodingException; must be caught or declared to be thrown</code>，并且准确地指出需要捕获的语句是 <code>return s.getBytes(&quot;GBK&quot;);</code> 。意思是说，像 <code>UnsupportedEncodingException</code> 这样的 Checked Exception，必须被捕获。</p><p>这是因为 <code>String.getBytes(String)</code> 方法定义是：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">byte</span>[] getBytes(String charsetName) <span class="keyword">throws</span> UnsupportedEncodingException &#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在方法定义的时候，使用 <code>throws Xxx</code> 表示该方法可能抛出的异常类型。调用方在调用的时候，必须强制捕获这些异常，否则编译器会报错。<br><code>在</code>toGBK()<code>方法中，因为调用了</code>String.getBytes(String)<code>方法，就必须捕获</code>UnsupportedEncodingException<code>。我们也可以不捕获它，而是在方法定义处用 </code>throws<code>表示</code>toGBK()<code> 方法可能会抛出</code>UnsupportedEncodingException<code>，就可以让 </code>toGBK()` 方法通过编译器检查：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">byte</span>[] bs = toGBK(<span class="string">&quot;中文&quot;</span>);</span><br><span class="line">        System.out.println(Arrays.toString(bs));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">byte</span>[] toGBK(String s) <span class="keyword">throws</span> UnsupportedEncodingException &#123;</span><br><span class="line">        <span class="keyword">return</span> s.getBytes(<span class="string">&quot;GBK&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上述代码仍然会得到编译错误，但这一次，编译器提示的不是调用 <code>return s.getBytes(&quot;GBK&quot;);</code> 的问题，而是 <code>byte[] bs = toGBK(&quot;中文&quot;);</code>。因为在 <code>main()</code> 方法中，调用 <code>toGBK()</code>，没有捕获它声明的可能抛出的 <code>UnsupportedEncodingException</code> 。修复方法是在 <code>main()</code> 方法中捕获异常并处理：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">byte</span>[] bs = toGBK(<span class="string">&quot;中文&quot;</span>);</span><br><span class="line">            System.out.println(Arrays.toString(bs));</span><br><span class="line">        &#125; <span class="keyword">catch</span> (UnsupportedEncodingException e) &#123;</span><br><span class="line">            System.out.println(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">byte</span>[] toGBK(String s) <span class="keyword">throws</span> UnsupportedEncodingException &#123;</span><br><span class="line">        <span class="comment">// 用指定编码转换String为byte[]:</span></span><br><span class="line">        <span class="keyword">return</span> s.getBytes(<span class="string">&quot;GBK&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可见，只要是方法声明的 Checked Exception，不在调用层捕获，也必须在更高的调用层捕获。所有未捕获的异常，最终也必须在 <code>main()</code> 方法中捕获，不会出现漏写 <code>try</code> 的情况。这是由编译器保证的。<code>main()</code> 方法也是最后捕获 <code>Exception</code> 的机会。</p><p>如果是测试代码，上面的写法就略显麻烦。如果不想写任何 <code>try</code> 代码，可以直接把 <code>main()</code> 方法定义为 <code>throws Exception</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">byte</span>[] bs = toGBK(<span class="string">&quot;中文&quot;</span>);</span><br><span class="line">        System.out.println(Arrays.toString(bs));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">byte</span>[] toGBK(String s) <span class="keyword">throws</span> UnsupportedEncodingException &#123;</span><br><span class="line">        <span class="comment">// 用指定编码转换String为byte[]:</span></span><br><span class="line">        <span class="keyword">return</span> s.getBytes(<span class="string">&quot;GBK&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>因为 <code>main()</code> 方法声明了可能抛出 <code>Exception</code>，也就声明了可能抛出所有的 <code>Exception</code>，因此在内部就无需捕获了。代价就是一旦发生异常，程序会立刻退出。</p><p>捕获后不处理的方式是非常不好的，即使真的什么也做不了，也要先把异常记录下来。所有异常都可以调用 <code>printStackTrace()</code> 方法打印异常栈，这是一个简单有用的快速打印异常的方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">byte</span>[] toGBK(String s) &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> s.getBytes(<span class="string">&quot;GBK&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (UnsupportedEncodingException e) &#123;</span><br><span class="line">        <span class="comment">// 先记下来再说:</span></span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br></pre></td></tr></table></figure><h3 id="多-catch-语句"><a class="header-anchor" href="#多-catch-语句"></a>多 catch 语句</h3><p>可以使用多个 <code>catch</code> 语句，每个 <code>catch</code> 分别捕获对应的 <code>Exception</code> 及其子类。JVM 在捕获到异常后，会从上到下匹配 <code>catch</code> 语句，匹配到某个 <code>catch</code> 后，执行 <code>catch</code> 代码块，然后不再继续匹配。</p><p>简单地说就是：多个 <code>catch</code> 语句只有一个能被执行。例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        process1();</span><br><span class="line">        process2();</span><br><span class="line">        process3();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        System.out.println(e);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (NumberFormatException e) &#123;</span><br><span class="line">        System.out.println(e);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>存在多个 <code>catch</code> 的时候，<code>catch</code> 的顺序非常重要，子类必须写在前面。例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        process1();</span><br><span class="line">        process2();</span><br><span class="line">        process3();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;IO error&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (UnsupportedEncodingException e) &#123; <span class="comment">// 永远捕获不到</span></span><br><span class="line">        System.out.println(<span class="string">&quot;Bad encoding&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对于上面的代码，<code>UnsupportedEncodingException</code> 异常是永远捕获不到的，因为它是 <code>IOException</code> 的子类。当抛出 <code>UnsupportedEncodingException</code> 异常时，会被 <code>catch (IOException e) &#123; ... &#125;</code> 捕获并执行。因此，正确的写法是把子类放到前面：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        process1();</span><br><span class="line">        process2();</span><br><span class="line">        process3();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (UnsupportedEncodingException e) &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Bad encoding&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;IO error&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="finally-语句"><a class="header-anchor" href="#finally-语句"></a>finally 语句</h3><p>无论是否有异常发生，如果我们都希望执行一些语句，例如清理工作，怎么写？</p><p>可以把执行语句写若干遍：正常执行的放到 try 中，每个 catch 再写一遍。例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        process1();</span><br><span class="line">        process2();</span><br><span class="line">        process3();</span><br><span class="line">        System.out.println(<span class="string">&quot;END&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (UnsupportedEncodingException e) &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Bad encoding&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;END&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;IO error&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;END&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上述代码无论是否发生异常，都会执行 <code>System.out.println(&quot;END&quot;);</code> 这条语句。</p><p>那么如何消除这些重复的代码？Java 的 <code>try ... catch</code> 机制还提供了 <code>finally</code> 语句，<code>finally</code> 语句块保证有无错误都会执行。上述代码可以改写如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        process1();</span><br><span class="line">        process2();</span><br><span class="line">        process3();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (UnsupportedEncodingException e) &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Bad encoding&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;IO error&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;END&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意 <code>finally</code> 有几个特点：</p><ul><li><code>finally</code> 语句不是必须的，可写可不写；</li><li><code>finally</code> 总是最后执行。</li></ul><p>如果没有发生异常，就正常执行 <code>try &#123; ... &#125;</code> 语句块，然后执行 <code>finally</code>。如果发生了异常，就中断执行 <code>try &#123; ... &#125;</code> 语句块，然后跳转执行匹配的 <code>catch</code> 语句块，最后执行 <code>finally</code>。</p><p>可见，<code>finally</code> 是用来保证一些代码必须执行的。</p><p>某些情况下，可以没有 <code>catch</code>，只使用 <code>try ... finally</code> 结构。例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">process</span><span class="params">(String file)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        ...</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;END&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>因为方法声明了可能抛出的异常，所以可以不写 <code>catch</code>。</p><p>TODO: IO情况下不安全问题</p><h3 id="捕获多种异常"><a class="header-anchor" href="#捕获多种异常"></a>捕获多种异常</h3><p>如果某些异常的处理逻辑相同，但是异常本身不存在继承关系，那么就得编写多条 <code>catch</code> 子句：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        process1();</span><br><span class="line">        process2();</span><br><span class="line">        process3();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Bad input&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (NumberFormatException e) &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Bad input&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Unknown error&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>因为处理 <code>IOException</code> 和 <code>NumberFormatException</code> 的代码是相同的，所以我们可以把它两用 <code>|</code> 合并到一起：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        process1();</span><br><span class="line">        process2();</span><br><span class="line">        process3();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException | NumberFormatException e) &#123; <span class="comment">// IOException或NumberFormatException</span></span><br><span class="line">        System.out.println(<span class="string">&quot;Bad input&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Unknown error&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="抛出异常"><a class="header-anchor" href="#抛出异常"></a>抛出异常</h2><h3 id="异常的传播"><a class="header-anchor" href="#异常的传播"></a>异常的传播</h3><p>当某个方法抛出了异常时，如果当前方法没有捕获异常，异常就会被抛到上层调用方法，直到遇到某个 <code>try ... catch</code> 被捕获为止：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            process1();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">process1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        process2();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">process2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Integer.parseInt(<span class="keyword">null</span>); <span class="comment">// 会抛出NumberFormatException</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过 <code>printStackTrace()</code> 可以打印出方法的调用栈，类似：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">java.lang.NumberFormatException: null</span><br><span class="line">    at java.base&#x2F;java.lang.Integer.parseInt(Integer.java:614)</span><br><span class="line">    at java.base&#x2F;java.lang.Integer.parseInt(Integer.java:770)</span><br><span class="line">    at Main.process2(Main.java:16)</span><br><span class="line">    at Main.process1(Main.java:12)</span><br><span class="line">    at Main.main(Main.java:5)</span><br></pre></td></tr></table></figure><p><code>printStackTrace()</code> 对于调试错误非常有用，上述信息表示：<code>NumberFormatException</code> 是在 <code>java.lang.Integer.parseInt</code> 方法中被抛出的，从下往上看，调用层次依次是：</p><ol><li><code>main()</code> 调用 <code>process1()</code></li><li><code>process1()</code> 调用 <code>process2()</code></li><li><code>process2()</code> 调用 <code>Integer.parseInt(String)</code></li><li><code>Integer.parseInt(String)</code> 调用 <code>Integer.parseInt(String, int)</code></li></ol><p>查看 <code>Integer.java</code> 源码可知，抛出异常的方法代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">parseInt</span><span class="params">(String s, <span class="keyword">int</span> radix)</span> <span class="keyword">throws</span> NumberFormatException </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (s == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> NumberFormatException(<span class="string">&quot;null&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>并且，每层调用均给出了源代码的行号，可直接定位。</p><h3 id="抛出异常-v2"><a class="header-anchor" href="#抛出异常-v2"></a>抛出异常</h3><p>当发生错误时，例如，用户输入了非法的字符，我们就可以抛出异常。</p><p>如何抛出异常？参考 <code>Integer.parseInt()</code> 方法，抛出异常分两步：</p><ol><li>创建某个 <code>Exception</code> 的实例；</li><li>用 <code>throw</code> 语句抛出。</li></ol><p>下面是一个例子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">process2</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (s==<span class="keyword">null</span>) &#123;</span><br><span class="line">        NullPointerException e = <span class="keyword">new</span> NullPointerException();</span><br><span class="line">        <span class="keyword">throw</span> e;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实际上，绝大部分抛出异常的代码都会合并写成一行：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">process2</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (s==<span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果一个方法捕获了某个异常后，又在 <code>catch</code> 子句中抛出新的异常，就相当于把抛出的异常类型“转换”了，当 <code>process2()</code> 抛出 <code>NullPointerException</code> 后，被 <code>process1()</code> 捕获，然后抛出 <code>IllegalArgumentException()</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">process1</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        process2();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (NullPointerException e) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">process2</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (s==<span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果在 <code>main()</code> 中捕获 <code>IllegalArgumentException</code>，我们看看打印的异常栈：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            process1();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">process1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            process2();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (NullPointerException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">process2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>打印出的异常栈类似：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">java.lang.IllegalArgumentException</span><br><span class="line">    at Main.process1(Main.java:15)</span><br><span class="line">    at Main.main(Main.java:5)</span><br></pre></td></tr></table></figure><p>这说明新的异常丢失了原始异常信息，我们已经看不到原始异常 <code>NullPointerException</code> 的信息了。</p><p>为了能追踪到完整的异常栈，在构造异常的时候，把原始的 <code>Exception</code> 实例传进去，新的 <code>Exception</code> 就可以持有原始 <code>Exception</code> 信息。对上述代码改进如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            process1();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">process1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            process2();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (NullPointerException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">process2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">java.lang.IllegalArgumentException: java.lang.NullPointerException</span><br><span class="line">    at Main.process1(Main.java:15)</span><br><span class="line">    at Main.main(Main.java:5)</span><br><span class="line">Caused by: java.lang.NullPointerException</span><br><span class="line">    at Main.process2(Main.java:20)</span><br><span class="line">    at Main.process1(Main.java:13)</span><br></pre></td></tr></table></figure><p>注意到 <code>Caused by: Xxx</code>，说明捕获的 <code>IllegalArgumentException</code> 并不是造成问题的根源，根源在于 <code>NullPointerException</code>，是在 <code>Main.process2()</code> 方法抛出的。</p><p>在代码中获取原始异常可以使用 <code>Throwable.getCause()</code> 方法。如果返回 <code>null</code>，说明已经是“根异常”了。</p><p>有了完整的异常栈的信息，我们才能快速定位并修复代码的问题。捕获到异常并再次抛出时，一定要留住原始异常，否则很难定位第一案发现场！</p><p>如果我们在 <code>try</code> 或者 <code>catch</code> 语句块中抛出异常，<code>finally</code> 语句是否会执行？例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Integer.parseInt(<span class="string">&quot;abc&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;caught&quot;</span>);</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e);</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;finally&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上述代码执行结果如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">caught</span><br><span class="line">finally</span><br><span class="line">Exception in thread &quot;main&quot; java.lang.RuntimeException: java.lang.NumberFormatException: For input string: &quot;abc&quot;</span><br><span class="line">    at Main.main(Main.java:8)</span><br><span class="line">Caused by: java.lang.NumberFormatException: For input string: &quot;abc&quot;</span><br><span class="line">  at ...</span><br></pre></td></tr></table></figure><p>第一行打印了 <code>caught</code>，说明进入了 catch 语句块。第二行打印了 <code>finally</code> ，说明执行了 finally 语句块。</p><p>因此，在 catch 中抛出异常，不会影响 finally 的执行。JVM 会先执行 finally，然后抛出异常。</p><h3 id="异常屏蔽"><a class="header-anchor" href="#异常屏蔽"></a>异常屏蔽</h3><p>如果在执行 finally 语句时抛出异常，那么，catch 语句的异常还能否继续抛出？例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Integer.parseInt(<span class="string">&quot;abc&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;caught&quot;</span>);</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e);</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;finally&quot;</span>);</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行上述代码，发现异常信息如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">caught</span><br><span class="line">finally</span><br><span class="line">Exception in thread &quot;main&quot; java.lang.IllegalArgumentException</span><br><span class="line">    at Main.main(Main.java:11)</span><br></pre></td></tr></table></figure><p>这说明 finally 抛出异常后，原来在 catch 中准备抛出的异常就“消失”了，因为只能抛出一个异常。没有被抛出的异常称为“被屏蔽”的异常（Suppressed Exception）。</p><p>在极少数的情况下，我们需要获知所有的异常。如何保存所有的异常信息？方法是先用 <code>origin</code> 变量保存原始异常，然后调用 <code>Throwable.addSuppressed()</code>，把原始异常添加进来，最后在 finally 抛出：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Exception origin = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            System.out.println(Integer.parseInt(<span class="string">&quot;abc&quot;</span>));</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            origin = e;</span><br><span class="line">            <span class="keyword">throw</span> e;</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            Exception e = <span class="keyword">new</span> IllegalArgumentException();</span><br><span class="line">            <span class="keyword">if</span> (origin != <span class="keyword">null</span>) &#123;</span><br><span class="line">                e.addSuppressed(origin);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">throw</span> e;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当 catch 和 finally 都抛出了异常时，虽然 catch 的异常被屏蔽了，但是，finally 抛出的异常仍然包含了它：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Exception in thread &quot;main&quot; java.lang.IllegalArgumentException</span><br><span class="line">    at Main.main(Main.java:11)</span><br><span class="line">Suppressed: java.lang.NumberFormatException: For input string: &quot;abc&quot;</span><br><span class="line">    at java.base&#x2F;java.lang.NumberFormatException.forInputString(NumberFormatException.java:65)</span><br><span class="line">    at java.base&#x2F;java.lang.Integer.parseInt(Integer.java:652)</span><br><span class="line">    at java.base&#x2F;java.lang.Integer.parseInt(Integer.java:770)</span><br><span class="line">    at Main.main(Main.java:6)</span><br></pre></td></tr></table></figure><p>通过 <code>Throwable.getSuppressed()</code> 可以获取所有的 <code>Suppressed Exception</code>。</p><p>绝大多数情况下，在 finally 中不要抛出异常。因此，我们通常不需要关心 <code>Suppressed Exception</code>。</p><h2 id="自定义异常"><a class="header-anchor" href="#自定义异常"></a>自定义异常</h2><p>Java 标准库定义的常用异常包括：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">Exception</span><br><span class="line">│</span><br><span class="line">├─ RuntimeException</span><br><span class="line">│  │</span><br><span class="line">│  ├─ NullPointerException</span><br><span class="line">│  │</span><br><span class="line">│  ├─ IndexOutOfBoundsException</span><br><span class="line">│  │</span><br><span class="line">│  ├─ SecurityException</span><br><span class="line">│  │</span><br><span class="line">│  └─ IllegalArgumentException</span><br><span class="line">│     │</span><br><span class="line">│     └─ NumberFormatException</span><br><span class="line">│</span><br><span class="line">├─ IOException</span><br><span class="line">│  │</span><br><span class="line">│  ├─ UnsupportedCharsetException</span><br><span class="line">│  │</span><br><span class="line">│  ├─ FileNotFoundException</span><br><span class="line">│  │</span><br><span class="line">│  └─ SocketException</span><br><span class="line">│</span><br><span class="line">├─ ParseException</span><br><span class="line">│</span><br><span class="line">├─ GeneralSecurityException</span><br><span class="line">│</span><br><span class="line">├─ SQLException</span><br><span class="line">│</span><br><span class="line">└─ TimeoutException</span><br></pre></td></tr></table></figure><p>当我们在代码中需要抛出异常时，尽量使用 JDK 已定义的异常类型。例如，参数检查不合法，应该抛出 <code>IllegalArgumentException</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">process1</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (age &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在一个大型项目中，可以自定义新的异常类型，但是，保持一个合理的异常继承体系是非常重要的。</p><p>一个常见的做法是自定义一个 <code>BaseException</code> 作为“根异常”，然后，派生出各种业务类型的异常。</p><p><code>BaseException</code> 需要从一个适合的 <code>Exception</code> 派生，通常建议从 <code>RuntimeException</code> 派生：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BaseException</span> <span class="keyword">extends</span> <span class="title">RuntimeException</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其他业务类型的异常就可以从 <code>BaseException</code> 派生：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserNotFoundException</span> <span class="keyword">extends</span> <span class="title">BaseException</span> </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoginFailedException</span> <span class="keyword">extends</span> <span class="title">BaseException</span> </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ...</span></span><br></pre></td></tr></table></figure><p>自定义的 <code>BaseException</code> 应该提供多个构造方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BaseException</span> <span class="keyword">extends</span> <span class="title">RuntimeException</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">BaseException</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">BaseException</span><span class="params">(String message, Throwable cause)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(message, cause);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">BaseException</span><span class="params">(String message)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(message);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">BaseException</span><span class="params">(Throwable cause)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(cause);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上述构造方法实际上都是原样照抄 <code>RuntimeException</code>。这样，抛出异常的时候，就可以选择合适的构造方法。通过IDE可以根据父类快速生成子类的构造方法。</p><h2 id="NullPointerException"><a class="header-anchor" href="#NullPointerException"></a>NullPointerException</h2><p>在所有的 <code>RuntimeException</code> 异常中，Java 程序员最熟悉的恐怕就是 <code>NullPointerException</code> 了。</p><p><code>NullPointerException</code> 即空指针异常，俗称 NPE。如果一个对象为 <code>null</code>，调用其方法或访问其字段就会产生 <code>NullPointerException</code>，这个异常通常是由 JVM 抛出的，例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String s = <span class="keyword">null</span>;</span><br><span class="line">        System.out.println(s.toLowerCase());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>指针这个概念实际上源自 C 语言，Java 语言中并无指针。我们定义的变量实际上是引用，Null Pointer 更确切地说是 Null Reference，不过两者区别不大。</p><h3 id="处理NullPointerException"><a class="header-anchor" href="#处理NullPointerException"></a>处理NullPointerException</h3><p>如果遇到 <code>NullPointerException</code>，我们应该如何处理？首先，必须明确，<code>NullPointerException</code> 是一种代码逻辑错误，遇到 <code>NullPointerException</code>，遵循原则是早暴露，早修复，严禁使用 <code>catch</code> 来隐藏这种编码错误，好的编码习惯可以极大地降低 <code>NullPointerException</code> 的产生，例如成员变量在定义时初始化：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name = <span class="string">&quot;&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用空字符串 <code>&quot;&quot;</code> 而不是默认的 <code>null</code> 可避免很多 <code>NullPointerException</code> ，编写业务逻辑时，用空字符串 <code>&quot;&quot;</code> 表示未填写比 <code>null</code> 安全得多。</p><p>返回空字符串 <code>&quot;&quot;</code> 、空数组而不是 <code>null</code> ：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> String[] readLinesFromFile(String file) &#123;</span><br><span class="line">    <span class="keyword">if</span> (getFileSize(file) == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="comment">// 返回空数组而不是null:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> String[<span class="number">0</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样可以使得调用方无需检查结果是否为 <code>null</code>。</p><p>如果调用方一定要根据 <code>null</code> 判断，比如返回 <code>null</code> 表示文件不存在，那么考虑返回 <code>Optional&lt;T&gt;</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Optional&lt;String&gt; <span class="title">readFromFile</span><span class="params">(String file)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!fileExist(file)) &#123;</span><br><span class="line">        <span class="keyword">return</span> Optional.empty();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样调用方必须通过 <code>Optional.isPresent()</code> 判断是否有结果。</p><h3 id="定位-NullPointerException"><a class="header-anchor" href="#定位-NullPointerException"></a>定位 NullPointerException</h3><p>如果产生了 <code>NullPointerException</code>，例如，调用 <code>a.b.c.x()</code> 时产生了 <code>NullPointerException</code>，原因可能是：</p><ul><li><code>a</code> 是 <code>null</code>；</li><li><code>a.b</code> 是 <code>null</code>；</li><li><code>a.b.c</code> 是 <code>null</code>；</li></ul><p>确定到底是哪个对象是 <code>null</code> 以前只能打印这样的日志：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">System.out.println(a);</span><br><span class="line">System.out.println(a.b);</span><br><span class="line">System.out.println(a.b.c);</span><br></pre></td></tr></table></figure><p>从 Java 14 开始，如果产生了 <code>NullPointerException</code>，JVM 可以给出详细的信息告诉我们 <code>null</code> 对象到底是谁。我们来看例子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Person p = <span class="keyword">new</span> Person();</span><br><span class="line">        System.out.println(p.address.city.toLowerCase());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    String[] name = <span class="keyword">new</span> String[<span class="number">2</span>];</span><br><span class="line">    Address address = <span class="keyword">new</span> Address();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Address</span> </span>&#123;</span><br><span class="line">    String city;</span><br><span class="line">    String street;</span><br><span class="line">    String zipcode;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Exception in thread &quot;main&quot; java.lang.NullPointerException: Cannot invoke &quot;String.toLowerCase()&quot; because &quot;p.address.city&quot; is null</span><br><span class="line">at Main.main(Main.java:4)</span><br></pre></td></tr></table></figure><p>可以在 <code>NullPointerException</code> 的详细信息中看到类似 <code>... because &quot;&lt;local1&gt;.address.city&quot; is null</code>，意思是 <code>city</code> 字段为 <code>null</code>，这样我们就能快速定位问题所在。</p><p>这种增强的 <code>NullPointerException</code> 详细信息是 Java 14 新增的功能，但默认是关闭的，我们可以给 JVM 添加一个 <code>-XX:+ShowCodeDetailsInExceptionMessages</code> 参数启用它，在 JDK 15 及以上默认是开启的。</p><h2 id="使用断言"><a class="header-anchor" href="#使用断言"></a>使用断言</h2><p>断言（Assertion）是一种调试程序的方式。在 Java 中，使用 <code>assert</code> 关键字来实现断言。我们先看一个例子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">double</span> x = Math.abs(-<span class="number">123.45</span>);</span><br><span class="line">    <span class="keyword">assert</span> x &gt;= <span class="number">0</span>;</span><br><span class="line">    System.out.println(x);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>语句 <code>assert x &gt;= 0;</code> 即为断言，断言条件 <code>x &gt;= 0</code> 预期为 <code>true</code>。如果计算结果为 <code>false</code>，则断言失败，抛出 <code>AssertionError</code>。</p><p>使用 <code>assert</code> 语句时，还可以添加一个可选的断言消息：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">assert</span> x &gt;= <span class="number">0</span> : <span class="string">&quot;x must &gt;= 0&quot;</span>;</span><br></pre></td></tr></table></figure><p>这样，断言失败的时候，<code>AssertionError</code> 会带上消息 <code>x must &gt;= 0</code>，更加便于调试。</p><p>Java 断言的特点是：断言失败时会抛出 <code>AssertionError</code>，导致程序结束退出。因此，断言不能用于可恢复的程序错误，只应该用于开发和测试阶段。</p><p>对于可恢复的程序错误，不应该使用断言。例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">sort</span><span class="params">(<span class="keyword">int</span>[] arr)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">assert</span> arr != <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>应该抛出异常并在上层捕获：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">sort</span><span class="params">(<span class="keyword">int</span>[] arr)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (x == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">&quot;array cannot be null&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当我们在程序中使用 <code>assert</code> 时，例如，一个简单的断言：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> x = -<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">assert</span> x &gt; <span class="number">0</span>;</span><br><span class="line">        System.out.println(x);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>断言 <code>x</code> 必须大于 0，实际上 <code>x</code> 为 -1，断言肯定失败。执行上述代码，发现程序并未抛出 <code>AssertionError</code>，而是正常打印了 <code>x</code> 的值。为什么 <code>assert</code> 语句不起作用？</p><p>这是因为 JVM 默认关闭断言指令，即遇到 <code>assert</code> 语句就自动忽略了，不执行。</p><p>要执行 <code>assert</code> 语句，必须给 Java 虚拟机传递 <code>-enableassertions</code>（可简写为 <code>-ea</code> ）参数启用断言。所以，上述程序必须在命令行下运行才有效果。</p><p>还可以有选择地对特定地类启用断言，命令行参数是：<code>-ea:com.halo.test.Main</code> ，表示只对 <code>com.halo.test.Main</code> 这个类启用断言。或者对特定地包启用断言，命令行参数是：<code>-ea:com.halo.test...</code>（注意结尾有 3 个 <code>.</code> ），表示对 <code>com.halo.test</code> 这个包启动断言。</p><p>实际开发中，很少使用断言。更好的方法是编写单元测试，例如 JUnit。</p><h2 id="使用JDK-Logging"><a class="header-anchor" href="#使用JDK-Logging"></a>使用JDK Logging</h2><p>在编写程序的过程中，发现程序运行结果与预期不符，怎么办？当然是用 <code>System.out.println()</code> 打印出执行过程中的某些变量，观察每一步的结果与代码逻辑是否符合，然后有针对性地修改代码。</p><p>代码改好了怎么办？当然是删除没有用的 <code>System.out.println()</code> 语句了。</p><p>如果改代码又改出问题怎么办？再加上 <code>System.out.println()</code>。</p><p>反复这么搞几次，很快大家就发现使用 <code>System.out.println()</code> 非常麻烦。</p><p>怎么办？解决方法是使用日志（Logging）。它的目的是为了取代 <code>System.out.println()</code>。</p><p>输出日志，而不是用 <code>System.out.println()</code>，有以下几个好处：</p><ol><li>可以设置输出样式，避免自己每次都写 <code>&quot;ERROR: &quot; + var</code></li><li>可以设置输出级别，禁止某些级别输出。例如，只输出错误日志</li><li>可以被重定向到文件，这样可以在程序运行结束后查看日志</li><li>可以按包名控制日志级别，只输出某些包打的日志</li><li>……</li></ol><p>因为 Java 标准库内置了日志包 <code>java.util.logging</code>，我们可以直接用。先看一个简单的例子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Hello</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Logger logger = Logger.getGlobal();</span><br><span class="line">        logger.info(<span class="string">&quot;start process...&quot;</span>);</span><br><span class="line">        logger.warning(<span class="string">&quot;memory is running out...&quot;</span>);</span><br><span class="line">        logger.fine(<span class="string">&quot;ignored.&quot;</span>);</span><br><span class="line">        logger.severe(<span class="string">&quot;process will be terminated...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行上述代码，得到类似如下的输出：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">May 20, 2021 4:42:58 PM Hello main</span><br><span class="line">INFO: start process...</span><br><span class="line">May 20, 2021 4:42:58 PM Hello main</span><br><span class="line">WARNING: memory is running out...</span><br><span class="line">May 20, 2021 4:42:58 PM Hello main</span><br><span class="line">SEVERE: process will be terminated...</span><br></pre></td></tr></table></figure><p>对比可见，使用日志最大的好处是，它自动打印了时间、调用类、调用方法等很多有用的信息。再仔细观察发现，4 条日志，只打印了 3 条，<code>logger.fine()</code> 没有打印。这是因为，日志的输出可以设定级别。JDK 的 Logging 定义了 7 个日志级别，从严重到普通：SEVERE、WARNING、INFO、CONFIG、FINE、FINER、FINEST。</p><p>因为默认级别是 INFO，因此，INFO级别以下的日志，不会被打印出来。使用日志级别的好处在于，调整级别，就可以屏蔽掉很多调试相关的日志输出。</p><p>使用 Java 标准库内置的 Logging 有以下局限：</p><p>Logging 系统在 JVM 启动时读取配置文件并完成初始化，一旦开始运行 main() 方法，就无法修改配置；</p><p>配置不太方便，需要在 JVM 启动时传递参数 <code>-Djava.util.logging.config.file=&lt;config-file-name&gt;</code>。</p><p>因此，Java 标准库内置的 Logging 使用并不是非常广泛。</p><h2 id="使用-Commons-Logging"><a class="header-anchor" href="#使用-Commons-Logging"></a>使用 Commons Logging</h2><p>和 Java 标准库提供的日志不同，Commons Logging 是一个第三方日志库，它是由 Apache 创建的日志模块。</p><p>Commons Logging 的特色是，它可以挂接不同的日志系统，并通过配置文件指定挂接的日志系统。默认情况下，Commons Loggin 自动搜索并使用 Log4j（ Log4j 是另一个流行的日志系统），如果没有找到 Log4j，再使用 JDK Logging。</p><p>使用 Commons Logging 只需要和两个类打交道，并且只有两步：</p><ul><li>第一步，通过LogFactory获取Log类的实例</li><li>第二步，使用Log实例的方法打日志。</li></ul><p>示例代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.apache.commons.logging.Log;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.logging.LogFactory;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Log log = LogFactory.getLog(Main.class);</span><br><span class="line">        log.info(<span class="string">&quot;start...&quot;</span>);</span><br><span class="line">        log.warn(<span class="string">&quot;end.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Maven 项目 pom.xml 中添加如下依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- https://mvnrepository.com/artifact/commons-logging/commons-logging --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-logging<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-logging<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><p>运行结果如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">May <span class="number">20</span>, <span class="number">2021</span> <span class="number">4</span>:<span class="number">56</span>:<span class="number">02</span> PM com.halo.logging.Main main</span><br><span class="line">INFO: start...</span><br><span class="line">May <span class="number">20</span>, <span class="number">2021</span> <span class="number">4</span>:<span class="number">56</span>:<span class="number">02</span> PM com.halo.logging.Main main</span><br><span class="line">WARNING: end.</span><br></pre></td></tr></table></figure><p>Commons Logging 定义了 6 个日志级别：FATAL、ERROR、WARNING、INFO、DEBUG、TRACE。默认级别是 INFO。</p><p>使用 Commons Logging 时，如果在静态方法中引用 Log，通常直接定义一个静态类型变量：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 在静态方法中引用 Log:</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> Log log = LogFactory.getLog(Main.class);</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">foo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;foo&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在实例方法中引用 <code>Log</code>，通常定义一个实例变量：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 在实例方法中引用Log:</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">final</span> Log log = LogFactory.getLog(getClass());</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">foo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;foo&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意到实例变量 <code>log</code> 的获取方式是 <code>LogFactory.getLog(getClass())</code>，虽然也可以用 <code>LogFactory.getLog(Person.class)</code>，但是前一种方式有个非常大的好处，就是子类可以直接使用该 <code>log</code> 实例。例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 在子类中使用父类实例化的log:</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> <span class="keyword">extends</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">bar</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;bar&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>由于 Java 类的动态特性，子类获取的 <code>log</code> 字段实际上相当于 <code>LogFactory.getLog(Student.class)</code>，但却是从父类继承而来，并且无需改动代码。</p><p>此外，Commons Logging 的日志方法，例如 <code>info()</code>，除了标准的 <code>info(String)</code> 外，还提供了一个非常有用的重载方法：<code>info(String, Throwable)</code>，这使得记录异常更加简单：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">   <span class="comment">// ...</span></span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">    log.error(<span class="string">&quot;got exception!&quot;</span>, e);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="使用-Log4j"><a class="header-anchor" href="#使用-Log4j"></a>使用 Log4j</h2><p>前面介绍了 Commons Logging ，可以作为“日志接口”来使用。而真正的“日志实现”可以使用 Log4j。</p><p>Log4j 是一种非常流行的日志框架。是一个组件化设计的日志系统，它的架构大致如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">log.info(&quot;User signed in.&quot;);</span><br><span class="line"> │</span><br><span class="line"> │   ┌──────────┐    ┌──────────┐    ┌──────────┐    ┌──────────┐</span><br><span class="line"> ├──&gt;│ Appender │───&gt;│  Filter  │───&gt;│  Layout  │───&gt;│ Console  │</span><br><span class="line"> │   └──────────┘    └──────────┘    └──────────┘    └──────────┘</span><br><span class="line"> │</span><br><span class="line"> │   ┌──────────┐    ┌──────────┐    ┌──────────┐    ┌──────────┐</span><br><span class="line"> ├──&gt;│ Appender │───&gt;│  Filter  │───&gt;│  Layout  │───&gt;│   File   │</span><br><span class="line"> │   └──────────┘    └──────────┘    └──────────┘    └──────────┘</span><br><span class="line"> │</span><br><span class="line"> │   ┌──────────┐    ┌──────────┐    ┌──────────┐    ┌──────────┐</span><br><span class="line"> └──&gt;│ Appender │───&gt;│  Filter  │───&gt;│  Layout  │───&gt;│  Socket  │</span><br><span class="line">     └──────────┘    └──────────┘    └──────────┘    └──────────┘</span><br></pre></td></tr></table></figure><p>当我们使用 Log4j 输出一条日志时，Log4j 自动通过不同的 Appender 把同一条日志输出到不同的目的地。例如：</p><ul><li>console：输出到屏幕；</li><li>file：输出到文件；</li><li>socket：通过网络输出到远程计算机；</li><li>jdbc：输出到数据库。</li></ul><p>在输出日志的过程中，通过 <code>Filter</code> 来过滤哪些 log 需要被输出，哪些 log 不需要被输出。例如，仅输出 ERROR 级别的日志。</p><p>最后，通过 Layout 来格式化日志信息，例如，自动添加日期、时间、方法名称等信息。</p><p>上述结构虽然复杂，但我们在实际使用的时候，并不需要关心 Log4j 的 API，而是通过配置文件来配置它。</p><p>以 Maven项目 的 XML 配置为例，使用 Log4j 的时候，我们把一个 log4j2.xml 的文件放到 main/resourse 下就可以让 Log4j 读取配置文件并按照我们的配置来输出日志。下面是一个配置文件的例子：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Properties</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 定义日志格式 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">Property</span> <span class="attr">name</span>=<span class="string">&quot;log.pattern&quot;</span>&gt;</span>%d&#123;MM-dd HH:mm:ss.SSS&#125; [%t] %-5level %logger&#123;36&#125;%n%msg%n%n<span class="tag">&lt;/<span class="name">Property</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 定义文件名变量 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">Property</span> <span class="attr">name</span>=<span class="string">&quot;file.err.filename&quot;</span>&gt;</span>log/err.log<span class="tag">&lt;/<span class="name">Property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">Property</span> <span class="attr">name</span>=<span class="string">&quot;file.err.pattern&quot;</span>&gt;</span>log/err.%i.log.gz<span class="tag">&lt;/<span class="name">Property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">Properties</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 定义Appender，即目的地 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Appenders</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 定义输出到屏幕 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">Console</span> <span class="attr">name</span>=<span class="string">&quot;console&quot;</span> <span class="attr">target</span>=<span class="string">&quot;SYSTEM_OUT&quot;</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 日志格式引用上面定义的log.pattern --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">PatternLayout</span> <span class="attr">pattern</span>=<span class="string">&quot;$&#123;log.pattern&#125;&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">Console</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 定义输出到文件,文件名引用上面定义的file.err.filename --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">RollingFile</span> <span class="attr">name</span>=<span class="string">&quot;err&quot;</span> <span class="attr">bufferedIO</span>=<span class="string">&quot;true&quot;</span> <span class="attr">fileName</span>=<span class="string">&quot;$&#123;file.err.filename&#125;&quot;</span> <span class="attr">filePattern</span>=<span class="string">&quot;$&#123;file.err.pattern&#125;&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">PatternLayout</span> <span class="attr">pattern</span>=<span class="string">&quot;$&#123;log.pattern&#125;&quot;</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">Policies</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!-- 根据文件大小自动切割日志 --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">SizeBasedTriggeringPolicy</span> <span class="attr">size</span>=<span class="string">&quot;1 MB&quot;</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">Policies</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 保留最近10份 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">DefaultRolloverStrategy</span> <span class="attr">max</span>=<span class="string">&quot;10&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">RollingFile</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">Appenders</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Loggers</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">Root</span> <span class="attr">level</span>=<span class="string">&quot;info&quot;</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 对info级别的日志，输出到console --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">AppenderRef</span> <span class="attr">ref</span>=<span class="string">&quot;console&quot;</span> <span class="attr">level</span>=<span class="string">&quot;info&quot;</span> /&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 对error级别的日志，输出到err，即上面定义的RollingFile --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">AppenderRef</span> <span class="attr">ref</span>=<span class="string">&quot;err&quot;</span> <span class="attr">level</span>=<span class="string">&quot;error&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">Root</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">Loggers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><p>虽然配置 Log4j 比较繁琐，但一旦配置完成，使用起来就非常方便。对上面的配置文件，凡是 INFO 级别的日志，会自动输出到屏幕，而 ERROR 级别的日志，不但会输出到屏幕，还会同时输出到文件。并且，一旦日志文件达到指定大小（1MB），Log4j 就会自动切割新的日志文件，并最多保留 10 份。</p><p>在 Maven 项目 pom.xml 中添加</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- https://mvnrepository.com/artifact/commons-logging/commons-logging --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-logging<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-logging<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.apache.logging.log4j/log4j-core --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.logging.log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.14.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.apache.logging.log4j/log4j-jcl --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.logging.log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j-jcl<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.14.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><p>要打印日志，只需要按 Commons Logging 的写法写，不需要改动任何代码，就可以得到 Log4j 的日志输出，类似：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">05-20 17:13:44.186 [main] INFO  com.halo.logging.Main</span><br><span class="line">start...</span><br><span class="line"></span><br><span class="line">05-20 17:13:44.191 [main] WARN  com.halo.logging.Main</span><br><span class="line">end.</span><br></pre></td></tr></table></figure><h2 id="使用-SLF4J-和-Logback"><a class="header-anchor" href="#使用-SLF4J-和-Logback"></a>使用 SLF4J 和 Logback</h2><p>前面介绍了 Commons Logging 和 Log4j 这一对，它们一个负责充当日志 API，一个负责实现日志底层，搭配使用非常便于开发。</p><p>其实 SLF4J 类似于Commons Logging，也是一个日志接口，而 Logback 类似于 Log4j，是一个日志的实现。</p><p>为什么有了 Commons Logging 和 Log4j，又会蹦出来 SLF4J 和 Logback？这是因为 Java 有着非常悠久的开源历史，不但 OpenJDK 本身是开源的，而且我们用到的第三方库，几乎全部都是开源的。开源生态丰富的一个特定就是，同一个功能，可以找到若干种互相竞争的开源库。</p><p>因为对 Commons Logging 的接口不满意，有人就搞了 SLF4J。因为对 Log4j 的性能不满意，有人就搞了 Logback。</p><p>我们先来看看 SLF4J 对 Commons Logging 的接口有何改进。在 Commons Logging 中，我们要打印日志，有时候得这么写：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> score = <span class="number">99</span>;</span><br><span class="line">p.setScore(score);</span><br><span class="line">log.info(<span class="string">&quot;Set score &quot;</span> + score + <span class="string">&quot; for Person &quot;</span> + p.getName() + <span class="string">&quot; ok.&quot;</span>);</span><br></pre></td></tr></table></figure><p>拼字符串是一个非常麻烦的事情，所以 SLF4J 的日志接口改进成这样了：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> score = <span class="number">99</span>;</span><br><span class="line">p.setScore(score);</span><br><span class="line">logger.info(<span class="string">&quot;Set score &#123;&#125; for Person &#123;&#125; ok.&quot;</span>, score, p.getName());</span><br></pre></td></tr></table></figure><p>我们靠猜也能猜出来，SLF4J 的日志接口传入的是一个带占位符的字符串，用后面的变量自动替换占位符，所以看起来更加自然。</p><p>如何使用 SLF4J ？它的接口实际上和 Commons Logging 几乎一模一样：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.slf4j.Logger;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> Logger logger = LoggerFactory.getLogger(getClass());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对比一下 Commons Logging 和 SLF4J 的接口，不同之处就是 <code>Log</code> 变成了 <code>Logger</code>，<code>LogFactory</code> 变成了 <code>LoggerFactory</code>。</p><p>在 Maven 项目中添加相关依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- https://mvnrepository.com/artifact/ch.qos.logback/logback-classic --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>ch.qos.logback<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>logback-classic<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>logback-classic</code> 依赖包括了 <code>slf4j-api</code> 所以无需单独引用</p><p>在 Maven 项目中添加相关配置文件 logback.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">&quot;CONSOLE&quot;</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.core.ConsoleAppender&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">encoder</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">pattern</span>&gt;</span>%d&#123;HH:mm:ss.SSS&#125; [%thread] %-5level %logger&#123;36&#125; - %msg%n<span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">encoder</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">&quot;FILE&quot;</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.core.rolling.RollingFileAppender&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">encoder</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">pattern</span>&gt;</span>%d&#123;HH:mm:ss.SSS&#125; [%thread] %-5level %logger&#123;36&#125; - %msg%n<span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">charset</span>&gt;</span>utf-8<span class="tag">&lt;/<span class="name">charset</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">encoder</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">file</span>&gt;</span>log/output.log<span class="tag">&lt;/<span class="name">file</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">rollingPolicy</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.core.rolling.FixedWindowRollingPolicy&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">fileNamePattern</span>&gt;</span>log/output.log.%i<span class="tag">&lt;/<span class="name">fileNamePattern</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">rollingPolicy</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">triggeringPolicy</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.core.rolling.SizeBasedTriggeringPolicy&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">MaxFileSize</span>&gt;</span>1MB<span class="tag">&lt;/<span class="name">MaxFileSize</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">triggeringPolicy</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">root</span> <span class="attr">level</span>=<span class="string">&quot;INFO&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">&quot;CONSOLE&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">&quot;FILE&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">root</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><p>运行即可获得类似如下的输出：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">17:28:08.829 [main] INFO  com.halo.slf4j.Test - start...</span><br><span class="line">17:28:08.832 [main] WARN  com.halo.slf4j.Test - end.</span><br></pre></td></tr></table></figure><p>从目前的趋势来看，越来越多的开源项目从 Commons Logging 加 Log4j 转向了 SLF4J 加 Logback。</p>]]></content>
    
    
    <summary type="html">Java 异常和日志</summary>
    
    
    
    <category term="Java" scheme="https://halo123.top/categories/Java/"/>
    
    
    <category term="Java" scheme="https://halo123.top/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>蘑菇博客环境搭建</title>
    <link href="https://halo123.top/2021/05/15/MoGuBlog/A_%E8%98%91%E8%8F%87%E5%8D%9A%E5%AE%A2%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"/>
    <id>https://halo123.top/2021/05/15/MoGuBlog/A_%E8%98%91%E8%8F%87%E5%8D%9A%E5%AE%A2%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/</id>
    <published>2021-05-15T07:45:20.000Z</published>
    <updated>2021-05-15T13:34:29.956Z</updated>
    
    <content type="html"><![CDATA[<div class="tag link"><a class="link-card" title="蘑菇博客项目地址" href="https://gitee.com/moxi159753/mogu_blog_v2"><div class="left"><img src="https://cdn.jsdelivr.net/gh/halo-blog/cdn-blog-img-b@master/icon/Gitee.svg"/></div><div class="right"><p class="text">蘑菇博客项目地址</p><p class="url">https://gitee.com/moxi159753/mogu_blog_v2</p></div></a></div><p>蘑菇博客（MoguBlog），一个基于微服务架构的前后端分离博客系统。Web 端使用 Vue + Element , 移动端使用 uniapp 和 ColorUI。后端使用 Spring Cloud + Spring Boot + mybatis-plus 进行开发，使用 Jwt + Spring Security 做登录验证和权限校验，使用 ElasticSearch 和 Solr 作为全文检索服务，使用 Github Actions 完成博客的持续集成，使用 ELK 收集博客日志，文件支持上传七牛云和 Minio，支持 Docker Compose 脚本一键部署。</p><p>参考资料：</p><div class="tag link"><a class="link-card" title="Windows+VMware一键搭建蘑菇博客本地开发环境" href="http://www.moguit.cn/#/info?blogOid=583"><div class="left"><img src="https://cdn.jsdelivr.net/gh/halo-blog/cdn-blog-img-a@master/img/网站.svg"/></div><div class="right"><p class="text">Windows+VMware一键搭建蘑菇博客本地开发环境</p><p class="url">http://www.moguit.cn/#/info?blogOid=583</p></div></a></div><h2 id="Docker-环境"><a class="header-anchor" href="#Docker-环境"></a>Docker 环境</h2><p>在 VMware 或 云服务器中 配置 Docker 环境</p><h3 id="安装Docker"><a class="header-anchor" href="#安装Docker"></a>安装Docker</h3><p>因为我们需要拉取镜像，所以需要在服务器提前安装好 Docker，首先配置一下 Docker 的阿里 yum 源</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">cat &gt;&#x2F;etc&#x2F;yum.repos.d&#x2F;docker.repo&lt;&lt;EOF</span><br><span class="line">[docker-ce-edge]</span><br><span class="line">name&#x3D;Docker CE Edge - \$basearch</span><br><span class="line">baseurl&#x3D;https:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;docker-ce&#x2F;linux&#x2F;centos&#x2F;7&#x2F;\$basearch&#x2F;edge</span><br><span class="line">enabled&#x3D;1</span><br><span class="line">gpgcheck&#x3D;1</span><br><span class="line">gpgkey&#x3D;https:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;docker-ce&#x2F;linux&#x2F;centos&#x2F;gpg</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure><p>然后 yum 方式安装 Docker</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># yum安装</span><br><span class="line">yum -y install docker-ce</span><br><span class="line"># 查看docker版本</span><br><span class="line">docker --version  </span><br><span class="line"># 开机自启</span><br><span class="line">systemctl enable docker</span><br><span class="line"># 启动docker</span><br><span class="line">systemctl start docker</span><br></pre></td></tr></table></figure><p>配置 Docker 的镜像源</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">cat &gt;&gt; &#x2F;etc&#x2F;docker&#x2F;daemon.json &lt;&lt; EOF</span><br><span class="line">&#123;</span><br><span class="line">  &quot;registry-mirrors&quot;: [&quot;https:&#x2F;&#x2F;b9pmyelo.mirror.aliyuncs.com&quot;]</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure><p>然后重启 Docker</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl restart docker</span><br></pre></td></tr></table></figure><p>因为 Docker 容器之间，需要互相通信访问，所以我们需要创建我们的 Docker 网络</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker network create mogu</span><br></pre></td></tr></table></figure><h3 id="安装-Docker-Compose"><a class="header-anchor" href="#安装-Docker-Compose"></a>安装 Docker Compose</h3><p>Docker Compose 是用来定义和运行多个 Docker 应用程序的工具。通过 Compose，可以使用 YAML 文件来配置应用程序需要的所有服务，然后使用一个命令即可从YML文件配置中创建并启动所有服务。</p><div class="tag link"><a class="link-card" title="安装 Docker Compose 官方文档" href="https://docs.docker.com/compose/install/"><div class="left"><img src="https://cdn.jsdelivr.net/gh/halo-blog/cdn-blog-img-b@master/img/DockerIcon.svg"/></div><div class="right"><p class="text">安装 Docker Compose 官方文档</p><p class="url">https://docs.docker.com/compose/install/</p></div></a></div><div class="tag link"><a class="link-card" title="Docker Compose 下载链接" href="https://github.com/docker/compose/releases"><div class="left"><img src="https://cdn.jsdelivr.net/gh/halo-blog/cdn-blog-img-b@master/img/GithubIcon.jpg"/></div><div class="right"><p class="text">Docker Compose 下载链接</p><p class="url">https://github.com/docker/compose/releases</p></div></a></div><p>把下载到的文件使用 ftp 工具，拷贝到 /usr/local/bin/ 目录下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 重命名</span><br><span class="line">mv docker-compose-Linux-x86_64  docker-compose</span><br><span class="line"># 加入执行权限</span><br><span class="line">sudo chmod +x &#x2F;usr&#x2F;local&#x2F;bin&#x2F;docker-compose</span><br><span class="line"># 查看docker-compose版本</span><br><span class="line">docker-compose -v</span><br></pre></td></tr></table></figure><h2 id="下载源码"><a class="header-anchor" href="#下载源码"></a>下载源码</h2><p>下载蘑菇博客的<a href="https://gitee.com/moxi159753/mogu_blog_v2">源码</a></p><p>找到，doc\docker-compose 目录，目录结构如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">docker-compose</span><br><span class="line"> ├── bin     # 相关一键启动脚本的目录</span><br><span class="line"> ├── config  # 存放配置文件</span><br><span class="line"> ├── data    # 存放数据文件</span><br><span class="line"> ├── log     # 存放日志文件</span><br><span class="line"> └── yaml    # 存放 docker compose 的 yaml 文件</span><br></pre></td></tr></table></figure><p>下面我们开始，将 docker-compose 文件夹，拷贝服务器目录位置随意，我是拷贝到 /root/docker-compose 目录，然后给命令设置执行权限</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 进入目录</span><br><span class="line">cd docker-compose</span><br><span class="line"># 添加执行权限</span><br><span class="line">chmod +x bin&#x2F;middleware.sh</span><br><span class="line">chmod +x bin&#x2F;kernShutdown.sh</span><br><span class="line">chmod +x bin&#x2F;wait-for-it.sh</span><br></pre></td></tr></table></figure><h2 id="部署核心组件"><a class="header-anchor" href="#部署核心组件"></a>部署核心组件</h2><p>下面我们将部署蘑菇博客所依赖的核心中间件，例如：Nacos、MySQL、Redis、RabbitMQ、Nginx 等</p><p>首先到 docker-compose/bin 目录下，执行脚本</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># 开始部署核心组件</span><br><span class="line">sh middleware.sh</span><br><span class="line"># 以后打算关闭的话，执行 .&#x2F;kernShutdown.sh</span><br></pre></td></tr></table></figure><p>在部署完中间件后，我们需要进行测试中间件安装是否成功。</p><h3 id="MySQL"><a class="header-anchor" href="#MySQL"></a>MySQL</h3><p>利用 SQLyog、IDEA等工具测试连接：</p><p>默认MySQL用户名：root<br>默认MySQL密码：mogu2018</p><p><img src="https://cdn.jsdelivr.net/gh/halo-blog/cdn-blog-img-b@master/img/Idea%E6%B5%8B%E8%AF%95mugo_mysql%E8%BF%9E%E6%8E%A5.png" alt="Idea测试mugo_mysql连接"></p><h3 id="Nacos"><a class="header-anchor" href="#Nacos"></a>Nacos</h3><p>Nacos 后台配置页面，默认账号和密码：nacos  nacos</p><p>访问下面 URL 进行测试 <a href="http://nacos:8848/nacos">http://nacos:8848/nacos</a></p><p><img src="https://cdn.jsdelivr.net/gh/halo-blog/cdn-blog-img-b@master/img/%E6%B5%8B%E8%AF%95nacos_mugo%E8%BF%9E%E6%8E%A5.png" alt="测试nacos_mugo连接"></p><blockquote><p>设置 host 将 nacos 改为对应服务器外网 IP ，记得开放对应端口</p></blockquote><h3 id="Redis"><a class="header-anchor" href="#Redis"></a>Redis</h3><p>默认Redis密码：mogu2018</p><h3 id="RabbitMQ"><a class="header-anchor" href="#RabbitMQ"></a>RabbitMQ</h3><p>RabbitMQ是消息队列，我们可以访问其图形化界面</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># 图形化地址</span><br><span class="line">IP地址:15672</span><br><span class="line"># 默认账号和密码为：admin  mogu2018</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/halo-blog/cdn-blog-img-b@master/img/%E6%B5%8B%E8%AF%95rabbitmq_mugo%E8%BF%9E%E6%8E%A5.png" alt="测试rabbitmq_mugo连接"></p><h2 id="部署非核心组件"><a class="header-anchor" href="#部署非核心组件"></a>部署非核心组件</h2><h3 id="Zipkin"><a class="header-anchor" href="#Zipkin"></a>Zipkin</h3><p>Zipkin是一个开源的分布式的链路追踪系统，每个微服务都会向zipkin报告计时数据，聚合各业务系统调用延迟数据，达到链路调用监控跟踪</p><h3 id="Sentinel"><a class="header-anchor" href="#Sentinel"></a>Sentinel</h3><h3 id="搜索模块"><a class="header-anchor" href="#搜索模块"></a>搜索模块</h3><h2 id="启动后端项目"><a class="header-anchor" href="#启动后端项目"></a>启动后端项目</h2><h3 id="修改项目配置"><a class="header-anchor" href="#修改项目配置"></a>修改项目配置</h3><p>修改的是 mogu_admin 项目的 application.yml，将 dev 改成 prod 然后修改 bootstrap.yaml ，将 dev 改成 prod，同时还需要修改 nacos 和 sentinel ，将 localhost改为对应的服务名称即可。</p><p>我们重复上面操作，将 mogu_web、mogu_sms、mogu_gateway、mogu_picture、mogu_montor 等项目都进行修改。</p><h3 id="启动项目"><a class="header-anchor" href="#启动项目"></a>启动项目</h3><p>修改完成后，直接启动项目即可。其中我们需要启动核心组件包含下面几个【服务启动没有先后顺序】</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mogu_admin、mogu_web、mogu_sms、mogu_picture、mogu_gateway</span><br></pre></td></tr></table></figure><p>等服务器都启动完成后，下面我们验证一下后台是否正常启动，回到我们的 Nacos 管理界面,如果我们看到下面五个服务都注册到 Nacos 中，那说明启动成功</p><ul><li>mogu_picture</li><li>mogu_sms</li><li>mogu_admin</li><li>mogu_web</li><li>mogu_gateway</li></ul><p>在通过访问下列 swagger 接口，测试接口是否正常</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">############ admin端swagger ##################</span><br><span class="line">http:&#x2F;&#x2F;localhost:8601&#x2F;swagger-ui&#x2F;index.html</span><br><span class="line"></span><br><span class="line">############ picture端swagger ##################</span><br><span class="line">http:&#x2F;&#x2F;localhost:8602&#x2F;swagger-ui&#x2F;index.html</span><br><span class="line"></span><br><span class="line">############ web端swagger ##################</span><br><span class="line">http:&#x2F;&#x2F;localhost:8603&#x2F;swagger-ui&#x2F;index.html</span><br></pre></td></tr></table></figure><p>如果能够进入下面页面的话，说明后台是没有问题的了，下面我们可以验证一下接口</p>]]></content>
    
    
    <summary type="html">蘑菇博客是我目前找到理想的博客系统，基于对该项目的学习，进一步掌握 Java 后端过程</summary>
    
    
    
    <category term="蘑菇博客" scheme="https://halo123.top/categories/%E8%98%91%E8%8F%87%E5%8D%9A%E5%AE%A2/"/>
    
    
  </entry>
  
  <entry>
    <title>服务器环境搭建</title>
    <link href="https://halo123.top/2021/05/15/WebAfterEnd/%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"/>
    <id>https://halo123.top/2021/05/15/WebAfterEnd/%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/</id>
    <published>2021-05-15T06:56:51.000Z</published>
    <updated>2021-05-15T06:47:29.809Z</updated>
    
    <content type="html"><![CDATA[<h2 id="基于-Docker-的环境搭建"><a class="header-anchor" href="#基于-Docker-的环境搭建"></a>基于 Docker 的环境搭建</h2><h3 id="安装Docker"><a class="header-anchor" href="#安装Docker"></a>安装Docker</h3><div class="tag link"><a class="link-card" title="Docker文档" href="https://docs.docker.com/engine/install/centos/"><div class="left"><img src="https://cdn.jsdelivr.net/gh/halo-blog/cdn-blog-img-b@master/img/DockerIcon.svg"/></div><div class="right"><p class="text">Docker文档</p><p class="url">https://docs.docker.com/engine/install/centos/</p></div></a></div><ol><li><p>卸载系统之前的docker</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">sudo yum remove docker \</span><br><span class="line">                  docker-client \</span><br><span class="line">                  docker-client-latest \</span><br><span class="line">                  docker-common \</span><br><span class="line">                  docker-latest \</span><br><span class="line">                  docker-latest-logrotate \</span><br><span class="line">                  docker-logrotate \</span><br><span class="line">                  docker-engine</span><br><span class="line">            </span><br></pre></td></tr></table></figure></li><li><p>安装依赖的包</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo yum install -y yum-utils</span><br></pre></td></tr></table></figure></li><li><p>配置镜像</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo yum-config-manager \</span><br><span class="line">    --add-repo \</span><br><span class="line">    https:&#x2F;&#x2F;download.docker.com&#x2F;linux&#x2F;centos&#x2F;docker-ce.repo</span><br></pre></td></tr></table></figure></li><li><p>安装Docker</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo yum install docker-ce docker-ce-cli containerd.io</span><br></pre></td></tr></table></figure></li><li><p>启动Docker服务</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl start docker</span><br></pre></td></tr></table></figure></li><li><p>检测Docker是否安装成功</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker -v</span><br></pre></td></tr></table></figure></li><li><p>查看下载镜像</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo docker images</span><br></pre></td></tr></table></figure></li><li><p>设置开机自启动</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl enable docker</span><br></pre></td></tr></table></figure></li></ol><h3 id="配置-Docker-镜像加速"><a class="header-anchor" href="#配置-Docker-镜像加速"></a>配置 Docker 镜像加速</h3><div class="tag link"><a class="link-card" title="阿里云镜像加速" href="https://cr.console.aliyun.com/cn-qingdao/instances/mirrors"><div class="left"><img src="https://cdn.jsdelivr.net/gh/halo-blog/cdn-blog-img-b@master/icon/阿里云.svg"/></div><div class="right"><p class="text">阿里云镜像加速</p><p class="url">https://cr.console.aliyun.com/cn-qingdao/instances/mirrors</p></div></a></div><p>针对Docker客户端版本大于 1.10.0 的用户</p><p>您可以通过修改daemon配置文件 /etc/docker/daemon.json 来使用加速器</p><ol><li><p>创建目录</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo mkdir -p &#x2F;etc&#x2F;docker</span><br></pre></td></tr></table></figure></li><li><p>配置镜像加速器地址</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">sudo tee &#x2F;etc&#x2F;docker&#x2F;daemon.json &lt;&lt;-&#39;EOF&#39;</span><br><span class="line">&#123;</span><br><span class="line">  &quot;registry-mirrors&quot;: [&quot;https:&#x2F;&#x2F;578xeysa.mirror.aliyuncs.com&quot;]</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure></li><li><p>重启 Docker 后台线程</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl daemon-reload</span><br></pre></td></tr></table></figure></li><li><p>重启 Docker 服务</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl restart docker</span><br></pre></td></tr></table></figure></li></ol><h3 id="安装-MySQL"><a class="header-anchor" href="#安装-MySQL"></a>安装 MySQL</h3><ol><li><p>拉取 MySQL 5.7 的镜像</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo docker pull mysql:5.7</span><br></pre></td></tr></table></figure></li><li><p>检查下载的镜像</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo docker images</span><br></pre></td></tr></table></figure></li><li><p>创建实例并启动</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">sudo docker run -p 3306:3306 --name mysql \</span><br><span class="line">-v &#x2F;mydata&#x2F;mysql&#x2F;log:&#x2F;var&#x2F;log&#x2F;mysql \</span><br><span class="line">-v &#x2F;mydata&#x2F;mysql&#x2F;data:&#x2F;var&#x2F;lib&#x2F;mysql \</span><br><span class="line">-v &#x2F;mydata&#x2F;mysql&#x2F;conf:&#x2F;etc&#x2F;mysql \</span><br><span class="line">-e MYSQL_ROOT_PASSWORD&#x3D;root \</span><br><span class="line">-d mysql:5.7</span><br></pre></td></tr></table></figure><blockquote><p>配置说明：<br><code>-p 3306:3306</code> 将容器的3306端口映射到主机的3306端口<br><code>--name</code> 指定容器名字<br><code>-v</code>目录挂载<br><code>-e</code>设置mysql参数，初始化root用户的密码<br><code>-d</code>后台运行</p></blockquote></li><li><p>查看 Docker 正在运行的容器</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker ps</span><br></pre></td></tr></table></figure></li><li><p>进入容器内部</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker exec -it mysql bin&#x2F;bash</span><br><span class="line"># 退出命令</span><br><span class="line">exit</span><br></pre></td></tr></table></figure></li><li><p>查看 MySQL 位置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">whereis mysql</span><br></pre></td></tr></table></figure></li><li><p>修改 MySQL 配置文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi &#x2F;mydata&#x2F;mysql&#x2F;conf&#x2F;my.cnf</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[client]</span><br><span class="line">default-character-set&#x3D;utf8</span><br><span class="line">[mysql]</span><br><span class="line">default-character-set&#x3D;utf8</span><br><span class="line">[mysqld]</span><br><span class="line">init_connect&#x3D;&#39;SET collation_connection &#x3D; utf8_unicode_ci&#39;</span><br><span class="line">init_connect&#x3D;&#39;SET NAMES utf8&#39;</span><br><span class="line">character-set-server&#x3D;utf8</span><br><span class="line">collation-server&#x3D;utf8_unicode_ci</span><br><span class="line">skip-character-set-client-handshake</span><br><span class="line">skip-name-resolve</span><br></pre></td></tr></table></figure></li><li><p>重启 MySQL</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker restart mysql</span><br></pre></td></tr></table></figure></li></ol><h3 id="安装-Redis"><a class="header-anchor" href="#安装-Redis"></a>安装 Redis</h3><ol><li><p>拉取镜像</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull redis</span><br></pre></td></tr></table></figure></li><li><p>先配置目录，注意 <code>redis.conf</code> 是文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p &#x2F;mydata&#x2F;redis&#x2F;conf</span><br><span class="line">touch &#x2F;mydata&#x2F;redis&#x2F;conf&#x2F;redis.conf</span><br></pre></td></tr></table></figure></li><li><p>安装，挂载目录</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">docker run -p 6379:6379 --name redis \</span><br><span class="line">-v &#x2F;mydata&#x2F;redis&#x2F;data:&#x2F;data \</span><br><span class="line">-v &#x2F;mydata&#x2F;redis&#x2F;conf&#x2F;redis.conf:&#x2F;etc&#x2F;redis&#x2F;redis.conf \</span><br><span class="line">-d redis redis-server &#x2F;etc&#x2F;redis&#x2F;redis.conf</span><br></pre></td></tr></table></figure></li><li><p>直接进去 redis 客户端</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker exec -it redis redis-cli</span><br></pre></td></tr></table></figure></li><li><p>配置 redis 持久化</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi &#x2F;mydata&#x2F;redis&#x2F;conf&#x2F;redis.conf</span><br></pre></td></tr></table></figure><p>插入以下内容</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">appendonly yes</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker restart redis</span><br></pre></td></tr></table></figure></li><li><p>设置 redis 容器在 Docker 启动的时候启动</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker update redis --restart&#x3D;always</span><br></pre></td></tr></table></figure></li></ol><h3 id="安装-Nacos"><a class="header-anchor" href="#安装-Nacos"></a>安装 Nacos</h3><ol><li><p>拉取镜像</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull nacos&#x2F;nacos-server</span><br></pre></td></tr></table></figure></li><li><p>安装</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d -p 8848:8848 --env MODE&#x3D;standalone --name nacos nacos&#x2F;nacos-server</span><br></pre></td></tr></table></figure></li></ol><h3 id="安装-Elasticsearch、Kibana"><a class="header-anchor" href="#安装-Elasticsearch、Kibana"></a>安装 Elasticsearch、Kibana</h3><ol><li><p>下载镜像文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 存储和检索数据</span><br><span class="line">docker pull elasticsearch:7.4.2</span><br><span class="line"></span><br><span class="line"># 可视化检索数据</span><br><span class="line">docker pull kibana:7.4.2</span><br></pre></td></tr></table></figure></li><li><p>配置挂载数据文件夹</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"># 创建配置文件目录</span><br><span class="line">mkdir -p &#x2F;mydata&#x2F;elasticsearch&#x2F;config</span><br><span class="line"></span><br><span class="line"># 创建数据目录</span><br><span class="line">mkdir -p &#x2F;mydata&#x2F;elasticsearch&#x2F;data</span><br><span class="line"></span><br><span class="line"># 将&#x2F;mydata&#x2F;elasticsearch&#x2F;文件夹中文件都可读可写</span><br><span class="line">chmod -R 777 &#x2F;mydata&#x2F;elasticsearch&#x2F;</span><br><span class="line"></span><br><span class="line"># 配置任意机器可以访问 elasticsearch</span><br><span class="line">echo &quot;http.host: 0.0.0.0&quot; &gt;&#x2F;mydata&#x2F;elasticsearch&#x2F;config&#x2F;elasticsearch.yml</span><br></pre></td></tr></table></figure></li><li><p>启动 Elasticsearch</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">docker run --name elasticsearch -p 9200:9200 -p 9300:9300 \</span><br><span class="line">-e  &quot;discovery.type&#x3D;single-node&quot; \</span><br><span class="line">-e ES_JAVA_OPTS&#x3D;&quot;-Xms64m -Xmx512m&quot; \</span><br><span class="line">-v &#x2F;mydata&#x2F;elasticsearch&#x2F;config&#x2F;elasticsearch.yml:&#x2F;usr&#x2F;share&#x2F;elasticsearch&#x2F;config&#x2F;elasticsearch.yml \</span><br><span class="line">-v &#x2F;mydata&#x2F;elasticsearch&#x2F;data:&#x2F;usr&#x2F;share&#x2F;elasticsearch&#x2F;data \</span><br><span class="line">-v  &#x2F;mydata&#x2F;elasticsearch&#x2F;plugins:&#x2F;usr&#x2F;share&#x2F;elasticsearch&#x2F;plugins \</span><br><span class="line">-d elasticsearch:7.4.2 </span><br></pre></td></tr></table></figure><blockquote><p>配置说明：<br><code>-p 9200:9200 -p 9300:9300</code>：向外暴露两个端口，9200 用于HTTP REST API请求，9300 ES 在分布式集群状态下 ES 之间的通信端口；<br><code>-e  &quot;discovery.type=single-node&quot;</code>：es 以单节点运行<br><code>-e ES_JAVA_OPTS=&quot;-Xms64m -Xmx512m&quot;</code>：设置启动占用内存，不设置可能会占用当前系统所有内存<br><code>-v</code>：挂载容器中的配置文件、数据文件、插件数据到本机的文件夹；<br><code>-d elasticsearch:7.6.2</code>：指定要启动的镜像</p></blockquote></li><li><p>设置 Elasticsearch 随 Docker 启动</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 当前 Docker 开机自启，所以 ES 现在也是开机自启</span><br><span class="line">docker update elasticsearch --restart&#x3D;always</span><br></pre></td></tr></table></figure></li><li><p>启动可视化 Kibana</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">docker run --name kibana \</span><br><span class="line">-e ELASTICSEARCH_HOSTS&#x3D;http:&#x2F;&#x2F;&#123;IP地址&#125;:9200 \</span><br><span class="line">-p 5601:5601 \</span><br><span class="line">-d kibana:7.4.2</span><br></pre></td></tr></table></figure><blockquote><p>配置说明：<br><code>-e ELASTICSEARCH_HOSTS=http://&#123;IP地址&#125;:9200</code>: 这里要设置成自己的虚拟机IP地址</p></blockquote></li><li><p>浏览器输入 IP地址:5601 测试</p><blockquote><p>注意：将服务器对应端口的防火墙关闭</p></blockquote></li></ol>]]></content>
    
    
    <summary type="html">由于环境搭建比较繁琐，该文章用于记录平时需要配置的一些环境过程，一方面为了复现，另一方面在环境有问题时可以用做参考</summary>
    
    
    
    <category term="Linux" scheme="https://halo123.top/categories/Linux/"/>
    
    
    <category term="Docker" scheme="https://halo123.top/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>贪心算法</title>
    <link href="https://halo123.top/2021/05/14/LeetCode/GreedyAlgorithm/"/>
    <id>https://halo123.top/2021/05/14/LeetCode/GreedyAlgorithm/</id>
    <published>2021-05-14T10:56:51.000Z</published>
    <updated>2021-05-30T12:27:38.664Z</updated>
    
    <content type="html"><![CDATA[<p>参考资料：</p><div class="tag link"><a class="link-card" title="《LeetCode 101：和你一起你轻松刷题（C++）》" href="https://github.com/changgyhub/leetcode_101"><div class="left"><img src="https://cdn.jsdelivr.net/gh/halo-blog/cdn-blog-img-b@master/img/GithubIcon.jpg"/></div><div class="right"><p class="text">《LeetCode 101：和你一起你轻松刷题（C++）》</p><p class="url">https://github.com/changgyhub/leetcode_101</p></div></a></div><h2 id="算法解释"><a class="header-anchor" href="#算法解释"></a>算法解释</h2><p>顾名思义，贪心算法或贪心思想采用贪心的策略，保证每次操作都是局部最优的，从而使最后得到的结果是全局最优的。</p><p>举一个最简单的例子：小明和小王喜欢吃苹果，小明可以吃五个，小王可以吃三个。已知苹果园里有吃不完的苹果，求小明和小王一共最多吃多少个苹果。在这个例子中，我们可以选用的贪心策略为，每个人吃自己能吃的最多数量的苹果，这在每个人身上都是局部最优的。又因为全局结果是局部结果的简单求和，且局部结果互不相干，因此局部最优的策略也同样是全局最优的策略。</p><h2 id="分配问题"><a class="header-anchor" href="#分配问题"></a>分配问题</h2><h3 id="分发饼干"><a class="header-anchor" href="#分发饼干"></a>分发饼干</h3><div class="tag link"><a class="link-card" title="455. 分发饼干" href="https://leetcode-cn.com/problems/assign-cookies/"><div class="left"><img src="https://cdn.jsdelivr.net/gh/halo-blog/cdn-blog-img-b@master/img/leetcodeicon.svg"/></div><div class="right"><p class="text">455. 分发饼干</p><p class="url">https://leetcode-cn.com/problems/assign-cookies/</p></div></a></div><p>假设你是一位很棒的家长，想要给你的孩子们一些小饼干。但是，每个孩子最多只能给一块饼干。对每个孩子 <code>i</code> ，都有一个胃口值 <code>g[i]</code>，这是能让孩子们满足胃口的饼干的最小尺寸；并且每块饼干 <code>j</code>，都有一个尺寸 <code>s[j]</code> 。如果 <code>s[j] &gt;= g[i]</code>，我们可以将这个饼干 <code>j</code> 分配给孩子 <code>i</code> ，这个孩子会得到满足。你的目标是尽可能满足越多数量的孩子，并输出这个最大数值。</p><div class="tabs" id="分发饼干"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分发饼干-1">示例 1</button></li><li class="tab"><button type="button" data-href="#分发饼干-2">示例 2</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分发饼干-1"><p>输入：<code>g = [1,2,3]</code> ，<code>s = [1,1]</code></p><p>输出：<code>1</code></p><p>解释：你有三个孩子和两块小饼干，3 个孩子的胃口值分别是：1，2，3。虽然你有两块小饼干，由于他们的尺寸都是 1 ，你只能让胃口值是 1 的孩子满足。所以你应该输出 1 。</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分发饼干-2"><p>输入：<code>g = [1,2]</code>，<code>s = [1,2,3]</code></p><p>输出：<code>2</code></p><p>解释：你有两个孩子和三块小饼干，2 个孩子的胃口值分别是 1，2。你拥有的饼干数量和尺寸都足以让所有孩子满足。所以你应该输出2。</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><p>因为饥饿度最小的孩子最容易吃饱，所以我们先考虑这个孩子。为了尽量使得剩下的饼干可以满足饥饿度更大的孩子，所以我们应该把大于等于这个孩子饥饿度的、且大小最小的饼干给这个孩子。满足了这个孩子之后，我们采取同样的策略，考虑剩下孩子里饥饿度最小的孩子，直到没有满足条件的饼干存在。</p><p>简而言之，这里的贪心策略是，给剩余孩子里最小饥饿度的孩子分配最小的能饱腹的饼干。</p><p>至于具体实现，因为我们需要获得大小关系，一个便捷的方法就是把孩子和饼干分别排序。这样我们就可以从饥饿度最小的孩子和大小最小的饼干出发，计算有多少个对子可以满足条件。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line">   <span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">findContentChildren</span><span class="params">(vector&lt;<span class="keyword">int</span>&gt;&amp; g, vector&lt;<span class="keyword">int</span>&gt;&amp; s)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 对胃口值进行升序排序</span></span><br><span class="line">        <span class="built_in">sort</span>(g.<span class="built_in">begin</span>(), g.<span class="built_in">end</span>());</span><br><span class="line">        <span class="comment">// 对饼干进行升序排序</span></span><br><span class="line">        <span class="built_in">sort</span>(s.<span class="built_in">begin</span>(), s.<span class="built_in">end</span>());</span><br><span class="line">        <span class="keyword">int</span> child = <span class="number">0</span>, cookie = <span class="number">0</span>;</span><br><span class="line">        <span class="comment">// 循环遍历，如果其中一个数组长度小于另一个则跳出循环</span></span><br><span class="line">        <span class="keyword">while</span> (child &lt; g.<span class="built_in">size</span>() &amp;&amp; cookie &lt; s.<span class="built_in">size</span>()) &#123;</span><br><span class="line">            <span class="keyword">if</span> (g[child] &lt;= s[cookie]) &#123;</span><br><span class="line">                <span class="comment">// 满足一个孩子</span></span><br><span class="line">                child++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 无论是否满足都将饼干++</span></span><br><span class="line">            cookie++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 返回满足的孩子数</span></span><br><span class="line">        <span class="keyword">return</span> child;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    vector&lt;<span class="keyword">int</span>&gt; children = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;;</span><br><span class="line">    vector&lt;<span class="keyword">int</span>&gt; cookies = &#123;<span class="number">1</span>, <span class="number">1</span>&#125;;</span><br><span class="line">    <span class="keyword">int</span> result = Solution::<span class="built_in">findContentChildren</span>(children, cookies);</span><br><span class="line">    cout &lt;&lt; result &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    vector&lt;<span class="keyword">int</span>&gt; children = &#123;<span class="number">1</span>, <span class="number">2</span>&#125;;</span><br><span class="line">    vector&lt;<span class="keyword">int</span>&gt; cookies = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;;</span><br><span class="line">    <span class="keyword">int</span> result = Solution::<span class="built_in">findContentChildren</span>(children, cookies);</span><br><span class="line">    cout &lt;&lt; result &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;example 1 &quot;</span> &lt;&lt; endl;</span><br><span class="line">    <span class="built_in">test1</span>();</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;example 2 &quot;</span> &lt;&lt; endl;</span><br><span class="line">    <span class="built_in">test2</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">findContentChildren</span>(<span class="params">g, s</span>):</span></span><br><span class="line">    <span class="comment"># 升序排序</span></span><br><span class="line">    g.sort()</span><br><span class="line">    s.sort()</span><br><span class="line">    child = cookie = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span>(child &lt; <span class="built_in">len</span>(g) <span class="keyword">and</span> cookie &lt; <span class="built_in">len</span>(s)):</span><br><span class="line">        <span class="keyword">if</span> (g[child] &lt;= s[cookie]):</span><br><span class="line">            child += <span class="number">1</span></span><br><span class="line">        cookie += <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> child</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">test1 = findContentChildren([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], [<span class="number">1</span>, <span class="number">1</span>])</span><br><span class="line"><span class="built_in">print</span>(test1)</span><br><span class="line">test2 = findContentChildren([<span class="number">1</span>, <span class="number">2</span>], [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>])</span><br><span class="line"><span class="built_in">print</span>(test2)</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">findContentChildren</span><span class="params">(<span class="keyword">int</span>[] g, <span class="keyword">int</span>[] s)</span> </span>&#123;</span><br><span class="line">        Arrays.sort(s);</span><br><span class="line">        Arrays.sort(g);</span><br><span class="line">        <span class="keyword">int</span> child = <span class="number">0</span>, cookie = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (child &lt; g.length &amp;&amp; cookie &lt; s.length) &#123;</span><br><span class="line">            <span class="keyword">if</span> (g[child] &lt;= s[cookie]) &#123;</span><br><span class="line">                child++;</span><br><span class="line">            &#125;</span><br><span class="line">            cookie++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> child;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">(<span class="keyword">int</span>[] g, <span class="keyword">int</span>[] s)</span></span>&#123;</span><br><span class="line">        Solution solution = <span class="keyword">new</span> Solution();</span><br><span class="line">        <span class="keyword">int</span> result = solution.findContentChildren(g, s);</span><br><span class="line">        System.out.println(result);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] g1 = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;;</span><br><span class="line">        <span class="keyword">int</span>[] s1 = &#123;<span class="number">1</span>, <span class="number">1</span>&#125;;</span><br><span class="line">        System.out.println(<span class="string">&quot;example 1&quot;</span>);</span><br><span class="line">        test(g1,s1);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span>[] g2 = &#123;<span class="number">1</span>, <span class="number">2</span>&#125;;</span><br><span class="line">        <span class="keyword">int</span>[] s2 = &#123;<span class="number">1</span>, <span class="number">2</span>,<span class="number">3</span>&#125;;</span><br><span class="line">        System.out.println(<span class="string">&quot;example 2&quot;</span>);</span><br><span class="line">        test(g2,s2);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong><font color="#33a3dc">复杂度分析</font></strong></p><p>时间复杂度：$O(m \log m + n \log n$)，其中 $m$ 和 $n$ 分别是数组 $g$ 和 $s$ 的长度。对两个数组排序的时间复杂度是 $O(m \log m + n \log n)$，遍历数组的时间复杂度是 $O(m+n)$，因此总时间复杂度是 $O(m \log m + n \log n)$。</p><p>空间复杂度：$O(\log m + \log n)$，其中 $m$ 和 $n$ 分别是数组 $g$ 和 $s$ 的长度。空间复杂度主要是排序的额外空间开销。</p><h3 id="分发糖果"><a class="header-anchor" href="#分发糖果"></a>分发糖果</h3><div class="tag link"><a class="link-card" title="135. 分发糖果" href="https://leetcode-cn.com/problems/candy/"><div class="left"><img src="https://cdn.jsdelivr.net/gh/halo-blog/cdn-blog-img-b@master/img/leetcodeicon.svg"/></div><div class="right"><p class="text">135. 分发糖果</p><p class="url">https://leetcode-cn.com/problems/candy/</p></div></a></div><p>老师想给孩子们分发糖果，有 N 个孩子站成了一条直线，老师会根据每个孩子的表现，预先给他们评分。</p><p>你需要按照以下要求，帮助老师给这些孩子分发糖果：</p><ul><li>每个孩子至少分配到 1 个糖果。</li><li>评分更高的孩子必须比他两侧的邻位孩子获得更多的糖果。</li></ul><p>那么这样下来，老师至少需要准备多少颗糖果呢？</p><div class="tabs" id="分发糖果"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分发糖果-1">示例 1</button></li><li class="tab"><button type="button" data-href="#分发糖果-2">示例 2</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分发糖果-1"><p>输入：<code>[1,0,2]</code></p><p>输出：<code>5</code></p><p>解释：你可以分别给这三个孩子分发 2、1、2 颗糖果。</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分发糖果-2"><p>输入：<code>[1,2,2]</code></p><p>输出：<code>4</code></p><p>解释：你可以分别给这三个孩子分发 1、2、1 颗糖果。第三个孩子只得到 1 颗糖果，这已满足上述两个条件。</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><p>虽然这一道题也是运用贪心策略，但我们只需要简单的两次遍历即可：</p><ol><li>把所有孩子的糖果数初始化为 1；</li><li>先从左往右遍历一遍，如果右边孩子的评分比左边的高，则右边孩子的糖果数更新为左边孩子的糖果数加 1；</li><li>再从右往左遍历一遍，如果左边孩子的评分比右边的高，且左边孩子当前的糖果数不大于右边孩子的糖果数，则左边孩子的糖果数更新为右边孩子的糖果数加 1。</li></ol><p>通过这两次遍历，分配的糖果就可以满足题目要求了。这里的贪心策略即为，在每次遍历中，只考虑并更新相邻一侧的大小关系。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;numeric&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">candy</span><span class="params">(vector&lt;<span class="keyword">int</span>&gt; &amp;ratings)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> nums = ratings.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">if</span> (nums &lt; <span class="number">2</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> nums;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 初始化数组</span></span><br><span class="line">        <span class="function">vector&lt;<span class="keyword">int</span>&gt; <span class="title">candies</span><span class="params">(nums, <span class="number">1</span>)</span></span>;</span><br><span class="line">        <span class="comment">// 从左遍历</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums - <span class="number">1</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (ratings[i + <span class="number">1</span>] &gt; ratings[i]) &#123;</span><br><span class="line">                candies[i + <span class="number">1</span>] = candies[i] + <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 从右遍历</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = nums - <span class="number">1</span>; i &gt;= <span class="number">1</span>; i--) &#123;</span><br><span class="line">            <span class="keyword">if</span> (ratings[i - <span class="number">1</span>] &gt; ratings[i] &amp;&amp; candies[i - <span class="number">1</span>] &lt;= candies[i]) &#123;</span><br><span class="line">                candies[i - <span class="number">1</span>] = candies[i] + <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">accumulate</span>(candies.<span class="built_in">begin</span>(), candies.<span class="built_in">end</span>(), <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    vector&lt;<span class="keyword">int</span>&gt; children = &#123;<span class="number">1</span>, <span class="number">0</span>, <span class="number">2</span>&#125;;</span><br><span class="line">    <span class="keyword">int</span> result = Solution::<span class="built_in">candy</span>(children);</span><br><span class="line">    cout &lt;&lt; result &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">candy</span>(<span class="params">ratings</span>):</span></span><br><span class="line">    lens = <span class="built_in">len</span>(ratings)</span><br><span class="line">    <span class="keyword">if</span>(lens &lt; <span class="number">2</span>):</span><br><span class="line">        <span class="keyword">return</span> lens</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 将糖果数量列表每项值初始化为1</span></span><br><span class="line">    num_list = [<span class="number">1</span> <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, lens)]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 先从左往右遍历一遍</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, lens-<span class="number">1</span>):</span><br><span class="line">        <span class="comment"># 如果右边孩子的评分比左边的高</span></span><br><span class="line">        <span class="keyword">if</span>(ratings[i+<span class="number">1</span>] &gt; ratings[i]):</span><br><span class="line">            <span class="comment"># 右边孩子的糖果数更新为左边孩子的糖果数加 1</span></span><br><span class="line">            num_list[i+<span class="number">1</span>] = num_list[i]+<span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 再从右往左遍历一遍</span></span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(lens-<span class="number">1</span>, <span class="number">0</span>, -<span class="number">1</span>):</span><br><span class="line">        <span class="comment"># 如果左边孩子的评分比右边的高</span></span><br><span class="line">        <span class="comment"># 且左边孩子当前的糖果数不大于右边孩子的糖果数</span></span><br><span class="line">        <span class="keyword">if</span>(ratings[j-<span class="number">1</span>] &gt; ratings[j] <span class="keyword">and</span> num_list[j-<span class="number">1</span>] &lt;= num_list[j]):</span><br><span class="line">            num_list[j-<span class="number">1</span>] = num_list[j]+<span class="number">1</span></span><br><span class="line"></span><br><span class="line">    num = <span class="number">0</span></span><br><span class="line">    <span class="comment"># 求得总糖果数</span></span><br><span class="line">    <span class="keyword">for</span> k <span class="keyword">in</span> num_list:</span><br><span class="line">        num += k</span><br><span class="line">    <span class="keyword">return</span> num</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(candy([<span class="number">1</span>, <span class="number">0</span>, <span class="number">2</span>]))</span><br><span class="line"><span class="built_in">print</span>(candy([<span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>]))</span><br><span class="line"><span class="built_in">print</span>(candy([<span class="number">1</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">1</span>]))</span><br><span class="line"><span class="built_in">print</span>(candy([<span class="number">1</span>, <span class="number">2</span>]))</span><br><span class="line"><span class="built_in">print</span>(candy([<span class="number">1</span>]))</span><br></pre></td></tr></table></figure><p><strong><font color="#33a3dc">复杂度分析</font></strong></p><p>时间复杂度：$O(n)$，其中 $n$ 是孩子的数量。我们需要遍历两次数组以分别计算满足左规则或右规则的最少糖果数量。</p><p>空间复杂度：$O(n)$，其中 $n$ 是孩子的数量。我们需要保存所有的左规则对应的糖果数量。</p><h2 id="区间问题"><a class="header-anchor" href="#区间问题"></a>区间问题</h2><h3 id="无重叠区间"><a class="header-anchor" href="#无重叠区间"></a>无重叠区间</h3><div class="tag link"><a class="link-card" title="435. 无重叠区间" href="https://leetcode-cn.com/problems/non-overlapping-intervals/"><div class="left"><img src="https://cdn.jsdelivr.net/gh/halo-blog/cdn-blog-img-b@master/img/leetcodeicon.svg"/></div><div class="right"><p class="text">435. 无重叠区间</p><p class="url">https://leetcode-cn.com/problems/non-overlapping-intervals/</p></div></a></div><p>给定一个区间的集合，找到需要移除区间的最小数量，使剩余区间互不重叠。</p><p>注意:</p><ol><li>可以认为区间的终点总是大于它的起点。</li><li>区间 <code>[1,2]</code> 和 <code>[2,3]</code> 的边界相互“接触”，但没有相互重叠。</li></ol><div class="tabs" id="无重叠区间"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#无重叠区间-1">示例 1</button></li><li class="tab"><button type="button" data-href="#无重叠区间-2">示例 2</button></li><li class="tab"><button type="button" data-href="#无重叠区间-3">示例 3</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="无重叠区间-1"><p>输入：<code>[ [1,2], [2,3], [3,4], [1,3] ]</code></p><p>输出：<code>1</code></p><p>解释：移除 <code>[1,3]</code> 后，剩下的区间没有重叠。</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="无重叠区间-2"><p>输入：<code>[ [1,2], [1,2], [1,2] ]</code></p><p>输出：<code>2</code></p><p>解释：你需要移除两个 <code>[1,2]</code> 来使剩下的区间没有重叠</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="无重叠区间-3"><p>输入：<code>[ [1,2], [2,3] ]</code></p><p>输出：<code>0</code></p><p>解释：你不需要移除任何区间，因为它们已经是无重叠的了。</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><p>在选择要保留区间时，区间的结尾十分重要：选择的区间结尾越小，余留给其它区间的空间就越大，就越能保留更多的区间。因此，我们采取的贪心策略为，优先保留结尾小且不相交的区间。</p><p>具体实现方法为，先把区间按照结尾的大小进行增序排序，每次选择结尾最小且和前一个选择的区间不重叠的区间。我们这里使用 C++ 的 Lambda，结合 <code>std::sort()</code> 函数进行自定义排序。</p><p>在样例中，排序后的数组为 <code>[[1,2], [1,3], [2,4]]</code>。按照我们的贪心策略：</p><ol><li>首先初始化为区间<code>[1,2]</code>；</li><li>由于 <code>[1,3]</code> 与 <code>[1,2]</code> 相交，我们跳过该区间；</li><li>由于 <code>[2,4]</code> 与 <code>[1,2]</code> 不相交，我们将其保留。</li><li>因此最终保留的区间为 <code>[[1,2], [2,4]]</code>。</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">eraseOverlapIntervals</span><span class="params">(vector &lt;vector&lt;<span class="keyword">int</span>&gt;&gt; &amp;intervals)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (intervals.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> n = intervals.<span class="built_in">size</span>();</span><br><span class="line">        <span class="built_in">sort</span>(intervals.<span class="built_in">begin</span>(), intervals.<span class="built_in">end</span>(), [](vector&lt;<span class="keyword">int</span>&gt; a, vector&lt;<span class="keyword">int</span>&gt; b) &#123;</span><br><span class="line">            <span class="keyword">return</span> a[<span class="number">1</span>] &lt; b[<span class="number">1</span>];</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="keyword">int</span> total = <span class="number">0</span>, prev = intervals[<span class="number">0</span>][<span class="number">1</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; ++i) &#123;</span><br><span class="line">            <span class="keyword">if</span> (intervals[i][<span class="number">0</span>] &lt; prev) &#123;</span><br><span class="line">                total++;</span><br><span class="line">            &#125; <span class="keyword">else</span>&#123;</span><br><span class="line">                prev = intervals[i][<span class="number">1</span>];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> total;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    vector &lt;vector&lt;<span class="keyword">int</span>&gt;&gt; test = &#123;&#123;<span class="number">1</span>,<span class="number">2</span>&#125;,&#123;<span class="number">2</span>,<span class="number">4</span>&#125;,&#123;<span class="number">1</span>,<span class="number">3</span>&#125;&#125;;</span><br><span class="line">    <span class="keyword">int</span> result = Solution::<span class="built_in">eraseOverlapIntervals</span>(test);</span><br><span class="line">    cout &lt;&lt; result &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong><font color="#33a3dc">复杂度分析</font></strong></p><p>时间复杂度：$O(n \log n)$，其中 $n$ 是区间的数量。我们需要 $O(n \log n)$ 的时间对所有的区间按照右端点进行升序排序，并且需要 $O(n)$ 的时间进行遍历。由于前者在渐进意义下大于后者，因此总时间复杂度为 $O(n \log n)$。</p><p>空间复杂度：$O(\log n)$，即为排序需要使用的栈空间。</p><h3 id="种花问题"><a class="header-anchor" href="#种花问题"></a>种花问题</h3><div class="tag link"><a class="link-card" title="605. 种花问题" href="https://leetcode-cn.com/problems/can-place-flowers/"><div class="left"><img src="https://cdn.jsdelivr.net/gh/halo-blog/cdn-blog-img-b@master/img/leetcodeicon.svg"/></div><div class="right"><p class="text">605. 种花问题</p><p class="url">https://leetcode-cn.com/problems/can-place-flowers/</p></div></a></div><br/><p>从一边开始遍历，当这个值为0且左右两边都为0时，将其变成1。最后将结果数组求和与原始值求和值相减即为最大满足值。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;numeric&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">bool</span> <span class="title">canPlaceFlowers</span><span class="params">(vector&lt;<span class="keyword">int</span>&gt; &amp;flowerbed, <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 当n为0时无论什么情况都为true</span></span><br><span class="line">        <span class="keyword">if</span> (n == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> nums = flowerbed.<span class="built_in">size</span>();</span><br><span class="line">        <span class="comment">// 在只有1个位置时，chu了n=0情况下，只有n为1且位置为空才为true</span></span><br><span class="line">        <span class="keyword">if</span> (nums == <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (n == <span class="number">1</span> &amp;&amp; flowerbed[<span class="number">0</span>] == <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 用于统计未加入花时的，花数目</span></span><br><span class="line">        <span class="keyword">int</span> before = <span class="built_in">accumulate</span>(flowerbed.<span class="built_in">begin</span>(), flowerbed.<span class="built_in">end</span>(), <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 将[0,0,...]情况下时变成[1,0,...]</span></span><br><span class="line">        <span class="keyword">if</span> (flowerbed[<span class="number">0</span>] == <span class="number">0</span> &amp;&amp; flowerbed[<span class="number">1</span>] == <span class="number">0</span>) &#123;</span><br><span class="line">            flowerbed[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 将[...,0,0,0,...]情况变成[...,0,1,0,...]</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; flowerbed.<span class="built_in">size</span>() - <span class="number">1</span>; ++i) &#123;</span><br><span class="line">            <span class="keyword">if</span> (flowerbed[i] == <span class="number">0</span> &amp;&amp; flowerbed[i - <span class="number">1</span>] == <span class="number">0</span> &amp;&amp; flowerbed[i + <span class="number">1</span>] == <span class="number">0</span>) &#123;</span><br><span class="line">                flowerbed[i] = <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 将[...,0,0]情况变成[...,0,1]</span></span><br><span class="line">        <span class="keyword">if</span> (flowerbed[flowerbed.<span class="built_in">size</span>() - <span class="number">1</span>] == <span class="number">0</span> &amp;&amp; flowerbed[flowerbed.<span class="built_in">size</span>() - <span class="number">2</span>] == <span class="number">0</span>) &#123;</span><br><span class="line">            flowerbed[flowerbed.<span class="built_in">size</span>() - <span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//统计加入花后的所有花的数目</span></span><br><span class="line">        <span class="keyword">int</span> after = <span class="built_in">accumulate</span>(flowerbed.<span class="built_in">begin</span>(), flowerbed.<span class="built_in">end</span>(), <span class="number">0</span>);</span><br><span class="line">        <span class="comment">// 当n小于,可以插入花的最大数目时返回true</span></span><br><span class="line">        <span class="keyword">if</span> ((after - before) &gt;= n) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    vector&lt;<span class="keyword">int</span>&gt; test = &#123;<span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>&#125;;</span><br><span class="line">    vector&lt;<span class="keyword">int</span>&gt; test2 = &#123;<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>&#125;;</span><br><span class="line">    vector&lt;<span class="keyword">int</span>&gt; test3 = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    vector&lt;<span class="keyword">int</span>&gt; test4 = &#123;<span class="number">1</span>&#125;;</span><br><span class="line">    vector&lt;<span class="keyword">int</span>&gt; test5 = &#123;<span class="number">0</span>, <span class="number">0</span>&#125;;</span><br><span class="line">    <span class="keyword">bool</span> result = Solution::<span class="built_in">canPlaceFlowers</span>(test4, <span class="number">0</span>);</span><br><span class="line">    cout &lt;&lt; result &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="销售价值减少的颜色球【中等】"><a class="header-anchor" href="#销售价值减少的颜色球【中等】"></a>销售价值减少的颜色球【中等】</h2><div class="tag link"><a class="link-card" title="1648. 销售价值减少的颜色球" href="https://leetcode-cn.com/problems/sell-diminishing-valued-colored-balls/"><div class="left"><img src="https://cdn.jsdelivr.net/gh/halo-blog/cdn-blog-img-b@master/img/leetcodeicon.svg"/></div><div class="right"><p class="text">1648. 销售价值减少的颜色球</p><p class="url">https://leetcode-cn.com/problems/sell-diminishing-valued-colored-balls/</p></div></a></div><p>你有一些球的库存 <code>inventory</code> ，里面包含着不同颜色的球。一个顾客想要<font color="#faa755">任意颜色</font>总数为 <code>orders</code> 的球。</p><p>这位顾客有一种特殊的方式衡量球的价值：每个球的价值是目前剩下的<font color="#faa755">同色球</font>的数目。比方说还剩下 6 个黄球，那么顾客买第一个黄球的时候该黄球的价值为 6。这笔交易以后，只剩下 5 个黄球了，所以下一个黄球的价值为 5 （也就是球的价值随着顾客购买同色球是递减的）。</p><p>给你整数数组 <code>inventory</code>，其中 <code>inventory[i]</code> 表示第 <code>i</code> 种颜色球一开始的数目。同时给你整数 <code>orders</code>，表示顾客总共想买的球数目。你可以按照任意顺序卖球。</p><p>请你返回卖了 <code>orders</code> 个球以后最大总价值之和。由于答案可能会很大，请你返回答案对 $10^{9} + 7$ 取余数 的结果。</p><div class="tabs" id="销售价值减少的颜色球"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#销售价值减少的颜色球-1">示例 1</button></li><li class="tab"><button type="button" data-href="#销售价值减少的颜色球-2">示例 2</button></li><li class="tab"><button type="button" data-href="#销售价值减少的颜色球-3">示例 3</button></li><li class="tab"><button type="button" data-href="#销售价值减少的颜色球-4">示例 4</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="销售价值减少的颜色球-1"><p>输入：<code>inventory = [2,5]</code>，<code>orders = 4</code></p><p>输出：14</p><p>解释：卖 1 个第一种颜色的球（价值为 2），卖 3 个第二种颜色的球（价值为 5 + 4 + 3）。最大总和为 2 + 5 + 4 + 3 = 14。</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="销售价值减少的颜色球-2"><p>输入：<code>inventory = [3,5]</code>，<code>orders = 6</code></p><p>输出：19</p><p>解释：卖 2 个第一种颜色的球（价值为 3 + 2），卖 4 个第二种颜色的球（价值为 5 + 4 + 3 + 2）。最大总和为 3 + 2 + 5 + 4 + 3 + 2 = 19。</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="销售价值减少的颜色球-3"><p>输入：<code>inventory = [2,8,4,10,6]</code>，<code>orders = 20</code></p><p>输出：110</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="销售价值减少的颜色球-4"><p>输入：<code>inventory = [1000000000]</code>，<code>orders = 1000000000</code></p><p>输出：21</p><p>解释：卖 1000000000 次第一种颜色的球，总价值为 500000000。 500000000 对 $10^{9} + 7$ 取余为 21</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><p>该题使用贪心算法，很容易想到，对数组进行从大到小排序，每次让值最大的元素加到 <code>result</code>，并使 <code>orders-1</code>。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">maxProfit</span>(<span class="params">inventory, orders</span>):</span></span><br><span class="line">    i = <span class="number">0</span></span><br><span class="line">    result = <span class="number">0</span></span><br><span class="line">    <span class="comment"># 数组元素只有一个时</span></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(inventory) == <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">while</span> orders &gt; <span class="number">0</span>:</span><br><span class="line">            orders = orders-<span class="number">1</span></span><br><span class="line">            result = result + inventory[<span class="number">0</span>]</span><br><span class="line">            inventory[<span class="number">0</span>] = inventory[<span class="number">0</span>] - <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> result % <span class="number">1000000007</span></span><br><span class="line">    <span class="comment"># 数组元素有多个时</span></span><br><span class="line">    <span class="keyword">while</span> orders &gt; <span class="number">0</span> <span class="keyword">and</span> i &lt; <span class="built_in">len</span>(inventory):</span><br><span class="line">        <span class="keyword">if</span> inventory[i] &lt; inventory[i + <span class="number">1</span>]:</span><br><span class="line">            inventory = <span class="built_in">sorted</span>(inventory, reverse=<span class="literal">True</span>)</span><br><span class="line">        result += inventory[i]</span><br><span class="line">        inventory[i] = inventory[i] - <span class="number">1</span></span><br><span class="line">        orders = orders - <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> result % <span class="number">1000000007</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="built_in">print</span>(maxProfit([<span class="number">2</span>, <span class="number">5</span>], <span class="number">4</span>))  <span class="comment"># 14</span></span><br><span class="line">    <span class="built_in">print</span>(maxProfit([<span class="number">3</span>, <span class="number">5</span>], <span class="number">6</span>))  <span class="comment"># 19</span></span><br><span class="line">    <span class="built_in">print</span>(maxProfit([<span class="number">2</span>, <span class="number">8</span>, <span class="number">4</span>, <span class="number">10</span>, <span class="number">6</span>], <span class="number">20</span>))  <span class="comment"># 110</span></span><br><span class="line">    <span class="built_in">print</span>(maxProfit([<span class="number">10</span>], <span class="number">10</span>))  <span class="comment"># 55</span></span><br><span class="line">    <span class="built_in">print</span>(maxProfit([<span class="number">1000000000</span>], <span class="number">1000000000</span>))  <span class="comment"># 21</span></span><br><span class="line">    <span class="built_in">print</span>(maxProfit([<span class="number">773160767</span>], <span class="number">252264991</span>))  <span class="comment"># 70267492</span></span><br></pre></td></tr></table></figure><p>但题目中给的数据比较大，如果不进行优化会超时，<a href="https://leetcode-cn.com/problems/sell-diminishing-valued-colored-balls/solution/liang-chong-si-lu-you-hua-tan-xin-suan-fa-you-hua-/">优化思路</a></p><p>不需要一次一次的模拟，而是一次性买入一定数量的球，直至该球数量等于至第二多数量。对于示例 3：<code>inventory = [2,8,4,10,6]</code>，<code>orders = 20</code> 而言：</p><p>首先，从大到小排序。<code>[10, 8, 6, 4, 2]</code>，然后逐步模拟：</p><ul><li><code>[10, 8, 6, 4, 2]</code>，<code>orders = 20</code> 数量最多的同色球的数量为 10，第二多的为 8，颜色数为 1。此时我们可以销售第一个颜色的球 2 次，获利 10 + 9 = 19。</li><li><code>[8, 8, 6, 4, 2]</code>，<code>orders = 18</code> 数量最多的同色球的数量为 8，第二多（与第一不同）的为 6，颜色数为 2。此时我们可以销售 2 × 2 = 4 次，获利 (8 + 7) × 2 = 30。</li><li><code>[6, 6, 6, 4, 2]</code>，<code>orders = 14</code> 数量最多的同色球的数量为 6，第二多（与第一不同）的为 4，颜色数为 3。此时我们可以销售 2 × 3 = 6 次，获利 (6 + 5) × 3 = 33。</li><li><code>[4, 4, 4, 4, 2]</code>，<code>orders = 8</code> 数量最多的同色球的数量为 4，第二多（与第一不同）的为 2，颜色数 = 4。此时我们可以全部卖完，销售 2 × 4 次，获利（4 + 3）× 4 = 28。</li><li>总计收入为 19 + 30 + 33 + 28 = 110.</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">maxProfit</span>(<span class="params">inventory, orders</span>):</span></span><br><span class="line">    inventory = <span class="built_in">sorted</span>(inventory, reverse=<span class="literal">True</span>)</span><br><span class="line">    res = <span class="number">0</span></span><br><span class="line">    i = <span class="number">0</span></span><br><span class="line">    mod = <span class="number">1e9</span>+<span class="number">7</span></span><br><span class="line">    <span class="keyword">while</span> orders &gt; <span class="number">0</span>:</span><br><span class="line">        <span class="comment"># 找到第二多元素的索引</span></span><br><span class="line">        <span class="keyword">while</span> i &lt; <span class="built_in">len</span>(inventory) <span class="keyword">and</span> inventory[i] &gt;= inventory[<span class="number">0</span>]:</span><br><span class="line">            i = i + <span class="number">1</span></span><br><span class="line">        <span class="comment"># 将第二多元素赋值到 nextEle</span></span><br><span class="line">        nextEle = <span class="number">0</span></span><br><span class="line">        <span class="keyword">if</span> i &lt; <span class="built_in">len</span>(inventory):</span><br><span class="line">            nextEle = inventory[i]</span><br><span class="line">        <span class="comment"># 具有相同个数的元素有多少个</span></span><br><span class="line">        bucks = i</span><br><span class="line">        <span class="comment"># 当前最多元素与第二多元素个数之差</span></span><br><span class="line">        delta = inventory[<span class="number">0</span>] - nextEle</span><br><span class="line">        <span class="comment"># 最多可以一次性销售多少次</span></span><br><span class="line">        rem = bucks * delta</span><br><span class="line">        <span class="comment"># 一次性销售次数大于卖的个数</span></span><br><span class="line">        <span class="keyword">if</span> rem &gt; orders:</span><br><span class="line">            dec = orders // bucks</span><br><span class="line">            a1 = inventory[<span class="number">0</span>] - dec + <span class="number">1</span></span><br><span class="line">            an = inventory[<span class="number">0</span>]</span><br><span class="line">            res = res + ((((a1 + an) * dec) // <span class="number">2</span>) * bucks)</span><br><span class="line">            res = res + ((inventory[<span class="number">0</span>] - dec) * (orders % bucks))</span><br><span class="line">        <span class="comment"># 一次性销售次数小于卖的个数</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="comment"># 可以卖出的最低价格</span></span><br><span class="line">            a1 = nextEle + <span class="number">1</span></span><br><span class="line">            <span class="comment"># 可以卖出的最高价格</span></span><br><span class="line">            an = inventory[<span class="number">0</span>]</span><br><span class="line">            <span class="comment"># 等差数列求和</span></span><br><span class="line">            res = res + ((((a1 + an) * delta) // <span class="number">2</span>) * bucks)</span><br><span class="line">            inventory[<span class="number">0</span>] = nextEle</span><br><span class="line">        <span class="comment"># orders 减去一次性买入个数</span></span><br><span class="line">        orders = orders - rem</span><br><span class="line">        <span class="comment"># 前取模防止溢出</span></span><br><span class="line">        res = res % mod</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">int</span>(res)</span><br></pre></td></tr></table></figure><p><strong><font color="#33a3dc">时间复杂度分析</font></strong>：$n \log(n)$</p>]]></content>
    
    
    <summary type="html">LeetCode刷题之贪心算法</summary>
    
    
    
    <category term="LeetCode" scheme="https://halo123.top/categories/LeetCode/"/>
    
    
    <category term="LeetCode" scheme="https://halo123.top/tags/LeetCode/"/>
    
    <category term="贪心算法" scheme="https://halo123.top/tags/%E8%B4%AA%E5%BF%83%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
</feed>
